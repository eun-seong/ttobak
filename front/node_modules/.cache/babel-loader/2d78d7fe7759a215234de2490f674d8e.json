{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Diagnose/Attention/AttentionContainer.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingComp from 'Components/LoadingComp';\nimport AttentionPresenter from './AttentionPresenter';\nimport { D3, TTobak, SoundEffect } from 'images';\nimport { D3_Api, soundURL, D_tutorial } from 'api';\nconst idx_txt = 'foc';\nconst initState = {\n  gameState: false,\n  s_id: 4,\n  isImageLoaded: false,\n  percent: 0,\n  showPopup: false,\n  showNextPopup: false,\n  isRecording: false,\n  TTobaki: TTobak.ttobak1_1,\n  currentIndex: 1,\n  totalNum: 0,\n  isPlaying: false,\n  RecordingCircle: false\n};\n\nclass Attention extends React.Component {\n  constructor() {\n    super();\n\n    this.androidResponse = async e => {\n      console.log(e.detail);\n      this.audioResult = e.detail;\n      this.andriodListener();\n    };\n\n    this.stopRecording = e => {\n      console.log(e.detail);\n      clearInterval(this.setRecording);\n      this.recording_end_sound.play();\n      this.setState({\n        isRecording: false,\n        RecordingCircle: false\n      });\n    };\n\n    this.newRequest = async () => {\n      console.log('new request!');\n      const {\n        user\n      } = this.props;\n      const {\n        data\n      } = await D3_Api.ask(user.student.s_id, user.student.s_id);\n      console.log(data);\n\n      switch (data.code) {\n        case 1:\n          this.cure = data.focus;\n          this.currentIndex = 0;\n          this.currentCure = this.cure[this.currentIndex];\n          this.currentAudio = null;\n          this.currentAudio = new Audio(soundURL + this.currentCure.ques_path1);\n          this.setState({\n            totalNum: this.cure.length\n          });\n          setTimeout(() => this.playSound(), 2000);\n          break;\n\n        case 'tutorial':\n          this.tutorial(data);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.tutorial = data => {\n      this.setState({\n        gameState: 'tutorial'\n      });\n      this.ques_char = data.sample_ques.ques_char;\n      this.sample_ques = new Audio(soundURL + data.sample_ques.ques_path1);\n      this.voice = [];\n\n      for (let i = 0; i < data.voice.length; i++) {\n        this.voice.push(new Audio(soundURL + data.voice[i].voc_path));\n      }\n\n      this.voice[0].addEventListener('ended', () => {\n        this.setState({\n          TTobaki: TTobak.ttobak3_2\n        });\n        setTimeout(() => {\n          if (!!this.sample_ques) {\n            this.sample_ques.play();\n            this.setState({\n              TTobaki: TTobak.ttobak3_2,\n              isPlaying: true\n            });\n          }\n        }, 1000);\n      });\n      this.sample_ques.addEventListener('ended', () => {\n        this.setState({\n          TTobaki: TTobak.ttobak1_1,\n          isPlaying: false\n        });\n        setTimeout(() => {\n          if (!!this.voice[1]) this.voice[1].play();\n          this.setState({\n            TTobaki: TTobak.ttobak3_2\n          });\n        }, 1000);\n      });\n      this.voice[1].addEventListener('ended', () => {\n        this.setState({\n          TTobaki: TTobak.ttobak1_1,\n          isPlaying: false\n        });\n        setTimeout(() => {\n          this.recording_start_sound.play();\n          this.setState({\n            isRecording: true\n          });\n          this.setRecording = setInterval(() => {\n            this.setState({\n              RecordingCircle: !this.state.RecordingCircle\n            });\n          }, 500);\n          window.BRIDGE.recordAudio(this.props.user.student.gender, this.ques_char);\n        }, 800);\n      });\n      this.voice[2].addEventListener('ended', () => {\n        this.setState({\n          TTobaki: TTobak.ttobak1_1\n        });\n        setTimeout(() => {\n          if (!!this.sample_ques) this.sample_ques.play();\n        }, 1000);\n      });\n      this.voice[3].addEventListener('ended', async () => {\n        const {\n          data\n        } = await D_tutorial.answer(this.props.user.student.s_id, idx_txt);\n        console.log(data);\n        this.setState({\n          gameState: false\n        });\n        this.newRequest();\n        this.sample_ques = null;\n        this.voice = null;\n      });\n      setTimeout(() => {\n        if (!!this.voice[0]) this.voice[0].play();\n      }, 1000);\n    };\n\n    this.andriodListener = async () => {\n      this.setState({\n        TTobaki: TTobak.ttobak2_1\n      });\n\n      try {\n        if (this.audioResult.status === 'Success') {\n          const {\n            user\n          } = this.props;\n\n          if (this.state.gameState === 'tutorial') {\n            this.setState({\n              TTobaki: TTobak.ttobak3_2\n            });\n\n            if (this.audioResult.score < 85) {\n              if (!!this.voice[2]) this.voice[2].play();\n            } else {\n              if (!!this.voice[3]) this.voice[3].play();\n            }\n\n            return;\n          }\n\n          const {\n            data\n          } = await D3_Api.answer(user.student.s_id, this.currentCure.ques_id, this.audioResult.score, this.audioResult.phone_score, this.audioResult.speed_score, this.audioResult.rhythm_score);\n          console.log(data);\n\n          if (data.code === 1) {\n            if (data.is_stop || data.to_next_level === '모든 문제를 학습했습니다') {\n              this.gameDone();\n            } else if (data.to_next_level) {\n              this.newRequest();\n            } else {\n              if (this.currentIndex < this.cure.length - 1) {\n                this.currentIndex++;\n              } else {\n                this.gameDone();\n                return;\n              }\n\n              this.currentCure = this.cure[this.currentIndex];\n              this.currentAudio = null;\n              this.currentAudio = new Audio(soundURL + this.currentCure.ques_path1);\n              setTimeout(() => {\n                this.setState({\n                  TTobaki: TTobak.ttobak1_1,\n                  currentIndex: this.currentIndex + 1\n                });\n              }, 3000);\n              setTimeout(() => {\n                this.playSound();\n              }, 5500);\n            }\n          } else console.log(data.message);\n        } else {\n          console.log(this.audioResult.message);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.playSound = () => {\n      if (!!this.currentAudio) {\n        this.currentAudio.addEventListener('ended', () => {\n          this.setState({\n            TTobaki: TTobak.ttobak1_1,\n            isPlaying: false\n          });\n          setTimeout(() => {\n            this.recording_start_sound.play();\n            this.setState({\n              isRecording: true\n            });\n            this.setRecording = setInterval(() => {\n              this.setState({\n                RecordingCircle: !this.state.RecordingCircle\n              });\n            }, 500);\n            window.BRIDGE.recordAudio(this.props.user.student.gender, this.currentCure.ques_char);\n          }, 800);\n        });\n        this.currentAudio.play();\n        this.setState({\n          TTobaki: TTobak.ttobak3_2,\n          isPlaying: true\n        });\n      }\n    };\n\n    this.imagesPreloading = picture => {\n      for (let i in picture) {\n        for (let prop in picture[i]) {\n          let img = new Image();\n          img.src = picture[i][prop];\n\n          img.onload = () => {\n            this.setState({\n              percent: ++this.numOfLoadedImage / this.totalImages * 100\n            });\n\n            if (this.numOfLoadedImage === this.totalImages) {\n              this.setState({\n                isImageLoaded: true\n              });\n              this.newRequest();\n            }\n          };\n        }\n      }\n    };\n\n    this.gameDone = () => {\n      console.log('game doen!');\n      this.setState({\n        showNextPopup: true\n      });\n    };\n\n    this.onPopupButtonHandle = () => {\n      this.props.history.replace('/diagnose/result');\n    };\n\n    this.onContinueButtonHandle = () => {\n      this.setState({\n        showPopup: false\n      });\n    };\n\n    this.onPauseButtonHandle = () => {\n      this.setState({\n        showPopup: true\n      });\n    };\n\n    this.onCompleteButtonHandle = () => {\n      if (this.state.isRecording) {\n        window.BRIDGE.requestStopRecording();\n      }\n    };\n\n    this.recording_start_sound = new Audio(SoundEffect.recording_start);\n    this.recording_end_sound = new Audio(SoundEffect.recording_end);\n    this.numOfLoadedImage = 0;\n    this.picture = {\n      D3,\n      TTobak\n    };\n    this.totalImages = Object.keys(D3).length + Object.keys(TTobak).length;\n    this.cure = null;\n    this.currentCure = null;\n    this.currentIndex = 0;\n    this.currentAudio = null;\n    this.audioResult = null;\n    this.state = initState;\n  }\n\n  async componentDidMount() {\n    const {\n      user\n    } = this.props;\n\n    if (!user.user.u_id || !user.student.s_id) {\n      this.props.history.push('/root/signin');\n      return;\n    }\n\n    this.imagesPreloading(this.picture);\n    window.addEventListener('android', this.androidResponse);\n    window.addEventListener('androidStopRecording', this.stopRecording);\n  }\n\n  componentWillUnmount() {\n    if (!!this.currentAudio) {\n      this.currentAudio.pause();\n      this.currentAudio.remove();\n      this.currentAudio = null;\n    }\n\n    if (!!this.sample_ques) {\n      this.sample_ques.pause();\n      this.sample_ques = null;\n    }\n\n    if (!!this.voice) {\n      for (let i = 0; i < this.voice.length; i++) {\n        if (!!this.voice[i]) {\n          this.voice.pause();\n          this.voice = null;\n        }\n      }\n\n      window.removeEventListener('android', this.androidResponse);\n      window.removeEventListener('androidStopRecording', this.stopRecording);\n    }\n  }\n\n  render() {\n    const {\n      isImageLoaded,\n      showPopup,\n      showNextPopup,\n      percent,\n      TTobaki,\n      RecordingCircle,\n      isPlaying\n    } = this.state;\n\n    if (isImageLoaded) {\n      return /*#__PURE__*/React.createElement(AttentionPresenter, {\n        Background: D3.d3_background,\n        TTobak: TTobaki,\n        RecordingCircle: RecordingCircle,\n        isPlaying: isPlaying,\n        showPopup: showPopup,\n        showNextPopup: showNextPopup,\n        onPopupButtonHandle: this.onPopupButtonHandle,\n        onContinueButtonHandle: this.onContinueButtonHandle,\n        onPauseButtonHandle: this.onPauseButtonHandle,\n        onCompleteButtonHandle: this.onCompleteButtonHandle,\n        currentIndex: this.state.currentIndex,\n        totalNum: this.state.totalNum,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 21\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(LoadingComp, {\n        percent: percent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n}\n\nAttention.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(Attention));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Diagnose/Attention/AttentionContainer.js"],"names":["React","withRouter","PropTypes","connect","LoadingComp","AttentionPresenter","D3","TTobak","SoundEffect","D3_Api","soundURL","D_tutorial","idx_txt","initState","gameState","s_id","isImageLoaded","percent","showPopup","showNextPopup","isRecording","TTobaki","ttobak1_1","currentIndex","totalNum","isPlaying","RecordingCircle","Attention","Component","constructor","androidResponse","e","console","log","detail","audioResult","andriodListener","stopRecording","clearInterval","setRecording","recording_end_sound","play","setState","newRequest","user","props","data","ask","student","code","cure","focus","currentCure","currentAudio","Audio","ques_path1","length","setTimeout","playSound","tutorial","ques_char","sample_ques","voice","i","push","voc_path","addEventListener","ttobak3_2","recording_start_sound","setInterval","state","window","BRIDGE","recordAudio","gender","answer","ttobak2_1","status","score","ques_id","phone_score","speed_score","rhythm_score","is_stop","to_next_level","gameDone","message","imagesPreloading","picture","prop","img","Image","src","onload","numOfLoadedImage","totalImages","onPopupButtonHandle","history","replace","onContinueButtonHandle","onPauseButtonHandle","onCompleteButtonHandle","requestStopRecording","recording_start","recording_end","Object","keys","componentDidMount","u_id","componentWillUnmount","pause","remove","removeEventListener","render","d3_background","propTypes","objectOf","any","isRequired","dispatch","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport LoadingComp from 'Components/LoadingComp';\nimport AttentionPresenter from './AttentionPresenter';\n\nimport { D3, TTobak, SoundEffect } from 'images';\nimport { D3_Api, soundURL, D_tutorial } from 'api';\n\nconst idx_txt = 'foc';\nconst initState = {\n    gameState: false,\n    s_id: 4,\n    isImageLoaded: false,\n    percent: 0,\n    showPopup: false,\n    showNextPopup: false,\n    isRecording: false,\n    TTobaki: TTobak.ttobak1_1,\n    currentIndex: 1,\n    totalNum: 0,\n    isPlaying: false,\n    RecordingCircle: false,\n};\n\nclass Attention extends React.Component {\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    constructor() {\n        super();\n        this.recording_start_sound = new Audio(SoundEffect.recording_start);\n        this.recording_end_sound = new Audio(SoundEffect.recording_end);\n        this.numOfLoadedImage = 0;\n        this.picture = { D3, TTobak };\n        this.totalImages = Object.keys(D3).length + Object.keys(TTobak).length;\n        this.cure = null;\n        this.currentCure = null;\n        this.currentIndex = 0;\n        this.currentAudio = null;\n        this.audioResult = null;\n\n        this.state = initState;\n    }\n\n    async componentDidMount() {\n        const { user } = this.props;\n\n        if (!user.user.u_id || !user.student.s_id) {\n            this.props.history.push('/root/signin');\n            return;\n        }\n\n        this.imagesPreloading(this.picture);\n\n        window.addEventListener('android', this.androidResponse);\n        window.addEventListener('androidStopRecording', this.stopRecording);\n    }\n\n    componentWillUnmount() {\n        if (!!this.currentAudio) {\n            this.currentAudio.pause();\n            this.currentAudio.remove();\n            this.currentAudio = null;\n        }\n        if (!!this.sample_ques) {\n            this.sample_ques.pause();\n            this.sample_ques = null;\n        }\n        if (!!this.voice) {\n            for (let i = 0; i < this.voice.length; i++) {\n                if (!!this.voice[i]) {\n                    this.voice.pause();\n                    this.voice = null;\n                }\n            }\n            window.removeEventListener('android', this.androidResponse)\n            window.removeEventListener('androidStopRecording', this.stopRecording);\n        }\n    }\n\n    androidResponse = async (e) => {\n        console.log(e.detail);\n        this.audioResult = e.detail;\n        this.andriodListener();\n    }\n\n    stopRecording = (e) => {\n        console.log(e.detail);\n        clearInterval(this.setRecording);\n        this.recording_end_sound.play();\n        this.setState({\n            isRecording: false,\n            RecordingCircle: false,\n        });\n    }\n\n    newRequest = async () => {\n        console.log('new request!');\n        const { user } = this.props;\n\n        const { data } = await D3_Api.ask(user.student.s_id, user.student.s_id);\n        console.log(data);\n\n        switch (data.code) {\n            case 1:\n                this.cure = data.focus;\n                this.currentIndex = 0;\n                this.currentCure = this.cure[this.currentIndex];\n                this.currentAudio = null;\n                this.currentAudio = new Audio(soundURL + this.currentCure.ques_path1);\n                this.setState({\n                    totalNum: this.cure.length,\n                })\n                setTimeout(() => this.playSound(), 2000);\n                break;\n            case 'tutorial':\n                this.tutorial(data);\n                break;\n            default:\n                break;\n        }\n    }\n\n    tutorial = (data) => {\n        this.setState({\n            gameState: 'tutorial',\n        })\n        this.ques_char = data.sample_ques.ques_char;\n        this.sample_ques = new Audio(soundURL + data.sample_ques.ques_path1);\n        this.voice = [];\n        for (let i = 0; i < data.voice.length; i++) {\n            this.voice.push(new Audio(soundURL + data.voice[i].voc_path));\n        }\n\n        this.voice[0].addEventListener('ended', () => {\n            this.setState({\n                TTobaki: TTobak.ttobak3_2,\n            });\n            setTimeout(() => {\n                if (!!this.sample_ques) {\n                    this.sample_ques.play();\n                    this.setState({\n                        TTobaki: TTobak.ttobak3_2,\n                        isPlaying: true,\n                    });\n                }\n            }, 1000);\n        });\n\n        this.sample_ques.addEventListener('ended', () => {\n            this.setState({\n                TTobaki: TTobak.ttobak1_1,\n                isPlaying: false,\n            });\n            setTimeout(() => {\n                if (!!this.voice[1]) this.voice[1].play();\n                this.setState({\n                    TTobaki: TTobak.ttobak3_2,\n                });\n            }, 1000);\n        });\n\n        this.voice[1].addEventListener('ended', () => {\n            this.setState({\n                TTobaki: TTobak.ttobak1_1,\n                isPlaying: false,\n            });\n            setTimeout(() => {\n                this.recording_start_sound.play();\n                this.setState({\n                    isRecording: true,\n                })\n                this.setRecording = setInterval(() => {\n                    this.setState({\n                        RecordingCircle: !this.state.RecordingCircle,\n                    });\n                }, 500);\n                window.BRIDGE.recordAudio(this.props.user.student.gender, this.ques_char);\n            }, 800);\n        });\n\n        this.voice[2].addEventListener('ended', () => {\n            this.setState({\n                TTobaki: TTobak.ttobak1_1,\n            });\n            setTimeout(() => {\n                if (!!this.sample_ques) this.sample_ques.play();\n            }, 1000);\n        });\n\n        this.voice[3].addEventListener('ended', async () => {\n            const { data } = await D_tutorial.answer(this.props.user.student.s_id, idx_txt);\n            console.log(data);\n            this.setState({\n                gameState: false,\n            });\n            this.newRequest();\n            this.sample_ques = null;\n            this.voice = null;\n        });\n\n        setTimeout(() => {\n            if (!!this.voice[0]) this.voice[0].play();\n        }, 1000);\n    }\n\n    andriodListener = async () => {\n        this.setState({\n            TTobaki: TTobak.ttobak2_1,\n        });\n\n        try {\n            if (this.audioResult.status === 'Success') {\n                const { user } = this.props;\n                if (this.state.gameState === 'tutorial') {\n                    this.setState({\n                        TTobaki: TTobak.ttobak3_2,\n                    });\n\n                    if (this.audioResult.score < 85) {\n                        if (!!this.voice[2]) this.voice[2].play();\n                    } else {\n                        if (!!this.voice[3]) this.voice[3].play();\n                    }\n                    return;\n                }\n\n                const { data } = await D3_Api.answer(\n                    user.student.s_id,\n                    this.currentCure.ques_id,\n                    this.audioResult.score,\n                    this.audioResult.phone_score,\n                    this.audioResult.speed_score,\n                    this.audioResult.rhythm_score,\n                );\n                console.log(data);\n\n                if (data.code === 1) {\n                    if (data.is_stop || data.to_next_level === '모든 문제를 학습했습니다') {\n                        this.gameDone();\n                    } else if (data.to_next_level) {\n                        this.newRequest();\n                    } else {\n                        if (this.currentIndex < this.cure.length - 1) {\n                            this.currentIndex++;\n                        } else {\n                            this.gameDone();\n                            return;\n                        }\n                        this.currentCure = this.cure[this.currentIndex];\n                        this.currentAudio = null;\n                        this.currentAudio = new Audio(soundURL + this.currentCure.ques_path1);\n\n                        setTimeout(() => {\n                            this.setState({\n                                TTobaki: TTobak.ttobak1_1,\n                                currentIndex: this.currentIndex + 1,\n                            });\n                        }, 3000);\n\n                        setTimeout(() => {\n                            this.playSound();\n                        }, 5500);\n                    }\n                }\n                else console.log(data.message);\n\n            } else {\n                console.log(this.audioResult.message);\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    playSound = () => {\n        if (!!this.currentAudio) {\n            this.currentAudio.addEventListener('ended', () => {\n                this.setState({\n                    TTobaki: TTobak.ttobak1_1,\n                    isPlaying: false,\n                });\n\n                setTimeout(() => {\n                    this.recording_start_sound.play();\n                    this.setState({\n                        isRecording: true,\n                    });\n\n                    this.setRecording = setInterval(() => {\n                        this.setState({\n                            RecordingCircle: !this.state.RecordingCircle,\n                        });\n                    }, 500);\n\n                    window.BRIDGE.recordAudio(this.props.user.student.gender, this.currentCure.ques_char);\n                }, 800);\n            });\n\n            this.currentAudio.play();\n\n            this.setState({\n                TTobaki: TTobak.ttobak3_2,\n                isPlaying: true,\n            });\n\n        }\n    }\n\n    imagesPreloading = (picture) => {\n        for (let i in picture) {\n            for (let prop in picture[i]) {\n                let img = new Image();\n                img.src = picture[i][prop];\n                img.onload = () => {\n                    this.setState({\n                        percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                    });\n\n                    if (this.numOfLoadedImage === this.totalImages) {\n                        this.setState({\n                            isImageLoaded: true,\n                        })\n                        this.newRequest();\n                    }\n                };\n            }\n        }\n    }\n\n    gameDone = () => {\n        console.log('game doen!');\n        this.setState({\n            showNextPopup: true,\n        });\n    }\n\n    onPopupButtonHandle = () => {\n        this.props.history.replace('/diagnose/result');\n    }\n\n    onContinueButtonHandle = () => {\n        this.setState({\n            showPopup: false,\n        })\n    }\n\n    onPauseButtonHandle = () => {\n        this.setState({\n            showPopup: true,\n        })\n    }\n\n    onCompleteButtonHandle = () => {\n        if (this.state.isRecording) {\n            window.BRIDGE.requestStopRecording();\n        }\n    }\n\n    render() {\n        const { isImageLoaded, showPopup, showNextPopup, percent, TTobaki, RecordingCircle, isPlaying } = this.state;\n\n        if (isImageLoaded) {\n            return (<AttentionPresenter\n                Background={D3.d3_background}\n                TTobak={TTobaki}\n                RecordingCircle={RecordingCircle} isPlaying={isPlaying}\n                showPopup={showPopup}\n                showNextPopup={showNextPopup}\n                onPopupButtonHandle={this.onPopupButtonHandle}\n                onContinueButtonHandle={this.onContinueButtonHandle}\n                onPauseButtonHandle={this.onPauseButtonHandle}\n                onCompleteButtonHandle={this.onCompleteButtonHandle}\n                currentIndex={this.state.currentIndex}\n                totalNum={this.state.totalNum}\n            />);\n        }\n        else {\n            return <LoadingComp percent={percent} />\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(Attention));"]},"metadata":{},"sourceType":"module"}