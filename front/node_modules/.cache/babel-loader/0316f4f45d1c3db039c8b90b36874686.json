{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Root/AddStudent/AddStudentContainer.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { student_add } from 'Sessions/action.js';\nimport moment from 'moment';\nimport AddStudentPresenter from './AddStudentPresenter';\n\nclass AddStudent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showPopup: false,\n      text: ''\n    };\n\n    this.goBack = () => {\n      this.props.history.goBack();\n    };\n\n    this.handleSubmit = (e, {\n      name,\n      birth,\n      gender\n    }) => {\n      e.preventDefault();\n      const {\n        user\n      } = this.props;\n      const {\n        dispatch\n      } = this.props;\n      const icon = this.props.match.params.icon;\n\n      if (icon === undefined) {\n        this.setState({\n          text: '아이콘을 선택해주세요.',\n          showPopup: true\n        });\n        return false;\n      }\n\n      if (!name || !birth || !gender) {\n        this.setState({\n          text: '빠진 부분 없이 입력해 주세요.',\n          showPopup: true\n        });\n        return false;\n      }\n\n      if (birth.length !== 8 || isNaN(birth) || !moment(birth, 'YYYYMMDD', true).isValid()) {\n        this.setState({\n          text: '올바른 생일을 입력해 주세요.(예시: 20100813)',\n          showPopup: true\n        });\n        return false;\n      }\n\n      if (gender !== '남자' && gender !== '여자') {\n        this.setState({\n          text: '올바른 성별을 입력해 주세요.(예시; 여자)',\n          showPopup: true\n        });\n        return false;\n      }\n\n      gender = gender === '남자' ? 'm' : 'f';\n      birth = moment(birth).format('YYYY-MM-DD');\n      console.log(user);\n      dispatch(student_add(name, birth, gender, icon, user.user.u_id));\n      return true;\n    };\n\n    this.onButtonTouchEnd = () => {\n      this.setState({\n        showPopup: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    const {\n      user\n    } = this.props;\n    console.log(user);\n\n    if (!user.user.u_id) {\n      this.setState({\n        text: '잘못된 접근입니다.',\n        showPopup: true\n      });\n      this.props.history.push('/root/signin');\n    }\n  }\n\n  componentDidUpdate() {\n    const {\n      user\n    } = this.props;\n    console.log(user);\n\n    if (user.student.s_id && user.user.u_id) {\n      this.setState({\n        text: '사용자 추가를 성공했습니다. 검사 페이지로 이동합니다.',\n        showPopup: true\n      });\n      this.props.history.push('/diagnose/sweep');\n    }\n\n    if (user.response.data && user.response.data.code == 2) {\n      this.setState({\n        text: '존재하지 않는 회원입니다.',\n        showPopup: true\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AddStudentPresenter, {\n      handleSubmit: this.handleSubmit,\n      iconNum: this.props.match.params.icon,\n      goBack: this.goBack,\n      onButtonTouchEnd: this.onButtonTouchEnd,\n      showPopup: this.state.showPopup,\n      text: this.state.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    });\n  }\n\n}\n\nAddStudent.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(AddStudent));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Root/AddStudent/AddStudentContainer.js"],"names":["React","withRouter","PropTypes","connect","student_add","moment","AddStudentPresenter","AddStudent","Component","state","showPopup","text","goBack","props","history","handleSubmit","e","name","birth","gender","preventDefault","user","dispatch","icon","match","params","undefined","setState","length","isNaN","isValid","format","console","log","u_id","onButtonTouchEnd","componentDidMount","push","componentDidUpdate","student","s_id","response","data","code","render","propTypes","objectOf","any","isRequired","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { student_add } from 'Sessions/action.js';\nimport moment from 'moment';\n\nimport AddStudentPresenter from './AddStudentPresenter';\n\nclass AddStudent extends React.Component {\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    state = {\n        showPopup: false,\n        text: '',\n    }\n\n    goBack = () => {\n        this.props.history.goBack();\n    };\n\n    handleSubmit = (e, { name, birth, gender }) => {\n        e.preventDefault();\n        const { user } = this.props;\n        const { dispatch } = this.props;\n\n        const icon = this.props.match.params.icon;\n        if (icon === undefined) {\n            this.setState({\n                text: '아이콘을 선택해주세요.',\n                showPopup: true,\n            })\n            return false;\n        }\n\n        if (!name || !birth || !gender) {\n            this.setState({\n                text: '빠진 부분 없이 입력해 주세요.',\n                showPopup: true,\n            })\n            return false;\n        }\n\n        if (birth.length !== 8 || isNaN(birth) || !moment(birth, 'YYYYMMDD', true).isValid()) {\n            this.setState({\n                text: '올바른 생일을 입력해 주세요.(예시: 20100813)',\n                showPopup: true,\n            })\n            return false;\n        }\n\n        if (gender !== '남자' && gender !== '여자') {\n            this.setState({\n                text: '올바른 성별을 입력해 주세요.(예시; 여자)',\n                showPopup: true,\n            })\n            return false;\n        }\n\n        gender = (gender === '남자' ? 'm' : 'f');\n        birth = moment(birth).format('YYYY-MM-DD');\n\n        console.log(user);\n        dispatch(student_add(name, birth, gender, icon, user.user.u_id));\n\n        return true;\n    }\n\n    componentDidMount() {\n        const { user } = this.props;\n        console.log(user);\n        if (!user.user.u_id) {\n            this.setState({\n                text: '잘못된 접근입니다.',\n                showPopup: true,\n            })\n            this.props.history.push('/root/signin');\n        }\n    }\n\n    componentDidUpdate() {\n        const { user } = this.props;\n        console.log(user);\n        if (user.student.s_id && user.user.u_id) {\n            this.setState({\n                text: '사용자 추가를 성공했습니다. 검사 페이지로 이동합니다.',\n                showPopup: true,\n            })\n            this.props.history.push('/diagnose/sweep');\n        }\n\n        if (user.response.data && user.response.data.code == 2) {\n            this.setState({\n                text: '존재하지 않는 회원입니다.',\n                showPopup: true,\n            })\n        }\n    }\n\n    onButtonTouchEnd = () => {\n        this.setState({\n            showPopup: false,\n        });\n    }\n\n    render() {\n        return (<\n            AddStudentPresenter\n            handleSubmit={this.handleSubmit}\n            iconNum={this.props.match.params.icon}\n            goBack={this.goBack}\n            onButtonTouchEnd={this.onButtonTouchEnd}\n            showPopup={this.state.showPopup}\n            text={this.state.text}\n        />);\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(AddStudent));"]},"metadata":{},"sourceType":"module"}