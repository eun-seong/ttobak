{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T7_ConsoCommon/ConsoCommonContainer.js\";\nimport React from 'react';\nimport ConsoCommonPresenter from './ConsoCommonPresenter';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingComp from 'Components/LoadingComp';\nimport { T7, Characters } from 'images';\nimport { T_Api2, soundURL } from 'api';\nconst idx_text = 'consocommon';\n\nclass ConsoCommon extends React.Component {\n  constructor({\n    match,\n    location\n  }) {\n    super();\n\n    this.newRequest = async () => {\n      console.log('new request');\n      const {\n        user\n      } = this.props;\n      const s_id = user.student.s_id;\n\n      try {\n        const {\n          data\n        } = await T_Api2.ask(s_id, idx_text);\n        console.log(data);\n\n        if (data.code === 'specified' || data.code === 1) {\n          this.currentIndex = 0;\n          this.cure = data.cure;\n          this.totalImages += this.cure.length;\n          this.pictursPreloading(this.cure);\n          this.currentCure = this.cure[this.currentIndex];\n\n          for (let i in this.cure) {\n            this.cure[i].answer = Math.floor(Math.random() * 2);\n          }\n\n          this.setState({\n            gameState: true,\n            picBox: soundURL + this.currentCure.cure_path,\n            CardTextList: this.currentCure.answer === 0 ? [this.currentCure.cure_word, this.currentCure.cure_word2] : [this.currentCure.cure_word2, this.currentCure.cure_word],\n            totalNum: this.cure.length\n          });\n        } else console.log('data message: ' + data.message);\n      } catch (e) {\n        console.log('error: ' + e);\n      }\n    };\n\n    this.playSound = () => {\n      if (!!this.currentAudio) {\n        this.setState({\n          gameState: false\n        }); // this.currentAudio.play();\n      }\n    };\n\n    this.gameDone = () => {\n      console.log('game doen!');\n\n      if (this.learning_type !== 'daily') {\n        this.setState({\n          showDonePopup: true\n        });\n      } else {\n        this.setState({\n          showDailyPopup: true\n        });\n      }\n    };\n\n    this.onCardTouchHandle = async id => {\n      if (!this.state.gameState) return;\n      this.setState({\n        gameState: false\n      });\n\n      try {\n        const {\n          user\n        } = this.props;\n        const s_id = user.student.s_id;\n        const {\n          data\n        } = await T_Api2.answer(s_id, this.currentCure.cure_word, this.state.CardTextList[id], this.currentCure.cure_id, this.learning_type === 'review' ? 'T' : 'F', idx_text);\n        console.log(data);\n\n        if (data.code === 1) {\n          if (this.currentIndex < this.cure.length - 1) this.currentIndex++;else {\n            this.gameDone();\n            return;\n          }\n          this.currentCure = this.cure[this.currentIndex];\n          this.setState({\n            gameState: true,\n            picBox: soundURL + this.currentCure.cure_path,\n            CardTextList: this.currentCure.answer === 0 ? [this.currentCure.cure_word, this.currentCure.cure_word2] : [this.currentCure.cure_word2, this.currentCure.cure_word],\n            currentIndex: this.currentIndex + 1\n          });\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.onTreeTouchEndHandle = () => {\n      this.setState({\n        isDragging: false\n      });\n    };\n\n    this.pictursPreloading = picture => {\n      try {\n        for (let i in picture) {\n          let img = new Image();\n          img.src = soundURL + picture[i].cure_path;\n\n          img.onload = () => {\n            this.setState({\n              percent: ++this.numOfLoadedImage / this.totalImages * 100\n            });\n\n            if (this.numOfLoadedImage === this.totalImages) {\n              this.setState({\n                isImageLoaded: true\n              });\n              clearTimeout(timeoutPreloading); // setTimeout(() => this.playSound(), 1000);\n            }\n          };\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.imagesPreloading = picture => {\n      let timeoutPreloading = setTimeout(() => {\n        this.props.history.replace('/main/main');\n      }, 10000);\n\n      for (let i in picture) {\n        for (let prop in picture[i]) {\n          let img = new Image();\n          img.src = picture[i][prop];\n\n          img.onload = () => {\n            this.setState({\n              percent: ++this.numOfLoadedImage / this.totalImages * 100\n            });\n\n            if (this.numOfLoadedImage === this.totalImages) {\n              this.setState({\n                isImageLoaded: true\n              });\n              clearTimeout(timeoutPreloading); // setTimeout(() => this.playSound(), 1000);\n            }\n          };\n        }\n      }\n    };\n\n    this.onContinueButtonHandle = () => {\n      this.setState({\n        showPopup: false\n      });\n    };\n\n    this.onRestartButtonHandle = () => {\n      this.setState({\n        showDonePopup: false\n      });\n      this.newRequest();\n      setTimeout(() => this.playSound(), 2000);\n    };\n\n    this.onPauseButtonHandle = () => {\n      this.setState({\n        showPopup: true\n      });\n    };\n\n    this.learning_type = match.params.learning_type;\n    this.cure = null;\n    this.currentCure = null;\n    this.currentIndex = 0;\n    this.numOfLoadedImage = 0;\n    this.picture = {\n      T7,\n      Characters\n    };\n    this.totalImages = Object.keys(T7).length + Object.keys(Characters).length;\n    this.state = {\n      gameState: false,\n      picBox: null,\n      CardTextList: null,\n      isImageLoaded: false,\n      showPopup: false,\n      showDonePopup: false,\n      showDailyPopup: false,\n      percent: 0,\n      currentIndex: 1,\n      totalNum: 0\n    };\n\n    if (this.learning_type === 'daily') {\n      console.log(location.state.data.cure);\n      this.cure = location.state.data.cure;\n      this.currentCure = this.cure[this.currentIndex];\n      this.state = { ...this.state,\n        totalNum: this.cure.length\n      };\n    }\n  }\n\n  async componentDidMount() {\n    const {\n      user\n    } = this.props;\n\n    if (!user.user.u_id) {\n      this.props.history.push('/root/signin');\n      return;\n    }\n\n    if (!user.student.s_id) {\n      this.props.history.push('/root/selectstd');\n      return;\n    }\n\n    if (this.learning_type !== 'daily') this.newRequest();else {\n      this.setState({\n        picBox: soundURL + this.currentCure.cure_path,\n        CardTextList: [this.currentCure.cure_word, this.currentCure.cure_word2]\n      });\n    }\n    this.imagesPreloading(this.picture);\n  }\n\n  render() {\n    const {\n      CardTextList,\n      picBox,\n      isImageLoaded,\n      showPopup,\n      showDonePopup,\n      showDailyPopup,\n      percent,\n      gameState,\n      currentIndex,\n      totalNum\n    } = this.state;\n\n    if (isImageLoaded) {\n      return /*#__PURE__*/React.createElement(ConsoCommonPresenter, {\n        Background: T7.t7_background,\n        Card: [Characters.card1, Characters.card2],\n        CardTextList: CardTextList || ['ㄱ', 'ㄴ'],\n        picBox: picBox || T7.t7_excpic,\n        onCardTouchHandle: this.onCardTouchHandle,\n        onContinueButtonHandle: this.onContinueButtonHandle,\n        onRestartButtonHandle: this.onRestartButtonHandle,\n        onPauseButtonHandle: this.onPauseButtonHandle,\n        showPopup: showPopup,\n        showDailyPopup: showDailyPopup,\n        showDonePopup: showDonePopup,\n        gameState: gameState,\n        currentIndex: currentIndex,\n        totalNum: totalNum,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(LoadingComp, {\n        percent: percent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n}\n\nConsoCommon.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(ConsoCommon));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T7_ConsoCommon/ConsoCommonContainer.js"],"names":["React","ConsoCommonPresenter","withRouter","PropTypes","connect","LoadingComp","T7","Characters","T_Api2","soundURL","idx_text","ConsoCommon","Component","constructor","match","location","newRequest","console","log","user","props","s_id","student","data","ask","code","currentIndex","cure","totalImages","length","pictursPreloading","currentCure","i","answer","Math","floor","random","setState","gameState","picBox","cure_path","CardTextList","cure_word","cure_word2","totalNum","message","e","playSound","currentAudio","gameDone","learning_type","showDonePopup","showDailyPopup","onCardTouchHandle","id","state","cure_id","onTreeTouchEndHandle","isDragging","picture","img","Image","src","onload","percent","numOfLoadedImage","isImageLoaded","clearTimeout","timeoutPreloading","imagesPreloading","setTimeout","history","replace","prop","onContinueButtonHandle","showPopup","onRestartButtonHandle","onPauseButtonHandle","params","Object","keys","componentDidMount","u_id","push","render","t7_background","card1","card2","t7_excpic","propTypes","objectOf","any","isRequired","dispatch","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ConsoCommonPresenter from './ConsoCommonPresenter';\n\nimport { withRouter } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport LoadingComp from 'Components/LoadingComp';\nimport { T7, Characters } from 'images';\nimport { T_Api2, soundURL } from 'api';\n\nconst idx_text = 'consocommon';\n\nclass ConsoCommon extends React.Component {\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    constructor({ match, location }) {\n        super();\n        this.learning_type = match.params.learning_type;\n        this.cure = null;\n        this.currentCure = null;\n        this.currentIndex = 0;\n        this.numOfLoadedImage = 0;\n        this.picture = { T7, Characters };\n        this.totalImages = Object.keys(T7).length + Object.keys(Characters).length;\n\n        this.state = {\n            gameState: false,\n            picBox: null,\n            CardTextList: null,\n            isImageLoaded: false,\n            showPopup: false,\n            showDonePopup: false,\n            showDailyPopup: false,\n            percent: 0,\n            currentIndex: 1,\n            totalNum: 0,\n        };\n\n        if (this.learning_type === 'daily') {\n            console.log(location.state.data.cure);\n            this.cure = location.state.data.cure;\n            this.currentCure = this.cure[this.currentIndex];\n            this.state = {\n                ...this.state,\n                totalNum: this.cure.length,\n            }\n        }\n    }\n\n    async componentDidMount() {\n        const { user } = this.props;\n\n        if (!user.user.u_id) {\n            this.props.history.push('/root/signin');\n            return;\n        }\n\n        if (!user.student.s_id) {\n            this.props.history.push('/root/selectstd');\n            return;\n        }\n\n        if (this.learning_type !== 'daily') this.newRequest();\n        else {\n            this.setState({\n                picBox: soundURL + this.currentCure.cure_path,\n                CardTextList: [this.currentCure.cure_word, this.currentCure.cure_word2]\n            })\n        }\n        this.imagesPreloading(this.picture);\n    }\n\n    newRequest = async () => {\n        console.log('new request');\n        const { user } = this.props;\n        const s_id = user.student.s_id;\n\n        try {\n            const { data } = await T_Api2.ask(s_id, idx_text);\n            console.log(data);\n\n            if (data.code === 'specified' || data.code === 1) {\n                this.currentIndex = 0;\n                this.cure = data.cure;\n                this.totalImages += this.cure.length;\n                this.pictursPreloading(this.cure);\n                this.currentCure = this.cure[this.currentIndex];\n                for (let i in this.cure) {\n                    this.cure[i].answer = Math.floor(Math.random() * 2);\n                }\n\n                this.setState({\n                    gameState: true,\n                    picBox: soundURL + this.currentCure.cure_path,\n                    CardTextList: this.currentCure.answer === 0 ?\n                        [this.currentCure.cure_word, this.currentCure.cure_word2] :\n                        [this.currentCure.cure_word2, this.currentCure.cure_word],\n                    totalNum: this.cure.length,\n                })\n            }\n            else console.log('data message: ' + data.message);\n        } catch (e) {\n            console.log('error: ' + e);\n        }\n    }\n\n\n    playSound = () => {\n        if (!!this.currentAudio) {\n            this.setState({\n                gameState: false,\n            });\n            // this.currentAudio.play();\n        }\n    }\n\n    gameDone = () => {\n        console.log('game doen!');\n        if (this.learning_type !== 'daily') {\n            this.setState({\n                showDonePopup: true,\n            })\n        } else {\n            this.setState({\n                showDailyPopup: true,\n            })\n        }\n    }\n\n    onCardTouchHandle = async (id) => {\n        if (!this.state.gameState) return;\n        this.setState({\n            gameState: false,\n        })\n\n        try {\n            const { user } = this.props;\n            const s_id = user.student.s_id;\n\n            const { data } = await T_Api2.answer(\n                s_id,\n                this.currentCure.cure_word,\n                this.state.CardTextList[id],\n                this.currentCure.cure_id,\n                this.learning_type === 'review' ? 'T' : 'F',\n                idx_text\n            );\n            console.log(data);\n\n            if (data.code === 1) {\n                if (this.currentIndex < this.cure.length - 1) this.currentIndex++;\n                else {\n                    this.gameDone();\n                    return;\n                }\n                this.currentCure = this.cure[this.currentIndex];\n\n                this.setState({\n                    gameState: true,\n                    picBox: soundURL + this.currentCure.cure_path,\n                    CardTextList: this.currentCure.answer === 0 ?\n                        [this.currentCure.cure_word, this.currentCure.cure_word2] :\n                        [this.currentCure.cure_word2, this.currentCure.cure_word],\n                    currentIndex: this.currentIndex + 1\n                })\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    onTreeTouchEndHandle = () => {\n        this.setState({\n            isDragging: false,\n        })\n    }\n\n    pictursPreloading = (picture) => {\n        try {\n            for (let i in picture) {\n                let img = new Image();\n                img.src = soundURL + picture[i].cure_path;\n                img.onload = () => {\n                    this.setState({\n                        percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                    })\n                    if (this.numOfLoadedImage === this.totalImages) {\n                        this.setState({\n                            isImageLoaded: true,\n                        })\n                        clearTimeout(timeoutPreloading);\n                        // setTimeout(() => this.playSound(), 1000);\n                    }\n                };\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    imagesPreloading = (picture) => {\n        let timeoutPreloading = setTimeout(() => {\n            this.props.history.replace('/main/main');\n        }, 10000);\n\n        for (let i in picture) {\n            for (let prop in picture[i]) {\n                let img = new Image();\n                img.src = picture[i][prop];\n                img.onload = () => {\n                    this.setState({\n                        percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                    })\n                    if (this.numOfLoadedImage === this.totalImages) {\n                        this.setState({\n                            isImageLoaded: true,\n                        })\n                        clearTimeout(timeoutPreloading);\n                        // setTimeout(() => this.playSound(), 1000);\n                    }\n                };\n            }\n        }\n    }\n\n    onContinueButtonHandle = () => {\n        this.setState({\n            showPopup: false,\n        })\n    }\n\n    onRestartButtonHandle = () => {\n        this.setState({\n            showDonePopup: false,\n        })\n        this.newRequest();\n        setTimeout(() => this.playSound(), 2000);\n    }\n\n    onPauseButtonHandle = () => {\n        this.setState({\n            showPopup: true,\n        })\n    }\n\n    render() {\n        const { CardTextList, picBox, isImageLoaded, showPopup, showDonePopup, showDailyPopup, percent, gameState,\n            currentIndex, totalNum } = this.state;\n\n        if (isImageLoaded) {\n            return (<ConsoCommonPresenter\n                Background={T7.t7_background}\n                Card={[Characters.card1, Characters.card2]}\n                CardTextList={CardTextList || ['ㄱ', 'ㄴ']}\n                picBox={picBox || T7.t7_excpic}\n                onCardTouchHandle={this.onCardTouchHandle}\n                onContinueButtonHandle={this.onContinueButtonHandle}\n                onRestartButtonHandle={this.onRestartButtonHandle}\n                onPauseButtonHandle={this.onPauseButtonHandle}\n                showPopup={showPopup}\n                showDailyPopup={showDailyPopup}\n                showDonePopup={showDonePopup}\n                gameState={gameState}\n                currentIndex={currentIndex}\n                totalNum={totalNum}\n            />);\n        }\n        else {\n            return <LoadingComp percent={percent} />\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(ConsoCommon));"]},"metadata":{},"sourceType":"module"}