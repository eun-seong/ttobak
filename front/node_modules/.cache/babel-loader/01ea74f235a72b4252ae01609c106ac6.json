{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T5_Sound/SoundContainer.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport SoundPresenter from './SoundPresenter';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { T5, TTobak, Characters } from 'images';\nimport { T_Api2, soundURL } from 'api';\nimport LoadingComp from 'Components/LoadingComp';\n\nclass Sound extends React.Component {\n  constructor({\n    match,\n    location\n  }) {\n    super();\n\n    this.newRequest = async () => {\n      console.log('new request');\n\n      try {\n        const {\n          user\n        } = this.props;\n        const s_id = user.student.s_id;\n        const {\n          data\n        } = await T_Api2.ask(s_id, this.type);\n        console.log(data);\n\n        if (data.code === 'specified' || data.code === 1) {\n          this.currentIndex = 0;\n          this.cure = data.cure;\n          this.currentCure = data.cure[this.currentIndex];\n          this.setAudio();\n          this.setState({\n            CardTextList: [this.currentCure.cure_word, this.currentCure.cure_word2],\n            totalNum: this.cure.length\n          });\n        } else console.log('data message: ' + data.message);\n      } catch (e) {\n        console.log('error: ' + e);\n      }\n    };\n\n    this.setAudio = () => {\n      if (this.type === 'consosound') {\n        this.currentCure.answer = Math.floor(Math.random() * 2) + 1;\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n\n        if (this.currentCure.answer === 2) {\n          var tmp = this.currentCure.cure_word;\n          this.currentCure.cure_word = this.currentCure.cure_word2;\n          this.currentCure.cure_word2 = tmp;\n        }\n      } else {\n        this.currentAudio = this.currentCure.answer === 1 ? new Audio(soundURL + this.currentCure.cure_path) : new Audio(soundURL + this.currentCure.cure_path2);\n      }\n\n      this.currentAudio.addEventListener('ended', () => {\n        this.setState({\n          gameState: true,\n          TTobaki: TTobak.ttobak1_1\n        });\n      });\n    };\n\n    this.playSound = () => {\n      if (!!this.currentAudio) {\n        this.setState({\n          gameState: false,\n          TTobaki: TTobak.ttobak1_2\n        });\n        this.currentAudio.play();\n      }\n    };\n\n    this.onTTobakiTouchHandle = () => {\n      const {\n        gameState\n      } = this.state;\n      if (gameState) this.playSound();\n    };\n\n    this.onCardTouchHandle = async index => {\n      const {\n        gameState\n      } = this.state;\n      if (!gameState) return;\n      this.setState({\n        gameState: false,\n        TTobaki: TTobak.ttobak2_2\n      });\n\n      try {\n        const {\n          user\n        } = this.props;\n        const s_id = user.student.s_id;\n        const {\n          CardTextList\n        } = this.state;\n        const {\n          data\n        } = await T_Api2.answer(s_id, this.currentCure.answer === 1 ? this.currentCure.cure_word : this.currentCure.cure_word2, CardTextList[index], this.currentCure.cure_id, this.learning_type === 'review' ? 'T' : 'F', this.type);\n        console.log(data);\n\n        if (data.code === 1) {\n          if (this.currentIndex < this.cure.length - 1) this.currentIndex++;else {\n            setTimeout(() => {\n              this.gameDone();\n            }, 1000);\n            return;\n          }\n          this.currentCure = this.cure[this.currentIndex];\n          this.setAudio();\n          setTimeout(() => {\n            this.setState({\n              CardTextList: [this.currentCure.cure_word, this.currentCure.cure_word2],\n              TTobaki: TTobak.ttobak1_1,\n              currentIndex: this.currentIndex + 1\n            });\n          }, 2000);\n          setTimeout(() => {\n            this.playSound();\n          }, 3000);\n        } else if (data.code === 2) {\n          this.setState({\n            showPopup: true\n          });\n        } else {\n          this.props.history.replace('/main/main');\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.gameDone = () => {\n      console.log('game doen!');\n\n      if (this.learning_type !== 'daily') {\n        this.setState({\n          showDonePopup: true\n        });\n      } else {\n        this.setState({\n          showDailyPopup: true\n        });\n      }\n    };\n\n    this.imagesPreloading = picture => {\n      let timeoutPreloading = setTimeout(() => {\n        this.props.history.replace('/main/main');\n      }, 10000);\n\n      for (let i in picture) {\n        for (let prop in picture[i]) {\n          let img = new Image();\n          img.src = picture[i][prop];\n\n          img.onload = () => {\n            this.setState({\n              percent: ++this.numOfLoadedImage / this.totalImages * 100\n            });\n\n            if (this.numOfLoadedImage === this.totalImages) {\n              this.setState({\n                isImageLoaded: true,\n                TTobaki: TTobak.ttobak1_1\n              });\n              setTimeout(() => this.playSound(), 1000);\n              clearTimeout(timeoutPreloading);\n            }\n          };\n        }\n      }\n    };\n\n    this.onContinueButtonHandle = () => {\n      this.setState({\n        showPopup: false\n      });\n    };\n\n    this.onRestartButtonHandle = () => {\n      this.setState({\n        showDonePopup: false\n      });\n      this.newRequest();\n      setTimeout(() => this.playSound(), 2000);\n    };\n\n    this.onPauseButtonHandle = () => {\n      this.setState({\n        showPopup: true\n      });\n    };\n\n    this.learning_type = match.params.learning_type;\n    this.type = match.params.type + 'sound';\n    this.cure = null;\n    this.currentCure = null;\n    this.currentIndex = 0;\n    this.currentAudio = null;\n    this.numOfLoadedImage = 0;\n    this.picture = {\n      T5,\n      TTobak,\n      Characters\n    };\n    this.totalImages = Object.keys(T5).length + Object.keys(TTobak).length + Object.keys(Characters).length;\n    this.state = {\n      TTobaki: TTobak.ttobak1_1,\n      // 또박이 이미지 상태\n      gameState: false,\n      CardTextList: null,\n      isImageLoaded: false,\n      showPopup: false,\n      showDonePopup: false,\n      showDailyPopup: false,\n      percent: 0,\n      currentIndex: 1,\n      totalNum: 0\n    };\n\n    if (this.learning_type === 'daily') {\n      console.log(location.state.data.cure);\n      this.cure = location.state.data.cure;\n      this.currentCure = this.cure[this.currentIndex];\n      this.setAudio();\n      this.state = { ...this.state,\n        totalNum: this.cure.length\n      };\n    }\n  }\n\n  async componentDidMount() {\n    const {\n      user\n    } = this.props;\n\n    if (!user.user.u_id || !user.student.s_id) {\n      this.props.history.push('/root/signin');\n      return;\n    }\n\n    if (this.learning_type !== 'daily') this.newRequest();else {\n      this.setState({\n        CardTextList: [this.currentCure.cure_word, this.currentCure.cure_word2]\n      });\n    }\n    this.imagesPreloading(this.picture);\n  }\n\n  componentWillUnmount() {\n    if (!!this.currentAudio) {\n      this.currentAudio.pause();\n      this.currentAudio = null;\n    }\n  }\n\n  render() {\n    const {\n      TTobaki,\n      CardTextList,\n      isImageLoaded,\n      showPopup,\n      showDonePopup,\n      showDailyPopup,\n      percent,\n      gameState,\n      currentIndex,\n      totalNum\n    } = this.state;\n\n    if (isImageLoaded) {\n      return /*#__PURE__*/React.createElement(SoundPresenter, {\n        Background: T5.t5_background,\n        TTobak: TTobaki,\n        TTobakiTouch: this.onTTobakiTouchHandle,\n        Card: [Characters.card1, Characters.card2],\n        CardTextList: CardTextList || ['아', '에'],\n        onCardTouchHandle: this.onCardTouchHandle,\n        onContinueButtonHandle: this.onContinueButtonHandle,\n        onRestartButtonHandle: this.onRestartButtonHandle,\n        onPauseButtonHandle: this.onPauseButtonHandle,\n        showPopup: showPopup,\n        showDailyPopup: showDailyPopup,\n        showDonePopup: showDonePopup,\n        gameState: gameState,\n        currentIndex: currentIndex,\n        totalNum: totalNum,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(LoadingComp, {\n        percent: percent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n}\n\nSound.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(Sound));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T5_Sound/SoundContainer.js"],"names":["React","withRouter","SoundPresenter","PropTypes","connect","T5","TTobak","Characters","T_Api2","soundURL","LoadingComp","Sound","Component","constructor","match","location","newRequest","console","log","user","props","s_id","student","data","ask","type","code","currentIndex","cure","currentCure","setAudio","setState","CardTextList","cure_word","cure_word2","totalNum","length","message","e","answer","Math","floor","random","currentAudio","Audio","cure_path","tmp","cure_path2","addEventListener","gameState","TTobaki","ttobak1_1","playSound","ttobak1_2","play","onTTobakiTouchHandle","state","onCardTouchHandle","index","ttobak2_2","cure_id","learning_type","setTimeout","gameDone","showPopup","history","replace","showDonePopup","showDailyPopup","imagesPreloading","picture","timeoutPreloading","i","prop","img","Image","src","onload","percent","numOfLoadedImage","totalImages","isImageLoaded","clearTimeout","onContinueButtonHandle","onRestartButtonHandle","onPauseButtonHandle","params","Object","keys","componentDidMount","u_id","push","componentWillUnmount","pause","render","t5_background","card1","card2","propTypes","objectOf","any","isRequired","dispatch","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport SoundPresenter from './SoundPresenter';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { T5, TTobak, Characters } from 'images';\nimport { T_Api2, soundURL } from 'api';\nimport LoadingComp from 'Components/LoadingComp';\n\nclass Sound extends React.Component {\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    constructor({ match, location }) {\n        super();\n        this.learning_type = match.params.learning_type;\n        this.type = match.params.type + 'sound';\n        this.cure = null;\n        this.currentCure = null;\n        this.currentIndex = 0;\n        this.currentAudio = null;\n        this.numOfLoadedImage = 0;\n        this.picture = { T5, TTobak, Characters };\n        this.totalImages = Object.keys(T5).length + Object.keys(TTobak).length + Object.keys(Characters).length;\n\n        this.state = {\n            TTobaki: TTobak.ttobak1_1,                  // 또박이 이미지 상태\n            gameState: false,\n            CardTextList: null,\n            isImageLoaded: false,\n            showPopup: false,\n            showDonePopup: false,\n            showDailyPopup: false,\n            percent: 0,\n            currentIndex: 1,\n            totalNum: 0,\n        }\n\n        if (this.learning_type === 'daily') {\n            console.log(location.state.data.cure);\n            this.cure = location.state.data.cure;\n            this.currentCure = this.cure[this.currentIndex];\n            this.setAudio();\n            this.state = {\n                ...this.state,\n                totalNum: this.cure.length,\n            }\n        }\n    }\n\n    async componentDidMount() {\n        const { user } = this.props;\n\n        if (!user.user.u_id || !user.student.s_id) {\n            this.props.history.push('/root/signin');\n            return;\n        }\n\n        if (this.learning_type !== 'daily') this.newRequest();\n        else {\n            this.setState({\n                CardTextList: [this.currentCure.cure_word, this.currentCure.cure_word2],\n            })\n        }\n        this.imagesPreloading(this.picture);\n    }\n\n    componentWillUnmount() {\n        if (!!this.currentAudio) {\n            this.currentAudio.pause();\n            this.currentAudio = null;\n        }\n    }\n\n    newRequest = async () => {\n        console.log('new request');\n\n        try {\n            const { user } = this.props;\n            const s_id = user.student.s_id;\n            const { data } = await T_Api2.ask(s_id, this.type);\n            console.log(data);\n\n            if (data.code === 'specified' || data.code === 1) {\n                this.currentIndex = 0;\n                this.cure = data.cure;\n                this.currentCure = data.cure[this.currentIndex];\n                this.setAudio();\n\n                this.setState({\n                    CardTextList: [this.currentCure.cure_word, this.currentCure.cure_word2],\n                    totalNum: this.cure.length,\n                })\n            }\n            else console.log('data message: ' + data.message);\n        } catch (e) {\n            console.log('error: ' + e);\n        }\n    }\n\n    setAudio = () => {\n        if (this.type === 'consosound') {\n            this.currentCure.answer = Math.floor(Math.random() * 2) + 1;\n            this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n            if (this.currentCure.answer === 2) {\n                var tmp = this.currentCure.cure_word;\n                this.currentCure.cure_word = this.currentCure.cure_word2;\n                this.currentCure.cure_word2 = tmp;\n            }\n        } else {\n            this.currentAudio = this.currentCure.answer === 1\n                ? new Audio(soundURL + this.currentCure.cure_path) :\n                new Audio(soundURL + this.currentCure.cure_path2);\n        }\n\n        this.currentAudio.addEventListener('ended', () => {\n            this.setState({\n                gameState: true,\n                TTobaki: TTobak.ttobak1_1\n            })\n        })\n    }\n\n    playSound = () => {\n        if (!!this.currentAudio) {\n            this.setState({\n                gameState: false,\n                TTobaki: TTobak.ttobak1_2\n            });\n            this.currentAudio.play();\n        }\n    }\n\n    onTTobakiTouchHandle = () => {\n        const { gameState } = this.state;\n        if (gameState) this.playSound();\n    }\n\n    onCardTouchHandle = async (index) => {\n        const { gameState } = this.state;\n        if (!gameState) return;\n\n        this.setState({\n            gameState: false,\n            TTobaki: TTobak.ttobak2_2\n        });\n\n        try {\n            const { user } = this.props;\n            const s_id = user.student.s_id;\n            const { CardTextList } = this.state;\n\n            const { data } = await T_Api2.answer(\n                s_id,\n                this.currentCure.answer === 1 ? this.currentCure.cure_word : this.currentCure.cure_word2,\n                CardTextList[index],\n                this.currentCure.cure_id,\n                this.learning_type === 'review' ? 'T' : 'F',\n                this.type\n            );\n            console.log(data);\n\n            if (data.code === 1) {\n                if (this.currentIndex < this.cure.length - 1) this.currentIndex++;\n                else {\n                    setTimeout(() => {\n                        this.gameDone();\n                    }, 1000);\n                    return;\n                }\n                this.currentCure = this.cure[this.currentIndex];\n                this.setAudio();\n\n                setTimeout(() => {\n                    this.setState({\n                        CardTextList: [this.currentCure.cure_word, this.currentCure.cure_word2],\n                        TTobaki: TTobak.ttobak1_1,\n                        currentIndex: this.currentIndex + 1\n                    });\n                }, 2000);\n\n                setTimeout(() => {\n                    this.playSound();\n                }, 3000);\n            } else if (data.code === 2) {\n                this.setState({\n                    showPopup: true,\n                })\n            } else {\n                this.props.history.replace('/main/main');\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    gameDone = () => {\n        console.log('game doen!');\n        if (this.learning_type !== 'daily') {\n            this.setState({\n                showDonePopup: true,\n            })\n        } else {\n            this.setState({\n                showDailyPopup: true,\n            })\n        }\n    }\n\n    imagesPreloading = (picture) => {\n        let timeoutPreloading = setTimeout(() => {\n            this.props.history.replace('/main/main');\n        }, 10000);\n\n        for (let i in picture) {\n            for (let prop in picture[i]) {\n                let img = new Image();\n                img.src = picture[i][prop];\n                img.onload = () => {\n                    this.setState({\n                        percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                    });\n\n                    if (this.numOfLoadedImage === this.totalImages) {\n                        this.setState({\n                            isImageLoaded: true,\n                            TTobaki: TTobak.ttobak1_1,\n                        })\n                        setTimeout(() => this.playSound(), 1000);\n                        clearTimeout(timeoutPreloading);\n                    }\n                };\n            }\n        }\n    }\n\n    onContinueButtonHandle = () => {\n        this.setState({\n            showPopup: false,\n        })\n    }\n\n    onRestartButtonHandle = () => {\n        this.setState({\n            showDonePopup: false,\n        })\n        this.newRequest();\n        setTimeout(() => this.playSound(), 2000);\n    }\n\n    onPauseButtonHandle = () => {\n        this.setState({\n            showPopup: true,\n        })\n    }\n\n    render() {\n        const { TTobaki, CardTextList, isImageLoaded, showPopup, showDonePopup, showDailyPopup, percent, gameState,\n            currentIndex, totalNum } = this.state;\n        if (isImageLoaded) {\n            return (<SoundPresenter\n                Background={T5.t5_background}\n                TTobak={TTobaki}\n                TTobakiTouch={this.onTTobakiTouchHandle}\n                Card={[Characters.card1, Characters.card2]}\n                CardTextList={CardTextList || ['아', '에']}\n                onCardTouchHandle={this.onCardTouchHandle}\n                onContinueButtonHandle={this.onContinueButtonHandle}\n                onRestartButtonHandle={this.onRestartButtonHandle}\n                onPauseButtonHandle={this.onPauseButtonHandle}\n                showPopup={showPopup}\n                showDailyPopup={showDailyPopup}\n                showDonePopup={showDonePopup}\n                gameState={gameState}\n                currentIndex={currentIndex}\n                totalNum={totalNum}\n            />);\n        }\n        else {\n            return <LoadingComp percent={percent} />\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(Sound));"]},"metadata":{},"sourceType":"module"}