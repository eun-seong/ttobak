{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/ttobak/front/src/Routes/Root/SelectStudent/SelectStudentContainer.js\";\nimport React from 'react';\nimport SelectStudentPresenter from './SelectStudentPresenter';\nimport Alert from 'Components/Alert';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { user_get, student_get, response_clear } from 'Sessions/action.js';\n\nclass SelectStudent extends React.Component {\n  /* \n  모든 로직 추가 \n  api 가져오기\n  error 처리 등 모든 것\n   */\n  constructor() {\n    super();\n\n    this.goBack = () => {\n      this.props.history.goBack();\n    };\n\n    this.handleSubmit = (e, s_id) => {\n      e.preventDefault();\n      const {\n        user\n      } = this.props;\n      const {\n        dispatch\n      } = this.props;\n      dispatch(student_get(s_id, user.user.u_id));\n      this.isSelectStudentCalled = true;\n    };\n\n    this.enableAlert = false;\n    this.isSelectStudentCalled = false;\n  }\n\n  makeAlert(text, isConfirm, onSubmit, onCancel) {\n    this.enableAlert = true;\n    this.alertText = text;\n    this.isConfirm = isConfirm;\n    this.onSubmit = onSubmit;\n    this.onCancel = onCancel;\n    this.forceUpdate();\n  }\n\n  componentDidMount() {\n    const {\n      user\n    } = this.props;\n    const {\n      dispatch\n    } = this.props;\n\n    if (!user.user.u_id) {\n      this.makeAlert('잘못된 접근입니다.', false, () => {\n        this.props.history.push('/root/signin');\n      });\n      return;\n    }\n\n    dispatch(user_get(user.user.u_id));\n  }\n\n  componentDidUpdate() {\n    const {\n      user\n    } = this.props;\n    const {\n      dispatch\n    } = this.props;\n\n    if (this.isSelectStudentCalled && user.student.s_id && user.response.data && user.response.data.code === 1) {\n      dispatch(response_clear());\n      this.props.history.push('/');\n      this.isSelectStudentCalled = false;\n      return;\n    }\n\n    if (this.isSelectStudentCalled && user.response.data && user.response.data.code !== 1) {\n      dispatch(response_clear());\n      this.makeAlert('존재하지 않는 회원입니다.', false, () => {\n        this.props.history.push('/root/signin');\n      });\n      this.isSelectStudentCalled = false;\n      return;\n    }\n  }\n\n  render() {\n    /*\n    presenter로 가는 모든 스테이트 값 렌더링\n    예시) const { nowPlaying, upcoming, popular, error, loading } = this.state;\n    */\n    const {\n      user\n    } = this.props;\n    console.log(user);\n    const alertComp = this.enableAlert ? /*#__PURE__*/React.createElement(Alert, {\n      text: this.alertText,\n      isConfirm: this.isConfirm,\n      onSubmit: this.onSubmit,\n      onCancel: this.onCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 47\n      }\n    }) : '';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, alertComp, /*#__PURE__*/React.createElement(SelectStudentPresenter, {\n      students: user.user.students || [],\n      handler: this.handleSubmit,\n      goBack: this.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nSelectStudent.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(SelectStudent));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/ttobak/front/src/Routes/Root/SelectStudent/SelectStudentContainer.js"],"names":["React","SelectStudentPresenter","Alert","withRouter","PropTypes","connect","user_get","student_get","response_clear","SelectStudent","Component","constructor","goBack","props","history","handleSubmit","e","s_id","preventDefault","user","dispatch","u_id","isSelectStudentCalled","enableAlert","makeAlert","text","isConfirm","onSubmit","onCancel","alertText","forceUpdate","componentDidMount","push","componentDidUpdate","student","response","data","code","render","console","log","alertComp","students","propTypes","objectOf","any","isRequired","func","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SelectStudentPresenter from './SelectStudentPresenter';\nimport Alert from 'Components/Alert';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { user_get, student_get, response_clear } from 'Sessions/action.js';\n\nclass SelectStudent extends React.Component {\n    /* \n    모든 로직 추가 \n    api 가져오기\n    error 처리 등 모든 것\n     */\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    constructor() {\n        super();\n\n        this.enableAlert = false;\n        this.isSelectStudentCalled = false;\n    }\n\n    goBack = () => {\n        this.props.history.goBack();\n    };\n\n    handleSubmit = (e, s_id) => {\n        e.preventDefault();\n\n        const { user } = this.props;\n        const { dispatch } = this.props;\n\n        dispatch(student_get(s_id, user.user.u_id));\n        this.isSelectStudentCalled = true;\n    }\n\n    makeAlert(text, isConfirm, onSubmit, onCancel) {\n        this.enableAlert = true;\n        this.alertText = text;\n        this.isConfirm = isConfirm;\n        this.onSubmit = onSubmit;\n        this.onCancel = onCancel;\n\n        this.forceUpdate();\n    }\n\n    componentDidMount() {\n        const { user } = this.props;\n        const { dispatch } = this.props;\n\n        if (!user.user.u_id) {\n            this.makeAlert('잘못된 접근입니다.', false, (() => {\n                this.props.history.push('/root/signin');\n            }));\n            return;\n        }\n\n        dispatch(user_get(user.user.u_id));\n    }\n\n    componentDidUpdate() {\n        const { user } = this.props;\n        const { dispatch } = this.props;\n\n        if (this.isSelectStudentCalled && user.student.s_id && user.response.data && user.response.data.code === 1) {\n            dispatch(response_clear());\n            this.props.history.push('/');\n            this.isSelectStudentCalled = false;\n            return;\n        }\n        if (this.isSelectStudentCalled && user.response.data && user.response.data.code !== 1) {\n            dispatch(response_clear());\n            this.makeAlert('존재하지 않는 회원입니다.', false, (() => {\n                this.props.history.push('/root/signin');\n            }));\n            this.isSelectStudentCalled = false;\n            return;\n        }\n    }\n\n    render() {\n        /*\n        presenter로 가는 모든 스테이트 값 렌더링\n        예시) const { nowPlaying, upcoming, popular, error, loading } = this.state;\n        */\n        const { user } = this.props;\n        console.log(user);\n        const alertComp = this.enableAlert ? (<Alert \n            text={this.alertText}\n            isConfirm={this.isConfirm}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n        />) : '';\n\n        return (\n            <div>\n                {alertComp}\n                <SelectStudentPresenter\n                    students={user.user.students || []}\n                    handler={this.handleSubmit}\n                    goBack={this.goBack}\n                />\n            </div>\n            );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(SelectStudent));"]},"metadata":{},"sourceType":"module"}