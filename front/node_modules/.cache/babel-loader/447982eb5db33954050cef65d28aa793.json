{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/ttobak/front/src/Routes/Therapy/T7_ConsoCommon/ConsoCommonContainer.js\";\nimport React from 'react';\nimport ConsoCommonPresenter from './ConsoCommonPresenter';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingComp from 'Components/LoadingComp';\nimport { T7, Characters } from 'images';\nimport { T_Api2, soundURL, T_tutorial } from 'api';\nconst idx_txt = 'consocommon';\nconst initState = {\n  gameState: false,\n  picBox: null,\n  CardTextList: null,\n  isImageLoaded: false,\n  showPopup: false,\n  showDonePopup: false,\n  showDailyPopup: false,\n  percent: 0,\n  currentIndex: 1,\n  totalNum: 0\n};\n\nclass ConsoCommon extends React.Component {\n  constructor({\n    match\n  }) {\n    super();\n\n    this.newRequest = async () => {\n      console.log('new request');\n      const {\n        user\n      } = this.props;\n      const s_id = user.student.s_id;\n      const {\n        data\n      } = await T_Api2.ask(s_id, idx_txt);\n      console.log(data);\n\n      if (data.code === 'tutorial') {\n        this.tutorial(data);\n        return;\n      }\n\n      if (data.code === 'specified' || data.code === 1) {\n        this.currentIndex = 0;\n        this.cure = data.cure;\n        this.totalImages += this.cure.length;\n        this.pictursPreloading(this.cure);\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentCure.is_first = 'T';\n\n        for (let i in this.cure) {\n          this.cure[i].answer = Math.floor(Math.random() * 2);\n        }\n\n        this.setState({\n          gameState: true,\n          picBox: soundURL + this.currentCure.cure_path,\n          CardTextList: this.currentCure.answer === 0 ? [this.currentCure.cure_word, this.currentCure.cure_word2] : [this.currentCure.cure_word2, this.currentCure.cure_word],\n          totalNum: this.cure.length,\n          currentIndex: this.currentIndex + 1\n        });\n      } else console.log('data message: ' + data.message);\n    };\n\n    this.daily = () => {\n      if (this.props.location.state.data.code === 'tutorial') {\n        this.tutorial(this.props.location.state.data);\n        return;\n      }\n\n      console.log(this.props.location.state.data.cure);\n      this.cure = this.props.location.state.data.cure;\n      this.currentCure = this.cure[this.currentIndex];\n      this.currentCure.is_first = 'T';\n      this.setState({\n        totalNum: this.cure.length,\n        currentIndex: this.currentIndex + 1,\n        picBox: soundURL + this.currentCure.cure_path,\n        CardTextList: [this.currentCure.cure_word, this.currentCure.cure_word2]\n      });\n    };\n\n    this.tutorial = data => {\n      this.voice = [new Audio(soundURL + data.tut_voice[0].voc_path), new Audio(soundURL + data.tut_voice[1].voc_path)];\n      this.currentCure = data.sample_ques;\n      this.setState({\n        picBox: soundURL + this.currentCure.cure_path,\n        CardTextList: [this.currentCure.cure_word, this.currentCure.cure_word2]\n      });\n      this.voice[0].addEventListener('ended', () => {\n        this.setState({\n          gameState: 'tutorial'\n        });\n      });\n      this.voice[1].addEventListener('ended', async () => {\n        const {\n          data\n        } = await T_tutorial.answer(this.props.user.student.s_id, idx_txt, this.currentCure.cure_id);\n        console.log(data);\n        this.setState({\n          gameState: false\n        });\n        if (this.learning_type === 'daily') this.daily();else this.newRequest();\n        this.voice = null;\n      });\n      setTimeout(() => {\n        this.voice[0].play();\n      }, 2000);\n    };\n\n    this.playSound = () => {\n      if (!!this.currentAudio) {\n        this.setState({\n          gameState: false\n        });\n      }\n    };\n\n    this.gameDone = () => {\n      console.log('game doen!');\n\n      if (this.learning_type !== 'daily') {\n        this.setState({\n          showDonePopup: true\n        });\n      } else {\n        this.setState({\n          showDailyPopup: true\n        });\n      }\n    };\n\n    this.onCardTouchHandle = async id => {\n      const {\n        gameState\n      } = this.state;\n\n      if (gameState === 'tutorial') {\n        if (id === 0) {\n          this.setState({\n            gameState: false\n          });\n          setTimeout(() => {\n            this.voice[1].play();\n          }, 1000);\n        }\n\n        return;\n      }\n\n      if (gameState === false) return;\n      this.setState({\n        gameState: false\n      });\n      const {\n        user\n      } = this.props;\n      const s_id = user.student.s_id;\n      const {\n        data\n      } = await T_Api2.answer(s_id, this.currentCure.cure_word, this.state.CardTextList[id], this.currentCure.cure_id, this.learning_type === 'review' ? 'T' : 'F', idx_txt, this.learning_type === 'daily' ? 'T' : 'F', this.currentCure.is_first);\n      console.log(data);\n\n      if (data.code === 1) {\n        if (data.correct_voice.voc_desc === 'retry') {\n          this.currentCure.is_first = 'F';\n          this.retry_script = new Audio(soundURL + data.correct_voice.voc_path);\n          this.retry_script.addEventListener('ended', () => {\n            this.setState({\n              gameState: true\n            });\n          });\n          setTimeout(() => {\n            this.retry_script.play();\n            this.setState({\n              gameState: false\n            });\n          }, 1000);\n          return;\n        } else {\n          this.good_script = new Audio(soundURL + data.correct_voice.voc_path);\n          this.good_script.addEventListener('ended', () => this.nextStep());\n          setTimeout(() => {\n            this.good_script.play();\n            this.setState({\n              gameState: false\n            });\n          }, 1000);\n        }\n      }\n    };\n\n    this.nextStep = () => {\n      if (this.currentIndex < this.cure.length - 1) this.currentIndex++;else {\n        this.gameDone();\n        return;\n      }\n      this.currentCure = this.cure[this.currentIndex];\n      this.currentCure.is_first = 'T';\n      this.setState({\n        gameState: true,\n        picBox: soundURL + this.currentCure.cure_path,\n        CardTextList: this.currentCure.answer === 0 ? [this.currentCure.cure_word, this.currentCure.cure_word2] : [this.currentCure.cure_word2, this.currentCure.cure_word],\n        currentIndex: this.currentIndex + 1\n      });\n    };\n\n    this.onTreeTouchEndHandle = () => {\n      this.setState({\n        isDragging: false\n      });\n    };\n\n    this.pictursPreloading = picture => {\n      let timeoutPreloading = setTimeout(() => {\n        this.props.history.push('/main/main');\n      }, 10000);\n\n      try {\n        for (let i in picture) {\n          let img = new Image();\n          img.src = soundURL + picture[i].cure_path;\n\n          img.onload = () => {\n            this.setState({\n              percent: ++this.numOfLoadedImage / this.totalImages * 100\n            });\n\n            if (this.numOfLoadedImage === this.totalImages) {\n              this.setState({\n                isImageLoaded: true\n              });\n              clearTimeout(timeoutPreloading);\n            }\n          };\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.imagesPreloading = picture => {\n      for (let i in picture) {\n        for (let prop in picture[i]) {\n          let img = new Image();\n          img.src = picture[i][prop];\n\n          img.onload = () => {\n            this.setState({\n              percent: ++this.numOfLoadedImage / this.totalImages * 100\n            });\n\n            if (this.numOfLoadedImage === this.totalImages) {\n              this.setState({\n                isImageLoaded: true\n              });\n              if (this.learning_type !== 'daily') this.newRequest();else this.daily();\n            }\n          };\n        }\n      }\n    };\n\n    this.onContinueButtonHandle = () => {\n      this.setState({\n        showPopup: false\n      });\n    };\n\n    this.onRestartButtonHandle = () => {\n      this.setState({\n        showDonePopup: false\n      });\n      this.newRequest();\n      setTimeout(() => this.playSound(), 2000);\n    };\n\n    this.onPauseButtonHandle = () => {\n      this.setState({\n        showPopup: true\n      });\n    };\n\n    this.learning_type = match.params.learning_type;\n    this.cure = null;\n    this.currentCure = null;\n    this.currentIndex = 0;\n    this.numOfLoadedImage = 0;\n    this.picture = {\n      T7,\n      Characters\n    };\n    this.totalImages = Object.keys(T7).length + Object.keys(Characters).length;\n    this.state = initState;\n  }\n\n  async componentDidMount() {\n    const {\n      user\n    } = this.props;\n\n    if (!user.user.u_id || !user.student.s_id) {\n      this.props.history.push('/root/signin');\n      return;\n    }\n\n    this.imagesPreloading(this.picture);\n  }\n\n  componentWillUnmount() {\n    if (!!this.voice) {\n      for (let i = 0; i < this.voice.length; i++) {\n        if (!!this.voice[i]) {\n          this.voice[i].pause();\n          this.voice[i].remove();\n          this.voice[i] = null;\n        }\n      }\n    }\n  }\n\n  render() {\n    const {\n      CardTextList,\n      picBox,\n      isImageLoaded,\n      showPopup,\n      showDonePopup,\n      showDailyPopup,\n      percent,\n      gameState,\n      currentIndex,\n      totalNum\n    } = this.state;\n\n    if (isImageLoaded) {\n      return /*#__PURE__*/React.createElement(ConsoCommonPresenter, {\n        Background: T7.t7_background,\n        Card: [Characters.card1, Characters.card2],\n        CardTextList: CardTextList || ['ㄱ', 'ㄴ'],\n        picBox: picBox || T7.t7_excpic,\n        onCardTouchHandle: this.onCardTouchHandle,\n        onContinueButtonHandle: this.onContinueButtonHandle,\n        onRestartButtonHandle: this.onRestartButtonHandle,\n        onPauseButtonHandle: this.onPauseButtonHandle,\n        showPopup: showPopup,\n        showDailyPopup: showDailyPopup,\n        showDonePopup: showDonePopup,\n        gameState: gameState,\n        currentIndex: currentIndex,\n        totalNum: totalNum,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(LoadingComp, {\n        percent: percent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n}\n\nConsoCommon.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(ConsoCommon));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/ttobak/front/src/Routes/Therapy/T7_ConsoCommon/ConsoCommonContainer.js"],"names":["React","ConsoCommonPresenter","withRouter","PropTypes","connect","LoadingComp","T7","Characters","T_Api2","soundURL","T_tutorial","idx_txt","initState","gameState","picBox","CardTextList","isImageLoaded","showPopup","showDonePopup","showDailyPopup","percent","currentIndex","totalNum","ConsoCommon","Component","constructor","match","newRequest","console","log","user","props","s_id","student","data","ask","code","tutorial","cure","totalImages","length","pictursPreloading","currentCure","is_first","i","answer","Math","floor","random","setState","cure_path","cure_word","cure_word2","message","daily","location","state","voice","Audio","tut_voice","voc_path","sample_ques","addEventListener","cure_id","learning_type","setTimeout","play","playSound","currentAudio","gameDone","onCardTouchHandle","id","correct_voice","voc_desc","retry_script","good_script","nextStep","onTreeTouchEndHandle","isDragging","picture","timeoutPreloading","history","push","img","Image","src","onload","numOfLoadedImage","clearTimeout","e","imagesPreloading","prop","onContinueButtonHandle","onRestartButtonHandle","onPauseButtonHandle","params","Object","keys","componentDidMount","u_id","componentWillUnmount","pause","remove","render","t7_background","card1","card2","t7_excpic","propTypes","objectOf","any","isRequired","dispatch","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ConsoCommonPresenter from './ConsoCommonPresenter';\n\nimport { withRouter } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport LoadingComp from 'Components/LoadingComp';\nimport { T7, Characters } from 'images';\nimport { T_Api2, soundURL, T_tutorial } from 'api';\n\nconst idx_txt = 'consocommon';\nconst initState = {\n    gameState: false,\n    picBox: null,\n    CardTextList: null,\n    isImageLoaded: false,\n    showPopup: false,\n    showDonePopup: false,\n    showDailyPopup: false,\n    percent: 0,\n    currentIndex: 1,\n    totalNum: 0,\n};\n\nclass ConsoCommon extends React.Component {\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    constructor({ match }) {\n        super();\n        this.learning_type = match.params.learning_type;\n        this.cure = null;\n        this.currentCure = null;\n        this.currentIndex = 0;\n        this.numOfLoadedImage = 0;\n        this.picture = { T7, Characters };\n        this.totalImages = Object.keys(T7).length + Object.keys(Characters).length;\n\n        this.state = initState;\n    }\n\n    async componentDidMount() {\n        const { user } = this.props;\n\n        if (!user.user.u_id || !user.student.s_id) {\n            this.props.history.push('/root/signin');\n            return;\n        }\n\n        this.imagesPreloading(this.picture);\n    }\n\n    componentWillUnmount() {\n        if (!!this.voice) {\n            for (let i = 0; i < this.voice.length; i++) {\n                if (!!this.voice[i]) {\n                    this.voice[i].pause();\n                    this.voice[i].remove();\n                    this.voice[i] = null;\n                }\n            }\n        }\n    }\n\n    newRequest = async () => {\n        console.log('new request');\n        const { user } = this.props;\n        const s_id = user.student.s_id;\n\n        const { data } = await T_Api2.ask(s_id, idx_txt);\n        console.log(data);\n\n        if (data.code === 'tutorial') {\n            this.tutorial(data);\n            return;\n        }\n\n        if (data.code === 'specified' || data.code === 1) {\n            this.currentIndex = 0;\n            this.cure = data.cure;\n            this.totalImages += this.cure.length;\n            this.pictursPreloading(this.cure);\n            this.currentCure = this.cure[this.currentIndex];\n            this.currentCure.is_first = 'T';\n            for (let i in this.cure) {\n                this.cure[i].answer = Math.floor(Math.random() * 2);\n            }\n\n            this.setState({\n                gameState: true,\n                picBox: soundURL + this.currentCure.cure_path,\n                CardTextList: this.currentCure.answer === 0 ?\n                    [this.currentCure.cure_word, this.currentCure.cure_word2] :\n                    [this.currentCure.cure_word2, this.currentCure.cure_word],\n                totalNum: this.cure.length,\n                currentIndex: this.currentIndex + 1,\n            })\n        }\n        else console.log('data message: ' + data.message);\n    }\n\n    daily = () => {\n        if (this.props.location.state.data.code === 'tutorial') {\n            this.tutorial(this.props.location.state.data);\n            return;\n        }\n\n        console.log(this.props.location.state.data.cure);\n        this.cure = this.props.location.state.data.cure;\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentCure.is_first = 'T';\n        this.setState({\n            totalNum: this.cure.length,\n            currentIndex: this.currentIndex + 1,\n            picBox: soundURL + this.currentCure.cure_path,\n            CardTextList: [this.currentCure.cure_word, this.currentCure.cure_word2]\n        });\n    }\n\n    tutorial = (data) => {\n        this.voice = [\n            new Audio(soundURL + data.tut_voice[0].voc_path),\n            new Audio(soundURL + data.tut_voice[1].voc_path),\n        ];\n        this.currentCure = data.sample_ques;\n        this.setState({\n            picBox: soundURL + this.currentCure.cure_path,\n            CardTextList: [this.currentCure.cure_word, this.currentCure.cure_word2]\n        });\n\n        this.voice[0].addEventListener('ended', () => {\n            this.setState({\n                gameState: 'tutorial',\n            })\n        });\n\n        this.voice[1].addEventListener('ended', async () => {\n            const { data } = await T_tutorial.answer(this.props.user.student.s_id, idx_txt, this.currentCure.cure_id);\n            console.log(data);\n            this.setState({\n                gameState: false,\n            });\n            if (this.learning_type === 'daily') this.daily();\n            else this.newRequest();\n\n            this.voice = null;\n        });\n\n        setTimeout(() => {\n            this.voice[0].play();\n        }, 2000);\n    }\n\n    playSound = () => {\n        if (!!this.currentAudio) {\n            this.setState({\n                gameState: false,\n            });\n        }\n    }\n\n    gameDone = () => {\n        console.log('game doen!');\n        if (this.learning_type !== 'daily') {\n            this.setState({\n                showDonePopup: true,\n            })\n        } else {\n            this.setState({\n                showDailyPopup: true,\n            })\n        }\n    }\n\n    onCardTouchHandle = async (id) => {\n        const { gameState } = this.state;\n        if (gameState === 'tutorial') {\n            if (id === 0) {\n                this.setState({ gameState: false });\n                setTimeout(() => {\n                    this.voice[1].play();\n                }, 1000);\n            }\n            return;\n        }\n\n        if (gameState === false) return;\n\n        this.setState({\n            gameState: false,\n        })\n\n        const { user } = this.props;\n        const s_id = user.student.s_id;\n\n        const { data } = await T_Api2.answer(\n            s_id,\n            this.currentCure.cure_word,\n            this.state.CardTextList[id],\n            this.currentCure.cure_id,\n            this.learning_type === 'review' ? 'T' : 'F',\n            idx_txt,\n            this.learning_type === 'daily' ? 'T' : 'F',\n            this.currentCure.is_first\n        );\n        console.log(data);\n\n        if (data.code === 1) {\n            if (data.correct_voice.voc_desc === 'retry') {\n                this.currentCure.is_first = 'F';\n                this.retry_script = new Audio(soundURL + data.correct_voice.voc_path);\n                this.retry_script.addEventListener('ended', () => {\n                    this.setState({\n                        gameState: true,\n                    });\n                });\n\n                setTimeout(() => {\n                    this.retry_script.play();\n                    this.setState({\n                        gameState: false,\n                    });\n                }, 1000);\n                return;\n            } else {\n                this.good_script = new Audio(soundURL + data.correct_voice.voc_path);\n                this.good_script.addEventListener('ended', () => this.nextStep());\n                setTimeout(() => {\n                    this.good_script.play();\n                    this.setState({\n                        gameState: false,\n                    });\n                }, 1000);\n            }\n        }\n    }\n\n    nextStep = () => {\n        if (this.currentIndex < this.cure.length - 1) this.currentIndex++;\n        else {\n            this.gameDone();\n            return;\n        }\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentCure.is_first = 'T';\n\n        this.setState({\n            gameState: true,\n            picBox: soundURL + this.currentCure.cure_path,\n            CardTextList: this.currentCure.answer === 0 ?\n                [this.currentCure.cure_word, this.currentCure.cure_word2] :\n                [this.currentCure.cure_word2, this.currentCure.cure_word],\n            currentIndex: this.currentIndex + 1\n        })\n    }\n\n    onTreeTouchEndHandle = () => {\n        this.setState({\n            isDragging: false,\n        })\n    }\n\n    pictursPreloading = (picture) => {\n        let timeoutPreloading = setTimeout(() => {\n            this.props.history.push('/main/main');\n        }, 10000);\n\n        try {\n            for (let i in picture) {\n                let img = new Image();\n                img.src = soundURL + picture[i].cure_path;\n                img.onload = () => {\n                    this.setState({\n                        percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                    })\n                    if (this.numOfLoadedImage === this.totalImages) {\n                        this.setState({\n                            isImageLoaded: true,\n                        })\n                        clearTimeout(timeoutPreloading);\n                    }\n                };\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    imagesPreloading = (picture) => {\n        for (let i in picture) {\n            for (let prop in picture[i]) {\n                let img = new Image();\n                img.src = picture[i][prop];\n                img.onload = () => {\n                    this.setState({\n                        percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                    })\n                    if (this.numOfLoadedImage === this.totalImages) {\n                        this.setState({\n                            isImageLoaded: true,\n                        })\n                        if (this.learning_type !== 'daily') this.newRequest();\n                        else this.daily();\n                    }\n                };\n            }\n        }\n    }\n\n    onContinueButtonHandle = () => {\n        this.setState({\n            showPopup: false,\n        })\n    }\n\n    onRestartButtonHandle = () => {\n        this.setState({\n            showDonePopup: false,\n        })\n        this.newRequest();\n        setTimeout(() => this.playSound(), 2000);\n    }\n\n    onPauseButtonHandle = () => {\n        this.setState({\n            showPopup: true,\n        })\n    }\n\n    render() {\n        const { CardTextList, picBox, isImageLoaded, showPopup, showDonePopup, showDailyPopup, percent, gameState,\n            currentIndex, totalNum } = this.state;\n\n        if (isImageLoaded) {\n            return (<ConsoCommonPresenter\n                Background={T7.t7_background}\n                Card={[Characters.card1, Characters.card2]}\n                CardTextList={CardTextList || ['ㄱ', 'ㄴ']}\n                picBox={picBox || T7.t7_excpic}\n                onCardTouchHandle={this.onCardTouchHandle}\n                onContinueButtonHandle={this.onContinueButtonHandle}\n                onRestartButtonHandle={this.onRestartButtonHandle}\n                onPauseButtonHandle={this.onPauseButtonHandle}\n                showPopup={showPopup}\n                showDailyPopup={showDailyPopup}\n                showDonePopup={showDonePopup}\n                gameState={gameState}\n                currentIndex={currentIndex}\n                totalNum={totalNum}\n            />);\n        }\n        else {\n            return <LoadingComp percent={percent} />\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(ConsoCommon));"]},"metadata":{},"sourceType":"module"}