{"ast":null,"code":"export function distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(Math.abs(x2 - x1), 2) + Math.pow(Math.abs(y2 - y1), 2));\n}\nexport function inAngleRanges(x1, y1, x2, y2, angleRanges) {\n  if (!angleRanges) {\n    return false;\n  }\n\n  var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI + 180;\n\n  for (var i = 0; i < angleRanges.length; ++i) {\n    if ((angleRanges[i].start == null || angle >= angleRanges[i].start) && (angleRanges[i].end == null || angle <= angleRanges[i].end)) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/ttobak/front/node_modules/react-dnd-touch-backend/dist/esm/utils/math.js"],"names":["distance","x1","y1","x2","y2","Math","sqrt","pow","abs","inAngleRanges","angleRanges","angle","atan2","PI","i","length","start","end"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkC;AACvC,SAAOC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASF,IAAI,CAACG,GAAL,CAASL,EAAE,GAAGF,EAAd,CAAT,EAA4B,CAA5B,IAAiCI,IAAI,CAACE,GAAL,CAASF,IAAI,CAACG,GAAL,CAASJ,EAAE,GAAGF,EAAd,CAAT,EAA4B,CAA5B,CAA3C,CAAP;AACD;AACD,OAAO,SAASO,aAAT,CAAuBR,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCM,WAAvC,EAAoD;AACzD,MAAI,CAACA,WAAL,EAAkB;AAChB,WAAO,KAAP;AACD;;AAED,MAAIC,KAAK,GAAGN,IAAI,CAACO,KAAL,CAAWR,EAAE,GAAGF,EAAhB,EAAoBC,EAAE,GAAGF,EAAzB,IAA+B,GAA/B,GAAqCI,IAAI,CAACQ,EAA1C,GAA+C,GAA3D;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACK,MAAhC,EAAwC,EAAED,CAA1C,EAA6C;AAC3C,QAAI,CAACJ,WAAW,CAACI,CAAD,CAAX,CAAeE,KAAf,IAAwB,IAAxB,IAAgCL,KAAK,IAAID,WAAW,CAACI,CAAD,CAAX,CAAeE,KAAzD,MAAoEN,WAAW,CAACI,CAAD,CAAX,CAAeG,GAAf,IAAsB,IAAtB,IAA8BN,KAAK,IAAID,WAAW,CAACI,CAAD,CAAX,CAAeG,GAA1H,CAAJ,EAAoI;AAClI,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD","sourcesContent":["export function distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(Math.abs(x2 - x1), 2) + Math.pow(Math.abs(y2 - y1), 2));\n}\nexport function inAngleRanges(x1, y1, x2, y2, angleRanges) {\n  if (!angleRanges) {\n    return false;\n  }\n\n  var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI + 180;\n\n  for (var i = 0; i < angleRanges.length; ++i) {\n    if ((angleRanges[i].start == null || angle >= angleRanges[i].start) && (angleRanges[i].end == null || angle <= angleRanges[i].end)) {\n      return true;\n    }\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"module"}