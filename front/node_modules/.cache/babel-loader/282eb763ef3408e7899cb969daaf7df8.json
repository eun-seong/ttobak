{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T2_Count/CountContainer.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { DndProvider } from 'react-dnd';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingComp from 'Components/LoadingComp';\nimport { T2, TTobak } from 'images';\nimport { T_Api2, soundURL, T_tutorial } from 'api';\nimport { SoundEffect } from 'images';\nimport CountPresenter from './CountPresenter';\nconst touch_sound = new Audio(SoundEffect.touch_effect);\nconst effect_sound = new Audio(SoundEffect.twinkle);\nconst idx_txt = 'count';\nconst initState = {\n  gameState: false,\n  isDragging: false,\n  touchPosition: [],\n  Apple: {\n    randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n    applesInBasket: [],\n    numOfApples: 0\n  },\n  TTobaki: TTobak.ttobak1_1,\n  isImageLoaded: false,\n  showPopup: false,\n  showDonePopup: false,\n  showDailyPopup: false,\n  percent: 0,\n  currentIndex: 1,\n  totalNum: 0\n};\n\nclass Count extends React.Component {\n  constructor({\n    match\n  }) {\n    super();\n\n    this.daily = () => {\n      if (this.props.location.data.code === 'tutorial') {\n        this.tutorial(this.props.location.data);\n        return;\n      }\n\n      this.cure = this.props.location.state.data.cure;\n      console.log(this.cure);\n      this.currentCure = this.cure[this.currentIndex];\n      this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n      this.state = { ...this.state,\n        totalNum: this.cure.length\n      };\n      setTimeout(() => this.playSound(), 1000);\n    };\n\n    this.newRequest = async () => {\n      console.log('new request');\n      const {\n        user\n      } = this.props;\n      const s_id = user.student.s_id;\n\n      try {\n        const {\n          data\n        } = await T_Api2.ask(s_id, idx_txt);\n        console.log(data);\n\n        if (data.code === 'specified' || data.code === 1) {\n          this.currentIndex = 0;\n          this.cure = data.cure;\n          this.currentCure = data.cure[this.currentIndex];\n          this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n          this.setState({\n            totalNum: this.cure.length\n          });\n          setTimeout(() => this.playSound(), 1000);\n        } else console.log('data message: ' + data.message);\n      } catch (e) {\n        console.log('error: ' + e);\n      }\n    };\n\n    this.tutorial = data => {\n      this.setState({\n        gameState: 'tutorial'\n      });\n      this.currentCure = data.sample_ques;\n      this.sample_ques = new Audio(soundURL + data.cure_path);\n      this.voice = [new Audio(soundURL + data.tut_voice[0].voc_path), new Audio(soundURL + data.tut_voice[1].voc_path), new Audio(soundURL + data.tut_voice[2].voc_path)];\n      this.voice[0].addEventListener('ended', () => {\n        setTimeout(() => {\n          this.sample_ques.play();\n        }, 1000);\n      });\n      this.sample_ques.addEventListener('ended', () => {\n        setTimeout(() => {\n          this.voice[1].play();\n        }, 1000);\n      });\n      this.voice[2].addEventListener('ended', () => {// 사과 옮기기\n      });\n      this.voice[3].addEventListener('ended', async () => {\n        const {\n          data\n        } = await T_tutorial.answer(this.props.user.student.s_id, idx_txt, data.sample_ques.cure_id);\n        console.log(data);\n        this.setState({\n          initState\n        });\n        this.newRequest();\n        this.voice = null;\n        this.voice_desc = null;\n        this.swp = null;\n        this.buttonSound = null;\n      });\n    };\n\n    this.playSound = () => {\n      if (!!this.currentAudio) {\n        this.currentAudio.play();\n        this.changeTTobaki(TTobak.ttobak3_2);\n        this.setState({\n          gameState: false\n        });\n        this.currentAudio.addEventListener('ended', () => {\n          this.setState({\n            gameState: true,\n            TTobaki: TTobak.ttobak1_1\n          });\n        });\n      }\n    };\n\n    this.TTobakiTouch = () => {\n      const {\n        gameState\n      } = this.state;\n\n      if (gameState) {\n        this.playSound();\n      }\n    };\n\n    this.changeTTobaki = ttobaki => {\n      this.setState({\n        TTobaki: ttobaki\n      });\n    };\n\n    this.answer = async () => {\n      effect_sound.play();\n      this.setState({\n        TTobaki: TTobak.ttobak2_1\n      });\n      const {\n        Apple: {\n          numOfApples\n        }\n      } = this.state;\n      const {\n        user\n      } = this.props;\n      const s_id = user.student.s_id;\n      const {\n        data\n      } = await T_Api2.answer(s_id, this.cure[this.currentIndex].cure_word.length.toString(), numOfApples.toString(), this.cure[this.currentIndex].cure_id, this.learning_type === 'review' ? 'T' : 'F', idx_txt);\n      console.log(data);\n      if (this.currentIndex < this.cure.length - 1) this.currentIndex++;else {\n        this.gameDone();\n        return;\n      }\n      this.currentCure = this.cure[this.currentIndex];\n      this.currentAudio = new Audio(soundURL + this.cure[this.currentIndex].cure_path);\n      setTimeout(() => {\n        this.setState({\n          gameState: false,\n          timeOut: null,\n          isDragging: false,\n          touchPosition: [],\n          TTobaki: TTobak.ttobak1_1,\n          Apple: {\n            randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n            applesInBasket: [],\n            numOfApples: 0\n          },\n          currentIndex: this.currentIndex + 1\n        });\n      }, 1500);\n      setTimeout(() => {\n        this.playSound();\n      }, 2500);\n    };\n\n    this.createRandomApple = () => {\n      const newApple = T2.t2_Apples[Math.floor(Math.random() * 4)];\n      this.setState({\n        Apple: { ...this.state.Apple,\n          randomApple: newApple\n        }\n      });\n      return newApple;\n    };\n\n    this.dropApple = () => {\n      const {\n        Apple: {\n          applesInBasket,\n          numOfApples,\n          randomApple\n        }\n      } = this.state;\n      if (this.timeOut) clearTimeout(this.timeOut);\n      this.timeOut = setTimeout(() => {\n        this.answer();\n      }, 3000);\n      this.setState({\n        Apple: { ...this.state.Apple,\n          numOfApples: numOfApples <= 5 ? numOfApples + 1 : 5,\n          applesInBasket: applesInBasket.concat(randomApple)\n        }\n      });\n    };\n\n    this.gameDone = () => {\n      console.log('game doen!');\n\n      if (this.learning_type !== 'daily') {\n        this.setState({\n          showDonePopup: true\n        });\n      } else {\n        this.setState({\n          showDailyPopup: true\n        });\n      }\n    };\n\n    this.onTreeTouchStartHandle = e => {\n      touch_sound.play();\n      this.setState({\n        isDragging: true,\n        touchPosition: [e.changedTouches[0].pageX, e.changedTouches[0].pageY]\n      });\n    };\n\n    this.onTreeTouchEndHandle = () => {\n      this.setState({\n        isDragging: false\n      });\n    };\n\n    this.imagesPreloading = picture => {\n      let timeoutPreloading = setTimeout(() => {\n        this.props.history.replace('/main/main');\n      }, 10000);\n\n      for (let i in picture) {\n        for (let prop in picture[i]) {\n          if (typeof picture[i][prop] === 'object') {\n            let arr = picture[i][prop];\n\n            for (let i in arr) {\n              let img = new Image();\n              img.src = arr[i];\n\n              img.onload = () => {\n                this.setState({\n                  percent: ++this.numOfLoadedImage / this.totalImages * 100\n                });\n\n                if (this.numOfLoadedImage === this.totalImages) {\n                  this.setState({\n                    isImageLoaded: true\n                  });\n                  if (this.learning_type === 'daily') this.daily();else this.newRequest();\n                  clearTimeout(timeoutPreloading);\n                }\n              };\n            }\n          } else {\n            let img = new Image();\n            img.src = picture[i][prop];\n\n            img.onload = () => {\n              this.setState({\n                percent: ++this.numOfLoadedImage / this.totalImages * 100\n              });\n\n              if (this.numOfLoadedImage === this.totalImages) {\n                this.setState({\n                  isImageLoaded: true\n                });\n                if (this.learning_type === 'daily') this.daily();else this.newRequest();\n                clearTimeout(timeoutPreloading);\n              }\n            };\n          }\n        }\n      }\n    };\n\n    this.onContinueButtonHandle = () => {\n      this.setState({\n        showPopup: false\n      });\n    };\n\n    this.onRestartButtonHandle = () => {\n      this.setState({\n        showDonePopup: false\n      });\n      this.newRequest();\n      setTimeout(() => {\n        this.setState({\n          gameState: false,\n          timeOut: null,\n          isDragging: false,\n          touchPosition: [],\n          TTobaki: TTobak.ttobak1_1,\n          Apple: {\n            randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n            applesInBasket: [],\n            numOfApples: 0\n          }\n        });\n      }, 2000);\n      setTimeout(() => this.playSound(), 4000);\n    };\n\n    this.onPauseButtonHandle = () => {\n      this.setState({\n        showPopup: true\n      });\n    };\n\n    this.onCompleteButtonHandle = () => {\n      this.answer();\n      clearTimeout(this.timeOut);\n    };\n\n    this.learning_type = match.params.learning_type;\n    this.cure = null;\n    this.cureLength = 0;\n    this.currentIndex = 0;\n    this.currentAudio = null;\n    this.currentCure = 0;\n    this.timeOut = null;\n    this.numOfLoadedImage = 0;\n    this.picture = {\n      T2,\n      TTobak\n    };\n    this.totalImages = Object.keys(T2).length + Object.keys(TTobak).length + 3;\n    this.state = initState;\n  }\n\n  async componentDidMount() {\n    const {\n      user\n    } = this.props;\n\n    if (!user.user.u_id) {\n      this.props.history.push('/root/signin');\n      return;\n    }\n\n    if (!user.student.s_id) {\n      this.props.history.push('/root/selectstd');\n      return;\n    }\n\n    this.imagesPreloading(this.picture);\n  }\n\n  componentWillUnmount() {\n    if (!!this.currentAudio) {\n      this.currentAudio.pause();\n      this.currentAudio = null;\n    }\n  }\n\n  render() {\n    const {\n      isDragging,\n      touchPosition,\n      Apple,\n      answer,\n      TTobaki,\n      isImageLoaded,\n      showPopup,\n      showDonePopup,\n      showDailyPopup,\n      percent,\n      currentIndex,\n      totalNum\n    } = this.state;\n\n    if (isImageLoaded) {\n      return /*#__PURE__*/React.createElement(DndProvider, {\n        backend: TouchBackend,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CountPresenter, {\n        Background: T2.t2_background,\n        Basket: T2.t2_basket,\n        TTobak: TTobaki,\n        TTobakiTouch: this.TTobakiTouch,\n        onTreeTouchStartHandle: this.onTreeTouchStartHandle,\n        onTreeTouchEndHandle: this.onTreeTouchEndHandle,\n        isDragging: isDragging,\n        touchPosition: touchPosition,\n        createRandomApple: this.createRandomApple,\n        dropApple: this.dropApple,\n        Apple: Apple,\n        answer: answer,\n        onContinueButtonHandle: this.onContinueButtonHandle,\n        onRestartButtonHandle: this.onRestartButtonHandle,\n        onPauseButtonHandle: this.onPauseButtonHandle,\n        onCompleteButtonHandle: this.onCompleteButtonHandle,\n        showPopup: showPopup,\n        showDailyPopup: showDailyPopup,\n        showDonePopup: showDonePopup,\n        currentIndex: currentIndex,\n        totalNum: totalNum,\n        bt_complete: T2.bt_complete,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(LoadingComp, {\n        percent: percent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n}\n\nCount.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(Count));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T2_Count/CountContainer.js"],"names":["React","withRouter","DndProvider","TouchBackend","PropTypes","connect","LoadingComp","T2","TTobak","T_Api2","soundURL","T_tutorial","SoundEffect","CountPresenter","touch_sound","Audio","touch_effect","effect_sound","twinkle","idx_txt","initState","gameState","isDragging","touchPosition","Apple","randomApple","t2_Apples","Math","floor","random","applesInBasket","numOfApples","TTobaki","ttobak1_1","isImageLoaded","showPopup","showDonePopup","showDailyPopup","percent","currentIndex","totalNum","Count","Component","constructor","match","daily","props","location","data","code","tutorial","cure","state","console","log","currentCure","currentAudio","cure_path","length","setTimeout","playSound","newRequest","user","s_id","student","ask","setState","message","e","sample_ques","voice","tut_voice","voc_path","addEventListener","play","answer","cure_id","voice_desc","swp","buttonSound","changeTTobaki","ttobak3_2","TTobakiTouch","ttobaki","ttobak2_1","cure_word","toString","learning_type","gameDone","timeOut","createRandomApple","newApple","dropApple","clearTimeout","concat","onTreeTouchStartHandle","changedTouches","pageX","pageY","onTreeTouchEndHandle","imagesPreloading","picture","timeoutPreloading","history","replace","i","prop","arr","img","Image","src","onload","numOfLoadedImage","totalImages","onContinueButtonHandle","onRestartButtonHandle","onPauseButtonHandle","onCompleteButtonHandle","params","cureLength","Object","keys","componentDidMount","u_id","push","componentWillUnmount","pause","render","t2_background","t2_basket","bt_complete","propTypes","objectOf","any","isRequired","dispatch","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { DndProvider } from 'react-dnd'\nimport { TouchBackend } from 'react-dnd-touch-backend';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport LoadingComp from 'Components/LoadingComp';\nimport { T2, TTobak } from 'images';\nimport { T_Api2, soundURL, T_tutorial } from 'api';\nimport { SoundEffect } from 'images';\n\nimport CountPresenter from './CountPresenter';\n\nconst touch_sound = new Audio(SoundEffect.touch_effect);\nconst effect_sound = new Audio(SoundEffect.twinkle);\n\nconst idx_txt = 'count';\nconst initState = {\n    gameState: false,\n    isDragging: false,\n    touchPosition: [],\n    Apple: {\n        randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n        applesInBasket: [],\n        numOfApples: 0,\n    },\n    TTobaki: TTobak.ttobak1_1,\n    isImageLoaded: false,\n    showPopup: false,\n    showDonePopup: false,\n    showDailyPopup: false,\n    percent: 0,\n    currentIndex: 1,\n    totalNum: 0,\n};\n\nclass Count extends React.Component {\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    constructor({ match }) {\n        super();\n        this.learning_type = match.params.learning_type;\n        this.cure = null;\n        this.cureLength = 0;\n        this.currentIndex = 0;\n        this.currentAudio = null;\n        this.currentCure = 0;\n        this.timeOut = null;\n        this.numOfLoadedImage = 0;\n        this.picture = { T2, TTobak };\n        this.totalImages = Object.keys(T2).length + Object.keys(TTobak).length + 3;\n        this.state = initState;\n    }\n\n    async componentDidMount() {\n        const { user } = this.props;\n\n        if (!user.user.u_id) {\n            this.props.history.push('/root/signin');\n            return;\n        }\n\n        if (!user.student.s_id) {\n            this.props.history.push('/root/selectstd');\n            return;\n        }\n\n        this.imagesPreloading(this.picture);\n    }\n\n    componentWillUnmount() {\n        if (!!this.currentAudio) {\n            this.currentAudio.pause();\n            this.currentAudio = null;\n        }\n    }\n\n    daily = () => {\n        if (this.props.location.data.code === 'tutorial') {\n            this.tutorial(this.props.location.data);\n            return;\n        }\n        this.cure = this.props.location.state.data.cure;\n        console.log(this.cure);\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n        this.state = {\n            ...this.state,\n            totalNum: this.cure.length,\n        };\n        setTimeout(() => this.playSound(), 1000);\n    }\n\n    newRequest = async () => {\n        console.log('new request');\n        const { user } = this.props;\n        const s_id = user.student.s_id;\n\n        try {\n            const { data } = await T_Api2.ask(s_id, idx_txt);\n            console.log(data);\n\n            if (data.code === 'specified' || data.code === 1) {\n                this.currentIndex = 0;\n                this.cure = data.cure;\n                this.currentCure = data.cure[this.currentIndex];\n                this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n\n                this.setState({\n                    totalNum: this.cure.length,\n                });\n                setTimeout(() => this.playSound(), 1000);\n            }\n            else console.log('data message: ' + data.message);\n        } catch (e) {\n            console.log('error: ' + e);\n        }\n    }\n\n    tutorial = (data) => {\n        this.setState({\n            gameState: 'tutorial',\n        });\n\n        this.currentCure = data.sample_ques;\n        this.sample_ques = new Audio(soundURL + data.cure_path);\n\n        this.voice = [\n            new Audio(soundURL + data.tut_voice[0].voc_path),\n            new Audio(soundURL + data.tut_voice[1].voc_path),\n            new Audio(soundURL + data.tut_voice[2].voc_path),\n        ];\n\n        this.voice[0].addEventListener('ended', () => {\n            setTimeout(() => {\n                this.sample_ques.play();\n            }, 1000);\n        });\n\n        this.sample_ques.addEventListener('ended', () => {\n            setTimeout(() => {\n                this.voice[1].play();\n            }, 1000);\n        })\n\n        this.voice[2].addEventListener('ended', () => {\n            // 사과 옮기기\n        });\n\n        this.voice[3].addEventListener('ended', async () => {\n            const { data } = await T_tutorial.answer(this.props.user.student.s_id, idx_txt, data.sample_ques.cure_id);\n            console.log(data);\n            this.setState({\n                initState,\n            });\n            this.newRequest();\n\n            this.voice = null;\n            this.voice_desc = null;\n            this.swp = null;\n            this.buttonSound = null;\n        })\n    }\n\n    playSound = () => {\n        if (!!this.currentAudio) {\n            this.currentAudio.play();\n            this.changeTTobaki(TTobak.ttobak3_2);\n\n            this.setState({\n                gameState: false,\n            });\n\n            this.currentAudio.addEventListener('ended', () => {\n                this.setState({\n                    gameState: true,\n                    TTobaki: TTobak.ttobak1_1,\n                })\n            });\n        }\n    }\n\n    TTobakiTouch = () => {\n        const { gameState } = this.state;\n        if (gameState) {\n            this.playSound();\n        }\n    }\n\n    changeTTobaki = (ttobaki) => {\n        this.setState({\n            TTobaki: ttobaki\n        });\n    }\n\n    answer = async () => {\n        effect_sound.play();\n        this.setState({\n            TTobaki: TTobak.ttobak2_1\n        })\n        const { Apple: { numOfApples } } = this.state;\n        const { user } = this.props;\n        const s_id = user.student.s_id;\n\n        const { data } = await T_Api2.answer(\n            s_id,\n            this.cure[this.currentIndex].cure_word.length.toString(),\n            numOfApples.toString(),\n            this.cure[this.currentIndex].cure_id,\n            this.learning_type === 'review' ? 'T' : 'F',\n            idx_txt\n        );\n        console.log(data);\n\n        if (this.currentIndex < this.cure.length - 1) this.currentIndex++;\n        else {\n            this.gameDone();\n            return;\n        }\n\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentAudio = new Audio(soundURL + this.cure[this.currentIndex].cure_path);\n\n        setTimeout(() => {\n            this.setState({\n                gameState: false,\n                timeOut: null,\n                isDragging: false,\n                touchPosition: [],\n                TTobaki: TTobak.ttobak1_1,\n                Apple: {\n                    randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n                    applesInBasket: [],\n                    numOfApples: 0,\n                },\n                currentIndex: this.currentIndex + 1\n            });\n        }, 1500);\n\n        setTimeout(() => {\n            this.playSound();\n        }, 2500);\n    }\n\n    createRandomApple = () => {\n        const newApple = T2.t2_Apples[Math.floor(Math.random() * 4)];\n\n        this.setState({\n            Apple: {\n                ...this.state.Apple,\n                randomApple: newApple,\n            }\n        })\n        return newApple;\n    }\n\n    dropApple = () => {\n        const { Apple: { applesInBasket, numOfApples, randomApple } } = this.state;\n        if (this.timeOut) clearTimeout(this.timeOut);\n\n        this.timeOut = setTimeout(() => {\n            this.answer();\n        }, 3000);\n\n        this.setState({\n            Apple: {\n                ...this.state.Apple,\n                numOfApples: numOfApples <= 5 ? numOfApples + 1 : 5,\n                applesInBasket: applesInBasket.concat(randomApple),\n            },\n        });\n    }\n\n    gameDone = () => {\n        console.log('game doen!');\n        if (this.learning_type !== 'daily') {\n            this.setState({\n                showDonePopup: true,\n            })\n        } else {\n            this.setState({\n                showDailyPopup: true,\n            })\n        }\n    }\n\n    onTreeTouchStartHandle = e => {\n        touch_sound.play();\n        this.setState({\n            isDragging: true,\n            touchPosition: [e.changedTouches[0].pageX, e.changedTouches[0].pageY],\n        })\n    }\n\n    onTreeTouchEndHandle = () => {\n        this.setState({\n            isDragging: false,\n        })\n    }\n\n    imagesPreloading = (picture) => {\n        let timeoutPreloading = setTimeout(() => {\n            this.props.history.replace('/main/main');\n        }, 10000);\n\n        for (let i in picture) {\n            for (let prop in picture[i]) {\n                if (typeof (picture[i][prop]) === 'object') {\n                    let arr = picture[i][prop];\n                    for (let i in arr) {\n                        let img = new Image();\n                        img.src = arr[i];\n                        img.onload = () => {\n                            this.setState({\n                                percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                            })\n                            if (this.numOfLoadedImage === this.totalImages) {\n                                this.setState({\n                                    isImageLoaded: true,\n                                });\n                                if (this.learning_type === 'daily') this.daily();\n                                else this.newRequest();\n                                clearTimeout(timeoutPreloading);\n                            }\n                        };\n                    }\n                } else {\n                    let img = new Image();\n                    img.src = picture[i][prop];\n                    img.onload = () => {\n                        this.setState({\n                            percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                        })\n                        if (this.numOfLoadedImage === this.totalImages) {\n                            this.setState({\n                                isImageLoaded: true,\n                            })\n                            if (this.learning_type === 'daily') this.daily();\n                            else this.newRequest();\n                            clearTimeout(timeoutPreloading);\n                        }\n                    };\n                }\n            }\n        }\n    }\n\n    onContinueButtonHandle = () => {\n        this.setState({\n            showPopup: false,\n        })\n    }\n\n    onRestartButtonHandle = () => {\n        this.setState({\n            showDonePopup: false,\n        })\n        this.newRequest();\n        setTimeout(() => {\n            this.setState({\n                gameState: false,\n                timeOut: null,\n                isDragging: false,\n                touchPosition: [],\n                TTobaki: TTobak.ttobak1_1,\n                Apple: {\n                    randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n                    applesInBasket: [],\n                    numOfApples: 0,\n                },\n            });\n        }, 2000);\n        setTimeout(() => this.playSound(), 4000);\n    }\n\n    onPauseButtonHandle = () => {\n        this.setState({\n            showPopup: true,\n        })\n    }\n\n    onCompleteButtonHandle = () => {\n        this.answer();\n        clearTimeout(this.timeOut);\n    }\n\n    render() {\n        const { isDragging, touchPosition, Apple, answer, TTobaki, isImageLoaded,\n            showPopup, showDonePopup, showDailyPopup, percent,\n            currentIndex, totalNum } = this.state;\n        if (isImageLoaded) {\n            return (\n                <DndProvider backend={TouchBackend}>\n                    <CountPresenter\n                        Background={T2.t2_background}\n                        Basket={T2.t2_basket}\n                        TTobak={TTobaki}\n                        TTobakiTouch={this.TTobakiTouch}\n                        onTreeTouchStartHandle={this.onTreeTouchStartHandle}\n                        onTreeTouchEndHandle={this.onTreeTouchEndHandle}\n                        isDragging={isDragging}\n                        touchPosition={touchPosition}\n                        createRandomApple={this.createRandomApple}\n                        dropApple={this.dropApple}\n                        Apple={Apple}\n                        answer={answer}\n                        onContinueButtonHandle={this.onContinueButtonHandle}\n                        onRestartButtonHandle={this.onRestartButtonHandle}\n                        onPauseButtonHandle={this.onPauseButtonHandle}\n                        onCompleteButtonHandle={this.onCompleteButtonHandle}\n                        showPopup={showPopup}\n                        showDailyPopup={showDailyPopup}\n                        showDonePopup={showDonePopup}\n                        currentIndex={currentIndex}\n                        totalNum={totalNum}\n                        bt_complete={T2.bt_complete}\n                    />\n                </DndProvider>\n            );\n        }\n        else {\n            return <LoadingComp percent={percent} />\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(Count));"]},"metadata":{},"sourceType":"module"}