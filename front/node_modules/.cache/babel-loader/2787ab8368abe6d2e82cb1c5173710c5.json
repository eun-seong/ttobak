{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Root/AddStudent/AddStudentContainer.js\";\nimport React from 'react';\nimport AddStudentPresenter from './AddStudentPresenter';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { student_add } from 'Sessions/action.js';\nimport moment from 'moment';\n\nclass AddStudent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.goBack = () => {\n      this.props.history.goBack();\n    };\n\n    this.handleSubmit = (e, {\n      name,\n      birth,\n      gender\n    }) => {\n      e.preventDefault();\n      const {\n        user\n      } = this.props;\n      const {\n        dispatch\n      } = this.props;\n      const icon = this.props.match.params.icon;\n\n      if (icon === undefined) {\n        alert('아이콘을 선택해주세요.');\n        return false;\n      }\n\n      if (!name || !birth || !gender) {\n        alert('빠진 부분 없이 입력해 주세요.');\n        return false;\n      }\n\n      if (birth.length !== 8 || isNaN(birth) || !moment(birth, 'YYYYMMDD', true).isValid()) {\n        alert('올바른 생일을 입력해 주세요.(예시: 20100813)');\n        return false;\n      }\n\n      if (gender !== '남자' && gender !== '여자') {\n        alert('올바른 성별을 입력해 주세요.(예시; 여자)');\n        return false;\n      }\n\n      gender = gender === '남자' ? 'm' : 'f';\n      birth = moment(birth).format('YYYY-MM-DD');\n      console.log(user);\n      dispatch(student_add(name, birth, gender, icon, user.user.u_id));\n      return true;\n    };\n  }\n\n  componentDidMount() {\n    const {\n      user\n    } = this.props;\n    console.log(user);\n\n    if (!('u_id' in user.user)) {\n      alert('잘못된 접근입니다.');\n      this.props.history.push('/root/signin');\n    }\n  }\n\n  componentDidUpdate() {\n    const {\n      user\n    } = this.props;\n    console.log(user);\n\n    if ('s_id' in user.student && 'u_id' in user.user) {\n      alert('사용자 추가를 성공했습니다. 검사 페이지로 이동합니다.');\n      this.props.history.push('/diagnose/sweep');\n    }\n\n    if (user.response.data && user.response.data.code == 2) {\n      alert('존재하지 않는 회원입니다.');\n    }\n  }\n\n  render() {\n    /*\n    presenter로 가는 모든 스테이트 값 렌더링\n    예시) const { nowPlaying, upcoming, popular, error, loading } = this.state;\n    */\n    return /*#__PURE__*/React.createElement(AddStudentPresenter, {\n      handleSubmit: this.handleSubmit,\n      iconNum: this.props.match.params.icon,\n      goBack: this.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    });\n  }\n\n}\n\nAddStudent.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(AddStudent));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Root/AddStudent/AddStudentContainer.js"],"names":["React","AddStudentPresenter","withRouter","PropTypes","connect","student_add","moment","AddStudent","Component","goBack","props","history","handleSubmit","e","name","birth","gender","preventDefault","user","dispatch","icon","match","params","undefined","alert","length","isNaN","isValid","format","console","log","u_id","componentDidMount","push","componentDidUpdate","student","response","data","code","render","propTypes","objectOf","any","isRequired","func","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AddStudentPresenter from './AddStudentPresenter';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { student_add } from 'Sessions/action.js';\nimport moment from 'moment';\n\nclass AddStudent extends React.Component {\n    /* \n    모든 로직 추가 \n    api 가져오기\n    error 처리 등 모든 것\n     */\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    goBack = () => {\n        this.props.history.goBack();\n    };\n\n    handleSubmit = (e, {name, birth, gender}) => {\n        e.preventDefault(); \n        const { user } = this.props;\n        const {dispatch} = this.props;\n\n        const icon = this.props.match.params.icon;\n        if(icon === undefined) {\n            alert('아이콘을 선택해주세요.');\n            return false;\n        }\n\n        if(!name || !birth || !gender) {\n            alert('빠진 부분 없이 입력해 주세요.');\n            return false;\n        }\n\n        if(birth.length !== 8 || isNaN(birth) || !moment(birth, 'YYYYMMDD', true).isValid()) {\n            alert('올바른 생일을 입력해 주세요.(예시: 20100813)');\n            return false;\n        }\n\n        if(gender !== '남자' && gender !== '여자') {\n            alert('올바른 성별을 입력해 주세요.(예시; 여자)');\n            return false;\n        }\n\n        gender = (gender === '남자' ? 'm' : 'f');\n        birth = moment(birth).format('YYYY-MM-DD');\n        \n        console.log(user);\n        dispatch(student_add(name, birth, gender, icon, user.user.u_id));\n\n        return true;\n    }\n    componentDidMount() {\n        const { user } = this.props;\n        console.log(user);\n        if(!('u_id' in user.user)) {\n            alert('잘못된 접근입니다.');\n            this.props.history.push('/root/signin');\n        }\n    }\n\n    componentDidUpdate() {\n        const { user } = this.props;\n        console.log(user);\n        if(('s_id' in user.student) && ('u_id' in user.user))  {\n            alert('사용자 추가를 성공했습니다. 검사 페이지로 이동합니다.');\n            this.props.history.push('/diagnose/sweep');\n        }\n\n        if(user.response.data && user.response.data.code == 2) {\n            alert('존재하지 않는 회원입니다.');\n        }\n    }\n\n    render() {\n        /*\n        presenter로 가는 모든 스테이트 값 렌더링\n        예시) const { nowPlaying, upcoming, popular, error, loading } = this.state;\n        */\n\n        return (<\n            AddStudentPresenter\n            handleSubmit={this.handleSubmit}\n            iconNum={this.props.match.params.icon}\n            goBack={this.goBack}\n        />);\n    }\n}\n\nfunction mapStateToProps(state) {\n  return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(AddStudent));"]},"metadata":{},"sourceType":"module"}