{"ast":null,"code":"// Used for MouseEvent.buttons (note the s on the end).\nvar MouseButtons = {\n  Left: 1,\n  Right: 2,\n  Center: 4\n}; // Used for e.button (note the lack of an s on the end).\n\nvar MouseButton = {\n  Left: 0,\n  Center: 1,\n  Right: 2\n};\n/**\n * Only touch events and mouse events where the left button is pressed should initiate a drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\n\nexport function eventShouldStartDrag(e) {\n  // For touch events, button will be undefined. If e.button is defined,\n  // then it should be MouseButton.Left.\n  return e.button === undefined || e.button === MouseButton.Left;\n}\n/**\n * Only touch events and mouse events where the left mouse button is no longer held should end a drag.\n * It's possible the user mouse downs with the left mouse button, then mouse down and ups with the right mouse button.\n * We don't want releasing the right mouse button to end the drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\n\nexport function eventShouldEndDrag(e) {\n  // Touch events will have buttons be undefined, while mouse events will have e.buttons's left button\n  // bit field unset if the left mouse button has been released\n  return e.buttons === undefined || (e.buttons & MouseButtons.Left) === 0;\n}\nexport function isTouchEvent(e) {\n  return !!e.targetTouches;\n}","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/ttobak/front/node_modules/react-dnd-touch-backend/dist/esm/utils/predicates.js"],"names":["MouseButtons","Left","Right","Center","MouseButton","eventShouldStartDrag","e","button","undefined","eventShouldEndDrag","buttons","isTouchEvent","targetTouches"],"mappings":"AAAA;AACA,IAAIA,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,CADW;AAEjBC,EAAAA,KAAK,EAAE,CAFU;AAGjBC,EAAAA,MAAM,EAAE;AAHS,CAAnB,C,CAIG;;AAEH,IAAIC,WAAW,GAAG;AAChBH,EAAAA,IAAI,EAAE,CADU;AAEhBE,EAAAA,MAAM,EAAE,CAFQ;AAGhBD,EAAAA,KAAK,EAAE;AAHS,CAAlB;AAKA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,oBAAT,CAA8BC,CAA9B,EAAiC;AACtC;AACA;AACA,SAAOA,CAAC,CAACC,MAAF,KAAaC,SAAb,IAA0BF,CAAC,CAACC,MAAF,KAAaH,WAAW,CAACH,IAA1D;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASQ,kBAAT,CAA4BH,CAA5B,EAA+B;AACpC;AACA;AACA,SAAOA,CAAC,CAACI,OAAF,KAAcF,SAAd,IAA2B,CAACF,CAAC,CAACI,OAAF,GAAYV,YAAY,CAACC,IAA1B,MAAoC,CAAtE;AACD;AACD,OAAO,SAASU,YAAT,CAAsBL,CAAtB,EAAyB;AAC9B,SAAO,CAAC,CAACA,CAAC,CAACM,aAAX;AACD","sourcesContent":["// Used for MouseEvent.buttons (note the s on the end).\nvar MouseButtons = {\n  Left: 1,\n  Right: 2,\n  Center: 4\n}; // Used for e.button (note the lack of an s on the end).\n\nvar MouseButton = {\n  Left: 0,\n  Center: 1,\n  Right: 2\n};\n/**\n * Only touch events and mouse events where the left button is pressed should initiate a drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\n\nexport function eventShouldStartDrag(e) {\n  // For touch events, button will be undefined. If e.button is defined,\n  // then it should be MouseButton.Left.\n  return e.button === undefined || e.button === MouseButton.Left;\n}\n/**\n * Only touch events and mouse events where the left mouse button is no longer held should end a drag.\n * It's possible the user mouse downs with the left mouse button, then mouse down and ups with the right mouse button.\n * We don't want releasing the right mouse button to end the drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\n\nexport function eventShouldEndDrag(e) {\n  // Touch events will have buttons be undefined, while mouse events will have e.buttons's left button\n  // bit field unset if the left mouse button has been released\n  return e.buttons === undefined || (e.buttons & MouseButtons.Left) === 0;\n}\nexport function isTouchEvent(e) {\n  return !!e.targetTouches;\n}"]},"metadata":{},"sourceType":"module"}