{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T4_Word/WordContainer.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as Sentry from '@sentry/browser';\nimport WordPresenter from './WordPresenter';\nimport { T1, TTobak, SoundEffect } from 'images';\nimport { T1_Api, soundURL, T_tutorial } from 'api';\nimport LoadingComp from 'Components/LoadingComp';\nconst inistState = {\n  cureText: null,\n  isRecording: false,\n  TTobaki: TTobak.ttobak1_1,\n  isImageLoaded: false,\n  showPopup: false,\n  showDonePopup: false,\n  showDailyPopup: false,\n  percent: 0,\n  currentIndex: 1,\n  totalNum: 0,\n  isPlaying: false,\n  RecordingCircle: false,\n  err: false,\n  errorInfo: false\n};\n\nclass Word extends React.Component {\n  constructor({\n    match\n  }) {\n    super();\n\n    this.newRequest = async () => {\n      console.log('new request');\n      const {\n        user\n      } = this.props;\n      const s_id = user.student.s_id;\n      console.log(s_id, this.idx_text);\n      const {\n        data\n      } = await T1_Api.ask(s_id, this.idx_text);\n      console.log(data);\n\n      if (data.code === 'tutorial') {\n        if (this.idx_text === 'vowelword') this.voweltutorial(data);else this.consotutorial(data);\n        return;\n      }\n\n      if (data.code === 'specified' || data.code === 1) {\n        this.currentIndex = 0;\n        this.cure = data.cure;\n        this.currentCure = data.cure[this.currentIndex];\n        this.currentCure.is_first = 'T';\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n        this.currentAudio.addEventListener('ended', this.currentAudioListner);\n        this.setState({\n          TTobaki: TTobak.ttobak1_1,\n          cureText: this.currentCure.cure_word,\n          totalNum: this.cure.length,\n          currentIndex: this.currentIndex + 1\n        });\n        setTimeout(() => {\n          this.playSound();\n        }, 2000);\n      }\n    };\n\n    this.daily = () => {\n      console.log(this.props.location.state.data);\n\n      if (this.props.location.state.data.code === 'tutorial') {\n        if (this.idx_text === 'vowelword') this.voweltutorial(this.props.location.state.data);else this.consotutorial(this.props.location.state.data);\n        return;\n      }\n\n      this.cure = this.props.location.state.data.read;\n      this.currentCure = this.cure[this.currentIndex];\n      this.currentCure.is_first = 'T';\n      this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n      this.currentAudio.addEventListener('ended', this.currentAudioListner);\n      this.setState({\n        totalNum: this.cure.length,\n        cureText: this.currentCure.cure_word,\n        currentIndex: this.currentIndex + 1\n      });\n      setTimeout(() => {\n        this.playSound();\n      }, 12000);\n    };\n\n    this.voweltutorial = data => {\n      this.setState({\n        cureText: data.sample_ques.cure_word,\n        gameState: 'tutorial'\n      });\n      this.currentCure = data.sample_ques;\n      this.tutorialAudio = new Audio(soundURL + this.currentCure.cure_path);\n      this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n      this.currentAudio.addEventListener('ended', this.currentAudioListner);\n      this.voice = [new Audio(soundURL + data.tut_voice[0].voc_path), new Audio(soundURL + data.tut_voice[1].voc_path), new Audio(soundURL + data.tut_voice[2].voc_path), new Audio(soundURL + data.tut_voice[3].voc_path), new Audio(soundURL + data.tut_voice[4].voc_path), new Audio(soundURL + data.tut_voice[5].voc_path)];\n      this.voice[0].addEventListener('ended', () => {\n        setTimeout(() => {\n          this.tutorialAudio.play();\n        }, 1000);\n      });\n      this.tutorialAudio.addEventListener('ended', () => {\n        setTimeout(() => {\n          this.voice[1].play();\n        }, 1000);\n      });\n      this.voice[1].addEventListener('ended', () => {\n        setTimeout(() => {\n          this.recording_start_sound.play();\n          this.setState({\n            isRecording: true,\n            RecordingCircle: true\n          });\n          this.setRecording = setInterval(() => {\n            this.setState({\n              RecordingCircle: !this.state.RecordingCircle\n            });\n          }, 500);\n          setTimeout(() => {\n            window.BRIDGE.recordAudio(this.props.user.student.gender, this.currentCure.cure_word);\n          }, 200);\n        }, 800);\n      });\n\n      for (let i = 2; i < 5; i++) {\n        this.voice[i].addEventListener('ended', () => {\n          setTimeout(() => {\n            this.setState({\n              TTobaki: TTobak.ttobak3_1\n            });\n            setTimeout(() => {\n              if (!!this.currentAudio) {\n                this.playSound();\n                this.setState({\n                  TTobaki: TTobak.ttobak3_2,\n                  isPlaying: true\n                });\n              }\n            }, 1000);\n          }, 800);\n        });\n      }\n\n      this.voice[5].addEventListener('ended', async () => {\n        const {\n          data\n        } = await T_tutorial.answer(this.props.user.student.s_id, this.idx_text, this.currentCure.com_id);\n        console.log(data);\n        setTimeout(() => {\n          if (this.learning_type !== 'daily') this.newRequest();else this.daily();\n        }, 1000);\n\n        if (!!this.currentAudio) {\n          this.currentAudio.remove();\n          this.currentAudio = null;\n        }\n      });\n      setTimeout(() => {\n        this.voice[0].play();\n      }, 1000);\n    };\n\n    this.consotutorial = data => {\n      this.setState({\n        cureText: data.sample_ques.cure_word,\n        gameState: 'tutorial'\n      });\n      this.currentCure = data.sample_ques;\n      this.tutorialAudio = new Audio(soundURL + this.currentCure.cure_path);\n      this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n      this.currentAudio.addEventListener('ended', this.currentAudioListner);\n      this.voice = [null, new Audio(soundURL + data.tut_voice[0].voc_path), new Audio(soundURL + data.tut_voice[1].voc_path), new Audio(soundURL + data.tut_voice[2].voc_path), new Audio(soundURL + data.tut_voice[3].voc_path), new Audio(soundURL + data.tut_voice[4].voc_path)];\n      this.voice[1].addEventListener('ended', () => {\n        setTimeout(() => {\n          this.recording_start_sound.play();\n          this.setState({\n            isRecording: true,\n            RecordingCircle: true\n          });\n          this.setRecording = setInterval(() => {\n            this.setState({\n              RecordingCircle: !this.state.RecordingCircle\n            });\n          }, 500);\n          setTimeout(() => {\n            window.BRIDGE.recordAudio(this.props.user.student.gender, this.currentCure.cure_word);\n          }, 200);\n        }, 800);\n      });\n\n      for (let i = 2; i < 5; i++) {\n        this.voice[i].addEventListener('ended', () => {\n          setTimeout(() => {\n            this.setState({\n              TTobaki: TTobak.ttobak3_1\n            });\n            setTimeout(() => {\n              if (!!this.currentAudio) {\n                this.playSound();\n                this.setState({\n                  TTobaki: TTobak.ttobak3_2,\n                  isPlaying: true\n                });\n              }\n            }, 1000);\n          }, 800);\n        });\n      }\n\n      this.voice[5].addEventListener('ended', async () => {\n        const {\n          data\n        } = await T_tutorial.answer(this.props.user.student.s_id, this.idx_text, this.currentCure.com_id);\n        console.log(data);\n        setTimeout(() => {\n          if (this.learning_type !== 'daily') this.newRequest();else this.daily();\n        }, 1000);\n\n        if (!!this.currentAudio) {\n          this.currentAudio.remove();\n          this.currentAudio = null;\n        }\n      });\n      setTimeout(() => {\n        this.voice[1].play();\n      }, 1000);\n    };\n\n    this.androidResponse = async e => {\n      console.log(e.detail);\n      this.audioResult = e.detail;\n      this.andriodListener();\n    };\n\n    this.stopRecording = e => {\n      console.log(e.detail);\n      clearInterval(this.setRecording);\n      this.recording_end_sound.play();\n      this.setState({\n        isRecording: false,\n        RecordingCircle: false\n      });\n    };\n\n    this.andriodListener = async () => {\n      this.setState({\n        TTobaki: TTobak.ttobak2_1\n      });\n\n      if (this.audioResult.status === 'Success') {\n        if (this.state.gameState === 'tutorial') {\n          if (this.audioResult.score < 85 && ++this.failedNum !== 3) {\n            this.voice[2].play();\n          } else if (this.audioResult.rhythm_score < 0 && ++this.failedNum !== 3) {\n            this.voice[3].play();\n          } else if (this.audioResult.speed_score < -5 && ++this.failedNum !== 3) {\n            this.voice[4].play();\n          } else {\n            this.voice[5].play();\n            this.setState({\n              gameState: false\n            });\n          }\n\n          return;\n        }\n\n        const {\n          user\n        } = this.props;\n        const s_id = user.student.s_id;\n        const {\n          data\n        } = await T1_Api.answer(s_id, this.audioResult.score, this.audioResult.phone_score, this.audioResult.speed_score, this.audioResult.rhythm_score, this.learning_type === 'review' ? 'T' : 'F', this.currentCure.cure_id, this.idx_text, this.learning_type === 'daily' ? 'T' : 'F', this.currentCure.is_first);\n        console.log(data);\n\n        if (data.code === 1) {\n          if (!data.is_pass) {\n            this.currentCure.is_first = 'F';\n\n            if (!!this.retryAudio) {\n              this.retryAudio.remove();\n              this.retryAudio = null;\n            }\n\n            this.retryAudio = new Audio(soundURL + data.class_voice.voc_path);\n            this.retryAudio.addEventListener('ended', () => {\n              this.setState({\n                TTobaki: TTobak.ttobak3_1\n              });\n              setTimeout(() => {\n                this.playSound();\n              }, 1000);\n            });\n            setTimeout(() => {\n              if (!!this.retryAudio) {\n                this.retryAudio.play();\n                this.setState({\n                  TTobaki: TTobak.ttobak3_2\n                });\n              }\n            }, 1000);\n            return;\n          } else {\n            if (!!this.good_script) {\n              this.good_script.remove();\n              this.good_script = null;\n            }\n\n            this.good_script = new Audio(soundURL + data.class_voice.voc_path);\n            this.good_script.addEventListener('ended', () => this.nextStep());\n            setTimeout(() => {\n              if (!!this.good_script) this.good_script.play();\n              this.setState({\n                TTobaki: TTobak.ttobak2_2\n              });\n            }, 1000);\n          }\n        } else if (data.code === 2) {\n          this.gameDone();\n        } else console.log(data.message);\n      } else {\n        console.log(this.audioResult.message);\n      }\n    };\n\n    this.nextStep = () => {\n      if (this.currentIndex < this.cure.length - 1) {\n        this.currentIndex++;\n      } else {\n        this.gameDone();\n        return;\n      }\n\n      this.currentCure = this.cure[this.currentIndex];\n      this.currentCure.is_first = 'T';\n\n      if (!!this.currentAudio) {\n        this.currentAudio.remove();\n        this.currentAudio = null;\n      }\n\n      this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n      this.currentAudio.addEventListener('ended', this.currentAudioListner);\n      setTimeout(() => {\n        this.setState({\n          TTobaki: TTobak.ttobak1_1,\n          cureText: this.currentCure.cure_word,\n          currentIndex: this.currentIndex + 1\n        });\n      }, 2000);\n      setTimeout(() => {\n        this.playSound();\n      }, 4000);\n    };\n\n    this.playSound = () => {\n      if (!!this.currentAudio) {\n        this.setState({\n          TTobaki: TTobak.ttobak3_2,\n          isPlaying: true\n        });\n        this.currentAudio.play();\n      }\n    };\n\n    this.currentAudioListner = () => {\n      this.setState({\n        TTobaki: TTobak.ttobak1_1,\n        isPlaying: false\n      });\n      setTimeout(() => {\n        this.recording_start_sound.play();\n        this.setState({\n          isRecording: true,\n          RecordingCircle: true\n        });\n        this.setRecording = setInterval(() => {\n          this.setState({\n            RecordingCircle: !this.state.RecordingCircle\n          });\n        }, 500);\n        setTimeout(() => {\n          window.BRIDGE.recordAudio(this.props.user.student.gender, this.currentCure.cure_word);\n        }, 200);\n      }, 800);\n    };\n\n    this.gameDone = () => {\n      console.log('game doen!');\n\n      if (this.learning_type !== 'daily') {\n        this.setState({\n          showDonePopup: true\n        });\n      } else {\n        this.setState({\n          showDailyPopup: true\n        });\n      }\n    };\n\n    this.imagesPreloading = picture => {\n      let timeoutPreloading = setTimeout(() => {\n        this.props.history.push('/main/main');\n      }, 10000);\n\n      for (let i in picture) {\n        for (let prop in picture[i]) {\n          let img = new Image();\n          img.src = picture[i][prop];\n\n          img.onload = () => {\n            this.setState({\n              percent: ++this.numOfLoadedImage / this.totalImages * 100\n            });\n\n            if (this.numOfLoadedImage === this.totalImages) {\n              this.setState({\n                isImageLoaded: true,\n                TTobaki: TTobak.ttobak1_1\n              });\n              clearTimeout(timeoutPreloading);\n              if (this.learning_type !== 'daily') this.newRequest();else this.daily();\n            }\n          };\n        }\n      }\n    };\n\n    this.onContinueButtonHandle = () => {\n      this.setState({\n        showPopup: false\n      });\n\n      if (this.continuePlay) {\n        this.currentAudio.play();\n      }\n    };\n\n    this.onRestartButtonHandle = () => {\n      this.setState({\n        showDonePopup: false\n      });\n      this.newRequest();\n      setTimeout(() => this.playSound(), 2000);\n    };\n\n    this.onPauseButtonHandle = () => {\n      this.setState({\n        showPopup: true\n      });\n\n      if (!!this.currentAudio && !this.currentAudio.paused) {\n        this.currentAudio.pause();\n        this.continuePlay = true;\n      }\n    };\n\n    this.onCompleteButtonHandle = () => {\n      if (this.state.isRecording) {\n        window.BRIDGE.requestStopRecording();\n      }\n    };\n\n    this.idx_text = match.params.type;\n    this.learning_type = match.params.learning_type;\n    this.recording_start_sound = new Audio(SoundEffect.recording_start);\n    this.recording_end_sound = new Audio(SoundEffect.recording_end);\n    this.cure = null;\n    this.currentCure = null;\n    this.currentIndex = 0;\n    this.currentAudio = null;\n    this.audioResult = null;\n    this.retryAudio = null;\n    this.picture = {\n      T1,\n      TTobak\n    };\n    this.totalImages = Object.keys(this.picture.T1).length + Object.keys(this.picture.TTobak).length;\n    this.numOfLoadedImage = 0;\n    this.continuePlay = false;\n    this.state = inistState;\n    this.failedNum = 0;\n  }\n\n  async componentDidMount() {\n    const {\n      user\n    } = this.props;\n\n    if (!user.user.u_id || !user.student.s_id) {\n      this.props.history.push('/root/signin');\n      return;\n    }\n\n    this.imagesPreloading(this.picture);\n    window.addEventListener('android', this.androidResponse);\n    window.addEventListener('androidStopRecording', this.stopRecording);\n  }\n\n  componentWillUnmount() {\n    if (this.state.isRecording) {\n      window.BRIDGE.requestStopRecording();\n    }\n\n    if (!!this.currentAudio) {\n      this.currentAudio.pause();\n      this.currentAudio.remove();\n      this.currentAudio = null;\n    }\n\n    if (!!this.retryAudio) {\n      this.retryAudio.pause();\n      this.retryAudio.remove();\n      this.retryAudio = null;\n    }\n\n    if (!!this.voice) {\n      for (let i = 0; i < this.voice.length; i++) {\n        if (!!this.voice[i]) {\n          this.voice[i].pause();\n          this.voice[i].remove();\n          this.voice[i] = null;\n        }\n      }\n    }\n\n    window.removeEventListener('android', this.androidResponse);\n    window.removeEventListener('androidStopRecording', this.stopRecording);\n  }\n\n  componentDidCatch(err, errorInfo) {\n    console.error(err);\n    this.setState(() => ({\n      err: true,\n      errorInfo: errorInfo\n    }));\n\n    if (process.env.NODE_ENV === 'production') {\n      Sentry.captureException(err, {\n        extra: errorInfo\n      });\n    }\n  }\n\n  render() {\n    const {\n      cureText,\n      TTobaki,\n      RecordingCircle,\n      isImageLoaded,\n      isPlaying,\n      showPopup,\n      showDonePopup,\n      showDailyPopup,\n      percent,\n      currentIndex,\n      totalNum\n    } = this.state;\n\n    if (this.state.err) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 20\n        }\n      }, \"error\");\n    }\n\n    if (isImageLoaded) {\n      return /*#__PURE__*/React.createElement(WordPresenter, {\n        Background: T1.t1_background,\n        TextBox: T1.t1_textbox,\n        bt_complete: T1.bt_complete,\n        TTobak: TTobaki,\n        isPlaying: isPlaying,\n        text: cureText,\n        RecordingCircle: RecordingCircle,\n        onCompleteButtonHandle: this.onCompleteButtonHandle,\n        onContinueButtonHandle: this.onContinueButtonHandle,\n        onRestartButtonHandle: this.onRestartButtonHandle,\n        onPauseButtonHandle: this.onPauseButtonHandle,\n        showPopup: showPopup,\n        showDailyPopup: showDailyPopup,\n        showDonePopup: showDonePopup,\n        currentIndex: currentIndex,\n        totalNum: totalNum,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 21\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(LoadingComp, {\n        percent: percent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n}\n\nWord.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(Word));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T4_Word/WordContainer.js"],"names":["React","withRouter","PropTypes","connect","Sentry","WordPresenter","T1","TTobak","SoundEffect","T1_Api","soundURL","T_tutorial","LoadingComp","inistState","cureText","isRecording","TTobaki","ttobak1_1","isImageLoaded","showPopup","showDonePopup","showDailyPopup","percent","currentIndex","totalNum","isPlaying","RecordingCircle","err","errorInfo","Word","Component","constructor","match","newRequest","console","log","user","props","s_id","student","idx_text","data","ask","code","voweltutorial","consotutorial","cure","currentCure","is_first","currentAudio","Audio","cure_path","addEventListener","currentAudioListner","setState","cure_word","length","setTimeout","playSound","daily","location","state","read","sample_ques","gameState","tutorialAudio","voice","tut_voice","voc_path","play","recording_start_sound","setRecording","setInterval","window","BRIDGE","recordAudio","gender","i","ttobak3_1","ttobak3_2","answer","com_id","learning_type","remove","androidResponse","e","detail","audioResult","andriodListener","stopRecording","clearInterval","recording_end_sound","ttobak2_1","status","score","failedNum","rhythm_score","speed_score","phone_score","cure_id","is_pass","retryAudio","class_voice","good_script","nextStep","ttobak2_2","gameDone","message","imagesPreloading","picture","timeoutPreloading","history","push","prop","img","Image","src","onload","numOfLoadedImage","totalImages","clearTimeout","onContinueButtonHandle","continuePlay","onRestartButtonHandle","onPauseButtonHandle","paused","pause","onCompleteButtonHandle","requestStopRecording","params","type","recording_start","recording_end","Object","keys","componentDidMount","u_id","componentWillUnmount","removeEventListener","componentDidCatch","error","process","env","NODE_ENV","captureException","extra","render","t1_background","t1_textbox","bt_complete","propTypes","objectOf","any","isRequired","dispatch","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as Sentry from '@sentry/browser';\n\nimport WordPresenter from './WordPresenter';\nimport { T1, TTobak, SoundEffect } from 'images';\nimport { T1_Api, soundURL, T_tutorial } from 'api';\nimport LoadingComp from 'Components/LoadingComp';\n\nconst inistState = {\n    cureText: null,\n    isRecording: false,\n    TTobaki: TTobak.ttobak1_1,\n    isImageLoaded: false,\n    showPopup: false,\n    showDonePopup: false,\n    showDailyPopup: false,\n    percent: 0,\n    currentIndex: 1,\n    totalNum: 0,\n    isPlaying: false,\n    RecordingCircle: false,\n    err: false,\n    errorInfo: false,\n};\n\nclass Word extends React.Component {\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    constructor({ match }) {\n        super();\n        this.idx_text = match.params.type;\n        this.learning_type = match.params.learning_type;\n        this.recording_start_sound = new Audio(SoundEffect.recording_start);\n        this.recording_end_sound = new Audio(SoundEffect.recording_end);\n        this.cure = null;\n        this.currentCure = null;\n        this.currentIndex = 0;\n        this.currentAudio = null;\n        this.audioResult = null;\n        this.retryAudio = null;\n        this.picture = { T1, TTobak };\n        this.totalImages = Object.keys(this.picture.T1).length + Object.keys(this.picture.TTobak).length;\n        this.numOfLoadedImage = 0;\n        this.continuePlay = false;\n        this.state = inistState;\n        this.failedNum = 0;\n    }\n\n    async componentDidMount() {\n        const { user } = this.props;\n\n        if (!user.user.u_id || !user.student.s_id) {\n            this.props.history.push('/root/signin');\n            return;\n        }\n\n        this.imagesPreloading(this.picture);\n\n        window.addEventListener('android', this.androidResponse);\n        window.addEventListener('androidStopRecording', this.stopRecording);\n    }\n\n    componentWillUnmount() {\n        if (this.state.isRecording) {\n            window.BRIDGE.requestStopRecording();\n        }\n        if (!!this.currentAudio) {\n            this.currentAudio.pause();\n            this.currentAudio.remove();\n            this.currentAudio = null;\n        }\n        if (!!this.retryAudio) {\n            this.retryAudio.pause();\n            this.retryAudio.remove();\n            this.retryAudio = null;\n        }\n\n        if (!!this.voice) {\n            for (let i = 0; i < this.voice.length; i++) {\n                if (!!this.voice[i]) {\n                    this.voice[i].pause();\n                    this.voice[i].remove();\n                    this.voice[i] = null;\n                }\n            }\n        }\n        window.removeEventListener('android', this.androidResponse);\n        window.removeEventListener('androidStopRecording', this.stopRecording);\n    }\n\n    componentDidCatch(err, errorInfo) {\n        console.error(err);\n        this.setState(() => ({\n            err: true,\n            errorInfo: errorInfo,\n        }));\n\n        if (process.env.NODE_ENV === 'production') {\n            Sentry.captureException(err, { extra: errorInfo });\n        }\n    }\n\n    newRequest = async () => {\n        console.log('new request');\n        const { user } = this.props;\n        const s_id = user.student.s_id;\n\n        console.log(s_id, this.idx_text)\n        const { data } = await T1_Api.ask(s_id, this.idx_text);\n        console.log(data);\n\n        if (data.code === 'tutorial') {\n            if (this.idx_text === 'vowelword') this.voweltutorial(data);\n            else this.consotutorial(data);\n            return;\n        }\n\n        if (data.code === 'specified' || data.code === 1) {\n            this.currentIndex = 0;\n            this.cure = data.cure;\n            this.currentCure = data.cure[this.currentIndex];\n            this.currentCure.is_first = 'T';\n            this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n            this.currentAudio.addEventListener('ended', this.currentAudioListner);\n\n            this.setState({\n                TTobaki: TTobak.ttobak1_1,\n                cureText: this.currentCure.cure_word,\n                totalNum: this.cure.length,\n                currentIndex: this.currentIndex + 1,\n            });\n            setTimeout(() => {\n                this.playSound();\n            }, 2000);\n        }\n    }\n\n    daily = () => {\n        console.log(this.props.location.state.data);\n\n        if (this.props.location.state.data.code === 'tutorial') {\n            if (this.idx_text === 'vowelword') this.voweltutorial(this.props.location.state.data);\n            else this.consotutorial(this.props.location.state.data);\n            return;\n        }\n\n        this.cure = this.props.location.state.data.read;\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentCure.is_first = 'T';\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n        this.currentAudio.addEventListener('ended', this.currentAudioListner);\n\n        this.setState({\n            totalNum: this.cure.length,\n            cureText: this.currentCure.cure_word,\n            currentIndex: this.currentIndex + 1,\n        });\n\n        setTimeout(() => {\n            this.playSound();\n        }, 12000);\n    }\n\n    voweltutorial = (data) => {\n        this.setState({\n            cureText: data.sample_ques.cure_word,\n            gameState: 'tutorial',\n        });\n\n        this.currentCure = data.sample_ques;\n        this.tutorialAudio = new Audio(soundURL + this.currentCure.cure_path);\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n        this.currentAudio.addEventListener('ended', this.currentAudioListner);\n        this.voice = [\n            new Audio(soundURL + data.tut_voice[0].voc_path),\n            new Audio(soundURL + data.tut_voice[1].voc_path),\n            new Audio(soundURL + data.tut_voice[2].voc_path),\n            new Audio(soundURL + data.tut_voice[3].voc_path),\n            new Audio(soundURL + data.tut_voice[4].voc_path),\n            new Audio(soundURL + data.tut_voice[5].voc_path),\n        ];\n\n        this.voice[0].addEventListener('ended', () => {\n            setTimeout(() => {\n                this.tutorialAudio.play();\n            }, 1000);\n        });\n\n        this.tutorialAudio.addEventListener('ended', () => {\n            setTimeout(() => {\n                this.voice[1].play();\n            }, 1000);\n        });\n\n        this.voice[1].addEventListener('ended', () => {\n            setTimeout(() => {\n                this.recording_start_sound.play();\n                this.setState({\n                    isRecording: true,\n                    RecordingCircle: true,\n                })\n                this.setRecording = setInterval(() => {\n                    this.setState({\n                        RecordingCircle: !this.state.RecordingCircle,\n                    });\n                }, 500);\n                setTimeout(() => {\n                    window.BRIDGE.recordAudio(this.props.user.student.gender, this.currentCure.cure_word);\n                }, 200);\n            }, 800);\n        });\n\n        for (let i = 2; i < 5; i++) {\n            this.voice[i].addEventListener('ended', () => {\n                setTimeout(() => {\n                    this.setState({\n                        TTobaki: TTobak.ttobak3_1,\n                    })\n                    setTimeout(() => {\n                        if (!!this.currentAudio) {\n                            this.playSound();\n                            this.setState({\n                                TTobaki: TTobak.ttobak3_2,\n                                isPlaying: true,\n                            })\n                        }\n                    }, 1000);\n                }, 800);\n            })\n        }\n\n        this.voice[5].addEventListener('ended', async () => {\n            const { data } = await T_tutorial.answer(\n                this.props.user.student.s_id,\n                this.idx_text,\n                this.currentCure.com_id);\n            console.log(data);\n            setTimeout(() => {\n                if (this.learning_type !== 'daily') this.newRequest();\n                else this.daily();\n            }, 1000);\n            if (!!this.currentAudio) {\n                this.currentAudio.remove();\n                this.currentAudio = null;\n            }\n        })\n\n        setTimeout(() => {\n            this.voice[0].play();\n        }, 1000);\n    }\n\n    consotutorial = (data) => {\n        this.setState({\n            cureText: data.sample_ques.cure_word,\n            gameState: 'tutorial',\n        });\n\n        this.currentCure = data.sample_ques;\n        this.tutorialAudio = new Audio(soundURL + this.currentCure.cure_path);\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n        this.currentAudio.addEventListener('ended', this.currentAudioListner);\n        this.voice = [\n            null,\n            new Audio(soundURL + data.tut_voice[0].voc_path),\n            new Audio(soundURL + data.tut_voice[1].voc_path),\n            new Audio(soundURL + data.tut_voice[2].voc_path),\n            new Audio(soundURL + data.tut_voice[3].voc_path),\n            new Audio(soundURL + data.tut_voice[4].voc_path),\n        ];\n\n        this.voice[1].addEventListener('ended', () => {\n            setTimeout(() => {\n                this.recording_start_sound.play();\n                this.setState({\n                    isRecording: true,\n                    RecordingCircle: true,\n                })\n                this.setRecording = setInterval(() => {\n                    this.setState({\n                        RecordingCircle: !this.state.RecordingCircle,\n                    });\n                }, 500);\n                setTimeout(() => {\n                    window.BRIDGE.recordAudio(this.props.user.student.gender, this.currentCure.cure_word);\n                }, 200);\n            }, 800);\n        });\n\n        for (let i = 2; i < 5; i++) {\n            this.voice[i].addEventListener('ended', () => {\n                setTimeout(() => {\n                    this.setState({\n                        TTobaki: TTobak.ttobak3_1,\n                    })\n                    setTimeout(() => {\n                        if (!!this.currentAudio) {\n                            this.playSound();\n                            this.setState({\n                                TTobaki: TTobak.ttobak3_2,\n                                isPlaying: true,\n                            })\n                        }\n                    }, 1000);\n                }, 800);\n            })\n        }\n\n        this.voice[5].addEventListener('ended', async () => {\n            const { data } = await T_tutorial.answer(\n                this.props.user.student.s_id,\n                this.idx_text,\n                this.currentCure.com_id);\n            console.log(data);\n            setTimeout(() => {\n                if (this.learning_type !== 'daily') this.newRequest();\n                else this.daily();\n            }, 1000);\n            if (!!this.currentAudio) {\n                this.currentAudio.remove();\n                this.currentAudio = null;\n            }\n        })\n\n        setTimeout(() => {\n            this.voice[1].play();\n        }, 1000);\n    }\n\n    androidResponse = async (e) => {\n        console.log(e.detail);\n        this.audioResult = e.detail;\n        this.andriodListener();\n    }\n\n    stopRecording = (e) => {\n        console.log(e.detail);\n        clearInterval(this.setRecording);\n        this.recording_end_sound.play();\n        this.setState({\n            isRecording: false,\n            RecordingCircle: false,\n        });\n    }\n\n    andriodListener = async () => {\n        this.setState({\n            TTobaki: TTobak.ttobak2_1,\n        });\n\n        if (this.audioResult.status === 'Success') {\n            if (this.state.gameState === 'tutorial') {\n                if (this.audioResult.score < 85 && ++this.failedNum !== 3) {\n                    this.voice[2].play();\n                } else if (this.audioResult.rhythm_score < 0 && ++this.failedNum !== 3) {\n                    this.voice[3].play();\n                } else if (this.audioResult.speed_score < -5 && ++this.failedNum !== 3) {\n                    this.voice[4].play();\n                } else {\n                    this.voice[5].play();\n                    this.setState({\n                        gameState: false,\n                    })\n                }\n                return;\n            }\n\n            const { user } = this.props;\n            const s_id = user.student.s_id;\n            const { data } = await T1_Api.answer(\n                s_id,\n                this.audioResult.score,\n                this.audioResult.phone_score,\n                this.audioResult.speed_score,\n                this.audioResult.rhythm_score,\n                this.learning_type === 'review' ? 'T' : 'F',\n                this.currentCure.cure_id,\n                this.idx_text,\n                this.learning_type === 'daily' ? 'T' : 'F',\n                this.currentCure.is_first\n            );\n            console.log(data);\n\n            if (data.code === 1) {\n                if (!data.is_pass) {\n                    this.currentCure.is_first = 'F';\n                    if (!!this.retryAudio) {\n                        this.retryAudio.remove();\n                        this.retryAudio = null;\n                    }\n                    this.retryAudio = new Audio(soundURL + data.class_voice.voc_path);\n                    this.retryAudio.addEventListener('ended', () => {\n                        this.setState({\n                            TTobaki: TTobak.ttobak3_1,\n                        })\n                        setTimeout(() => {\n                            this.playSound();\n                        }, 1000);\n                    });\n\n                    setTimeout(() => {\n                        if (!!this.retryAudio) {\n                            this.retryAudio.play();\n                            this.setState({\n                                TTobaki: TTobak.ttobak3_2,\n                            });\n                        }\n                    }, 1000);\n                    return;\n                } else {\n                    if (!!this.good_script) {\n                        this.good_script.remove();\n                        this.good_script = null;\n                    }\n                    this.good_script = new Audio(soundURL + data.class_voice.voc_path);\n                    this.good_script.addEventListener('ended', () => this.nextStep());\n                    setTimeout(() => {\n                        if (!!this.good_script) this.good_script.play();\n                        this.setState({\n                            TTobaki: TTobak.ttobak2_2,\n                        });\n                    }, 1000);\n                }\n\n            } else if (data.code === 2) {\n                this.gameDone();\n            }\n            else console.log(data.message);\n\n        } else {\n            console.log(this.audioResult.message);\n        }\n    }\n\n    nextStep = () => {\n        if (this.currentIndex < this.cure.length - 1) {\n            this.currentIndex++;\n        } else {\n            this.gameDone();\n            return;\n        }\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentCure.is_first = 'T';\n        if (!!this.currentAudio) {\n            this.currentAudio.remove();\n            this.currentAudio = null;\n        }\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n        this.currentAudio.addEventListener('ended', this.currentAudioListner);\n\n        setTimeout(() => {\n            this.setState({\n                TTobaki: TTobak.ttobak1_1,\n                cureText: this.currentCure.cure_word,\n                currentIndex: this.currentIndex + 1\n            });\n        }, 2000);\n\n        setTimeout(() => {\n            this.playSound();\n        }, 4000);\n    }\n\n    playSound = () => {\n        if (!!this.currentAudio) {\n            this.setState({\n                TTobaki: TTobak.ttobak3_2,\n                isPlaying: true,\n            });\n            this.currentAudio.play();\n        }\n    }\n\n    currentAudioListner = () => {\n        this.setState({\n            TTobaki: TTobak.ttobak1_1,\n            isPlaying: false,\n        });\n        setTimeout(() => {\n            this.recording_start_sound.play();\n            this.setState({\n                isRecording: true,\n                RecordingCircle: true,\n            })\n            this.setRecording = setInterval(() => {\n                this.setState({\n                    RecordingCircle: !this.state.RecordingCircle,\n                });\n            }, 500);\n            setTimeout(() => {\n                window.BRIDGE.recordAudio(this.props.user.student.gender, this.currentCure.cure_word);\n            }, 200);\n        }, 800);\n    };\n\n    gameDone = () => {\n        console.log('game doen!');\n        if (this.learning_type !== 'daily') {\n            this.setState({\n                showDonePopup: true,\n            })\n        } else {\n            this.setState({\n                showDailyPopup: true,\n            })\n        }\n    }\n\n    imagesPreloading = (picture) => {\n        let timeoutPreloading = setTimeout(() => {\n            this.props.history.push('/main/main');\n        }, 10000);\n\n        for (let i in picture) {\n            for (let prop in picture[i]) {\n                let img = new Image();\n                img.src = picture[i][prop];\n                img.onload = () => {\n                    this.setState({\n                        percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                    })\n                    if (this.numOfLoadedImage === this.totalImages) {\n                        this.setState({\n                            isImageLoaded: true,\n                            TTobaki: TTobak.ttobak1_1,\n                        });\n                        clearTimeout(timeoutPreloading);\n                        if (this.learning_type !== 'daily') this.newRequest();\n                        else this.daily();\n                    }\n                };\n            }\n        }\n    }\n\n    onContinueButtonHandle = () => {\n        this.setState({\n            showPopup: false,\n        });\n\n        if (this.continuePlay) {\n            this.currentAudio.play();\n        }\n    }\n\n    onRestartButtonHandle = () => {\n        this.setState({\n            showDonePopup: false,\n        })\n        this.newRequest();\n        setTimeout(() => this.playSound(), 2000);\n    }\n\n    onPauseButtonHandle = () => {\n        this.setState({\n            showPopup: true,\n        });\n\n        if (!!this.currentAudio && !this.currentAudio.paused) {\n            this.currentAudio.pause();\n            this.continuePlay = true;\n        }\n    }\n\n    onCompleteButtonHandle = () => {\n        if (this.state.isRecording) {\n            window.BRIDGE.requestStopRecording();\n        }\n    }\n\n    render() {\n        const { cureText, TTobaki, RecordingCircle, isImageLoaded, isPlaying,\n            showPopup, showDonePopup, showDailyPopup, percent,\n            currentIndex, totalNum } = this.state;\n\n        if (this.state.err) {\n            return <div>error</div>;\n        }\n\n        if (isImageLoaded) {\n            return (<WordPresenter\n                Background={T1.t1_background} TextBox={T1.t1_textbox} bt_complete={T1.bt_complete}\n                TTobak={TTobaki} isPlaying={isPlaying}\n                text={cureText} RecordingCircle={RecordingCircle}\n                onCompleteButtonHandle={this.onCompleteButtonHandle}\n                onContinueButtonHandle={this.onContinueButtonHandle}\n                onRestartButtonHandle={this.onRestartButtonHandle}\n                onPauseButtonHandle={this.onPauseButtonHandle}\n                showPopup={showPopup}\n                showDailyPopup={showDailyPopup}\n                showDonePopup={showDonePopup}\n                currentIndex={currentIndex}\n                totalNum={totalNum}\n            />);\n        }\n        else {\n            return <LoadingComp percent={percent} />\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(Word));"]},"metadata":{},"sourceType":"module"}