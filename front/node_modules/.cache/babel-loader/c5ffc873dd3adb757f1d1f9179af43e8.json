{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T1_Self/SelfContainer.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as Sentry from '@sentry/browser';\nimport SelfPresenter from './SelfPresenter';\nimport { T1, TTobak, SoundEffect } from 'images';\nimport { T1_Api, soundURL, T_tutorial } from 'api';\nimport LoadingComp from 'Components/LoadingComp';\nconst inistState = {\n  cureText: null,\n  isRecording: false,\n  TTobaki: TTobak.ttobak1_1,\n  isImageLoaded: false,\n  showPopup: false,\n  showDonePopup: false,\n  showDailyPopup: false,\n  percent: 0,\n  currentIndex: 1,\n  totalNum: 0,\n  RecordingCircle: false,\n  err: false,\n  errorInfo: false\n};\n\nclass Selfpoem extends React.Component {\n  constructor({\n    match\n  }) {\n    super();\n\n    this.newRequest = async () => {\n      console.log('new request');\n      const {\n        user\n      } = this.props;\n      const s_id = user.student.s_id;\n      const {\n        data\n      } = await T1_Api.ask(s_id, this.idx_text);\n      console.log(data);\n      this.intro(data.read_voice);\n\n      if (data.code === 'specified' || data.code === 1) {\n        this.currentIndex = 0;\n        this.cure = data.cure;\n        this.currentCure = data.cure[this.currentIndex];\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n        if (this.idx_text === 'vowelword' || this.idx_text === 'consoword') this.currentCure.cure_text = this.currentCure.cure_word;\n        this.setState({\n          TTobaki: TTobak.ttobak1_1,\n          cureText: this.currentCure.cure_text,\n          totalNum: this.cure.length\n        });\n      }\n    };\n\n    this.daily = () => {\n      console.log(this.props.location.state.data);\n      this.intro(this.props.location.state.data.read_voice);\n      this.cure = this.props.location.state.data.read;\n      this.currentCure = this.cure[this.currentIndex];\n      this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n      if (this.idx_text === 'vowelword' || this.idx_text === 'consoword') this.currentCure.cure_text = this.currentCure.cure_word;\n      this.setState({\n        totalNum: this.cure.length,\n        cureText: this.currentCure.cure_text\n      });\n    };\n\n    this.intro = data => {\n      this.reac_voice = null;\n      this.read_voice = [new Audio(soundURL + data[0].voc_path)];\n      this.read_voice[0].addEventListener('ended', () => {\n        setTimeout(() => this.playRecording(), 2000);\n      });\n      this.read_voice[0].play();\n    };\n\n    this.androidResponse = async e => {\n      console.log(e.detail);\n      this.audioResult = e.detail;\n      this.andriodListener();\n    };\n\n    this.stopRecording = e => {\n      console.log(e.detail);\n      clearInterval(this.setRecording);\n      this.recording_end_sound.play();\n      this.setState({\n        isRecording: false,\n        RecordingCircle: false\n      });\n    };\n\n    this.andriodListener = async () => {\n      this.setState({\n        TTobaki: TTobak.ttobak2_1\n      });\n\n      if (this.audioResult.status === 'Success') {\n        const {\n          user\n        } = this.props;\n        const s_id = user.student.s_id;\n        const {\n          data\n        } = await T1_Api.answer(s_id, this.audioResult.score, this.audioResult.phone_score, this.audioResult.speed_score, this.audioResult.rhythm_score, this.learning_type === 'review' ? 'T' : 'F', this.currentCure.cure_id, this.idx_text, this.learning_type === 'daily' ? 'T' : 'F');\n        console.log(data);\n\n        if (data.code === 1) {\n          if (data.retry) {\n            this.retryAudio = new Audio(soundURL + data.class_voice.voc_path);\n            this.retryAudio.addEventListener('ended', () => {\n              this.setState({\n                TTobaki: TTobak.ttobak3_1\n              });\n              setTimeout(() => {\n                this.currentAudio.play();\n                this.setState({\n                  TTobaki: TTobak.ttobak3_2\n                });\n              }, 3000);\n            });\n            setTimeout(() => {\n              if (!!this.retryAudio) {\n                this.retryAudio.play();\n                this.setState({\n                  TTobaki: TTobak.ttobak3_2\n                });\n              }\n            }, 1000);\n            return;\n          } else {\n            this.good_script = new Audio(soundURL + data.class_voice.voc_path);\n            this.good_script.addEventListener('ended', () => this.nextStep());\n            setTimeout(() => {\n              this.good_script.play();\n              this.setState({\n                TTobaki: TTobak.ttobak2_2\n              });\n            }, 1000);\n          }\n        } else if (data.code === 2) {\n          this.gameDone();\n        } else console.log(data.message);\n      } else {\n        console.log(this.audioResult.message);\n      }\n    };\n\n    this.nextStep = () => {\n      if (this.currentIndex < this.cure.length - 1) {\n        this.currentIndex++;\n      } else {\n        this.gameDone();\n        return;\n      }\n\n      this.currentCure = this.cure[this.currentIndex];\n      this.currentAudio = null;\n      this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n      if (this.idx_text === 'vowelword' || this.idx_text === 'consoword') this.currentCure.cure_text = this.currentCure.cure_word;\n      setTimeout(() => {\n        this.setState({\n          TTobaki: TTobak.ttobak1_1,\n          cureText: this.currentCure.cure_text,\n          currentIndex: this.currentIndex + 1\n        });\n      }, 2000);\n      setTimeout(() => {\n        this.playRecording();\n      }, 4000);\n    };\n\n    this.playRecording = () => {\n      this.setState({\n        TTobaki: TTobak.ttobak1_1\n      });\n      setTimeout(() => {\n        this.recording_start_sound.play();\n        this.setState({\n          isRecording: true,\n          RecordingCircle: true\n        });\n        this.setRecording = setInterval(() => {\n          this.setState({\n            RecordingCircle: !this.state.RecordingCircle\n          });\n        }, 500);\n        setTimeout(() => {\n          window.BRIDGE.recordAudio(this.props.user.student.gender, this.currentCure.cure_text);\n        }, 200);\n      }, 800);\n    };\n\n    this.gameDone = () => {\n      console.log('game doen!');\n\n      if (this.learning_type !== 'daily') {\n        this.setState({\n          showDonePopup: true\n        });\n      } else {\n        this.setState({\n          showDailyPopup: true\n        });\n      }\n    };\n\n    this.imagesPreloading = picture => {\n      let timeoutPreloading = setTimeout(() => {\n        this.props.history.replace('/main/main');\n      }, 10000);\n\n      for (let i in picture) {\n        for (let prop in picture[i]) {\n          let img = new Image();\n          img.src = picture[i][prop];\n\n          img.onload = () => {\n            this.setState({\n              percent: ++this.numOfLoadedImage / this.totalImages * 100\n            });\n\n            if (this.numOfLoadedImage === this.totalImages) {\n              this.setState({\n                isImageLoaded: true,\n                TTobaki: TTobak.ttobak1_1\n              });\n              clearTimeout(timeoutPreloading);\n              if (this.learning_type !== 'daily') this.newRequest();else this.daily();\n            }\n          };\n        }\n      }\n    };\n\n    this.onContinueButtonHandle = () => {\n      this.setState({\n        showPopup: false\n      });\n    };\n\n    this.onRestartButtonHandle = () => {\n      this.setState({\n        showDonePopup: false\n      });\n      this.newRequest();\n    };\n\n    this.onPauseButtonHandle = () => {\n      this.setState({\n        showPopup: true\n      });\n    };\n\n    this.onCompleteButtonHandle = () => {\n      if (this.state.isRecording) {\n        window.BRIDGE.requestStopRecording();\n      }\n    };\n\n    this.idx_text = match.params.type;\n    this.learning_type = match.params.learning_type;\n    this.recording_start_sound = new Audio(SoundEffect.recording_start);\n    this.recording_end_sound = new Audio(SoundEffect.recording_end);\n    this.cure = null;\n    this.currentCure = null;\n    this.currentIndex = 0;\n    this.currentAudio = null;\n    this.audioResult = null;\n    this.retryAudio = null;\n    this.picture = {\n      T1,\n      TTobak\n    };\n    this.totalImages = Object.keys(this.picture.T1).length + Object.keys(this.picture.TTobak).length;\n    this.numOfLoadedImage = 0;\n    this.state = inistState;\n  }\n\n  async componentDidMount() {\n    const {\n      user\n    } = this.props;\n\n    if (!user.user.u_id || !user.student.s_id) {\n      this.props.history.push('/root/signin');\n      return;\n    }\n\n    this.imagesPreloading(this.picture);\n    window.addEventListener('android', this.androidResponse);\n    window.addEventListener('androidStopRecording', this.stopRecording);\n  }\n\n  componentWillUnmount() {\n    if (!!this.currentAudio) {\n      this.currentAudio.pause();\n      this.currentAudio = null;\n    }\n\n    if (!!this.retryAudio) {\n      this.retryAudio.pause();\n      this.retryAudio = null;\n    }\n\n    window.removeEventListener('android', this.androidResponse);\n    window.removeEventListener('androidStopRecording', this.stopRecording);\n  }\n\n  componentDidCatch(err, errorInfo) {\n    console.error(err);\n    this.setState(() => ({\n      err: true,\n      errorInfo: errorInfo\n    }));\n\n    if (process.env.NODE_ENV === 'production') {\n      Sentry.captureException(err, {\n        extra: errorInfo\n      });\n    }\n  }\n\n  render() {\n    const {\n      cureText,\n      TTobaki,\n      RecordingCircle,\n      isImageLoaded,\n      showPopup,\n      showDonePopup,\n      showDailyPopup,\n      percent,\n      currentIndex,\n      totalNum\n    } = this.state;\n\n    if (this.state.err) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 20\n        }\n      }, \"error\");\n    }\n\n    if (isImageLoaded) {\n      return /*#__PURE__*/React.createElement(SelfPresenter, {\n        Background: T1.t1_background,\n        TextBox: T1.t1_textbox,\n        bt_complete: T1.bt_complete,\n        TTobak: TTobaki,\n        text: cureText,\n        RecordingCircle: RecordingCircle,\n        onCompleteButtonHandle: this.onCompleteButtonHandle,\n        onContinueButtonHandle: this.onContinueButtonHandle,\n        onRestartButtonHandle: this.onRestartButtonHandle,\n        onPauseButtonHandle: this.onPauseButtonHandle,\n        showPopup: showPopup,\n        showDailyPopup: showDailyPopup,\n        showDonePopup: showDonePopup,\n        currentIndex: currentIndex,\n        totalNum: totalNum,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(LoadingComp, {\n        percent: percent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n}\n\nSelfpoem.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(Selfpoem));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T1_Self/SelfContainer.js"],"names":["React","withRouter","PropTypes","connect","Sentry","SelfPresenter","T1","TTobak","SoundEffect","T1_Api","soundURL","T_tutorial","LoadingComp","inistState","cureText","isRecording","TTobaki","ttobak1_1","isImageLoaded","showPopup","showDonePopup","showDailyPopup","percent","currentIndex","totalNum","RecordingCircle","err","errorInfo","Selfpoem","Component","constructor","match","newRequest","console","log","user","props","s_id","student","data","ask","idx_text","intro","read_voice","code","cure","currentCure","currentAudio","Audio","cure_path","cure_text","cure_word","setState","length","daily","location","state","read","reac_voice","voc_path","addEventListener","setTimeout","playRecording","play","androidResponse","e","detail","audioResult","andriodListener","stopRecording","clearInterval","setRecording","recording_end_sound","ttobak2_1","status","answer","score","phone_score","speed_score","rhythm_score","learning_type","cure_id","retry","retryAudio","class_voice","ttobak3_1","ttobak3_2","good_script","nextStep","ttobak2_2","gameDone","message","recording_start_sound","setInterval","window","BRIDGE","recordAudio","gender","imagesPreloading","picture","timeoutPreloading","history","replace","i","prop","img","Image","src","onload","numOfLoadedImage","totalImages","clearTimeout","onContinueButtonHandle","onRestartButtonHandle","onPauseButtonHandle","onCompleteButtonHandle","requestStopRecording","params","type","recording_start","recording_end","Object","keys","componentDidMount","u_id","push","componentWillUnmount","pause","removeEventListener","componentDidCatch","error","process","env","NODE_ENV","captureException","extra","render","t1_background","t1_textbox","bt_complete","propTypes","objectOf","any","isRequired","dispatch","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as Sentry from '@sentry/browser';\n\nimport SelfPresenter from './SelfPresenter';\nimport { T1, TTobak, SoundEffect } from 'images';\nimport { T1_Api, soundURL, T_tutorial } from 'api';\nimport LoadingComp from 'Components/LoadingComp';\n\nconst inistState = {\n    cureText: null,\n    isRecording: false,\n    TTobaki: TTobak.ttobak1_1,\n    isImageLoaded: false,\n    showPopup: false,\n    showDonePopup: false,\n    showDailyPopup: false,\n    percent: 0,\n    currentIndex: 1,\n    totalNum: 0,\n    RecordingCircle: false,\n    err: false,\n    errorInfo: false,\n};\n\nclass Selfpoem extends React.Component {\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    constructor({ match }) {\n        super();\n        this.idx_text = match.params.type;\n        this.learning_type = match.params.learning_type;\n        this.recording_start_sound = new Audio(SoundEffect.recording_start);\n        this.recording_end_sound = new Audio(SoundEffect.recording_end);\n        this.cure = null;\n        this.currentCure = null;\n        this.currentIndex = 0;\n        this.currentAudio = null;\n        this.audioResult = null;\n        this.retryAudio = null;\n        this.picture = { T1, TTobak };\n        this.totalImages = Object.keys(this.picture.T1).length + Object.keys(this.picture.TTobak).length;\n        this.numOfLoadedImage = 0;\n        this.state = inistState;\n    }\n\n    async componentDidMount() {\n        const { user } = this.props;\n\n        if (!user.user.u_id || !user.student.s_id) {\n            this.props.history.push('/root/signin');\n            return;\n        }\n\n        this.imagesPreloading(this.picture);\n\n        window.addEventListener('android', this.androidResponse);\n        window.addEventListener('androidStopRecording', this.stopRecording);\n    }\n\n    componentWillUnmount() {\n        if (!!this.currentAudio) {\n            this.currentAudio.pause();\n            this.currentAudio = null;\n        }\n        if (!!this.retryAudio) {\n            this.retryAudio.pause();\n            this.retryAudio = null;\n        }\n        window.removeEventListener('android', this.androidResponse);\n        window.removeEventListener('androidStopRecording', this.stopRecording);\n    }\n\n    componentDidCatch(err, errorInfo) {\n        console.error(err);\n        this.setState(() => ({\n            err: true,\n            errorInfo: errorInfo,\n        }));\n\n        if (process.env.NODE_ENV === 'production') {\n            Sentry.captureException(err, { extra: errorInfo });\n        }\n    }\n\n    newRequest = async () => {\n        console.log('new request');\n        const { user } = this.props;\n        const s_id = user.student.s_id;\n\n        const { data } = await T1_Api.ask(s_id, this.idx_text);\n        console.log(data);\n\n        this.intro(data.read_voice);\n\n        if (data.code === 'specified' || data.code === 1) {\n            this.currentIndex = 0;\n            this.cure = data.cure;\n            this.currentCure = data.cure[this.currentIndex];\n            this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n            if (this.idx_text === 'vowelword' || this.idx_text === 'consoword')\n                this.currentCure.cure_text = this.currentCure.cure_word;\n            this.setState({\n                TTobaki: TTobak.ttobak1_1,\n                cureText: this.currentCure.cure_text,\n                totalNum: this.cure.length,\n            });\n        }\n    }\n\n    daily = () => {\n        console.log(this.props.location.state.data);\n        this.intro(this.props.location.state.data.read_voice);\n\n        this.cure = this.props.location.state.data.read;\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n        if (this.idx_text === 'vowelword' || this.idx_text === 'consoword')\n            this.currentCure.cure_text = this.currentCure.cure_word;\n\n        this.setState({\n            totalNum: this.cure.length,\n            cureText: this.currentCure.cure_text\n        });\n    }\n\n    intro = (data) => {\n        this.reac_voice = null;\n        this.read_voice = [\n            new Audio(soundURL + data[0].voc_path),\n        ];\n\n        this.read_voice[0].addEventListener('ended', () => {\n            setTimeout(() => this.playRecording(), 2000);\n        });\n\n        this.read_voice[0].play();\n    }\n\n    androidResponse = async (e) => {\n        console.log(e.detail);\n        this.audioResult = e.detail;\n        this.andriodListener();\n    }\n\n    stopRecording = (e) => {\n        console.log(e.detail);\n        clearInterval(this.setRecording);\n        this.recording_end_sound.play();\n        this.setState({\n            isRecording: false,\n            RecordingCircle: false,\n        });\n    }\n\n    andriodListener = async () => {\n        this.setState({\n            TTobaki: TTobak.ttobak2_1,\n        });\n\n        if (this.audioResult.status === 'Success') {\n            const { user } = this.props;\n            const s_id = user.student.s_id;\n            const { data } = await T1_Api.answer(\n                s_id,\n                this.audioResult.score,\n                this.audioResult.phone_score,\n                this.audioResult.speed_score,\n                this.audioResult.rhythm_score,\n                this.learning_type === 'review' ? 'T' : 'F',\n                this.currentCure.cure_id,\n                this.idx_text,\n                this.learning_type === 'daily' ? 'T' : 'F',\n            );\n            console.log(data);\n\n            if (data.code === 1) {\n                if (data.retry) {\n                    this.retryAudio = new Audio(soundURL + data.class_voice.voc_path);\n                    this.retryAudio.addEventListener('ended', () => {\n                        this.setState({\n                            TTobaki: TTobak.ttobak3_1,\n                        })\n                        setTimeout(() => {\n                            this.currentAudio.play();\n                            this.setState({\n                                TTobaki: TTobak.ttobak3_2,\n                            })\n                        }, 3000);\n                    });\n\n                    setTimeout(() => {\n                        if (!!this.retryAudio) {\n                            this.retryAudio.play();\n                            this.setState({\n                                TTobaki: TTobak.ttobak3_2,\n                            });\n                        }\n                    }, 1000);\n                    return;\n                } else {\n                    this.good_script = new Audio(soundURL + data.class_voice.voc_path);\n                    this.good_script.addEventListener('ended', () => this.nextStep());\n                    setTimeout(() => {\n                        this.good_script.play();\n                        this.setState({\n                            TTobaki: TTobak.ttobak2_2,\n                        });\n                    }, 1000);\n                }\n\n            } else if (data.code === 2) {\n                this.gameDone();\n            }\n            else console.log(data.message);\n\n        } else {\n            console.log(this.audioResult.message);\n        }\n    }\n\n    nextStep = () => {\n        if (this.currentIndex < this.cure.length - 1) {\n            this.currentIndex++;\n        } else {\n            this.gameDone();\n            return;\n        }\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentAudio = null;\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n        if (this.idx_text === 'vowelword' || this.idx_text === 'consoword')\n            this.currentCure.cure_text = this.currentCure.cure_word;\n\n        setTimeout(() => {\n            this.setState({\n                TTobaki: TTobak.ttobak1_1,\n                cureText: this.currentCure.cure_text,\n                currentIndex: this.currentIndex + 1\n            });\n        }, 2000);\n\n        setTimeout(() => {\n            this.playRecording();\n        }, 4000);\n    }\n\n    playRecording = () => {\n        this.setState({\n            TTobaki: TTobak.ttobak1_1,\n        });\n        setTimeout(() => {\n            this.recording_start_sound.play();\n            this.setState({\n                isRecording: true,\n                RecordingCircle: true,\n            })\n            this.setRecording = setInterval(() => {\n                this.setState({\n                    RecordingCircle: !this.state.RecordingCircle,\n                });\n            }, 500);\n            setTimeout(() => {\n                window.BRIDGE.recordAudio(this.props.user.student.gender, this.currentCure.cure_text);\n            }, 200);\n        }, 800);\n    }\n\n    gameDone = () => {\n        console.log('game doen!');\n        if (this.learning_type !== 'daily') {\n            this.setState({\n                showDonePopup: true,\n            })\n        } else {\n            this.setState({\n                showDailyPopup: true,\n            })\n        }\n    }\n\n    imagesPreloading = (picture) => {\n        let timeoutPreloading = setTimeout(() => {\n            this.props.history.replace('/main/main');\n        }, 10000);\n\n        for (let i in picture) {\n            for (let prop in picture[i]) {\n                let img = new Image();\n                img.src = picture[i][prop];\n                img.onload = () => {\n                    this.setState({\n                        percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                    })\n                    if (this.numOfLoadedImage === this.totalImages) {\n                        this.setState({\n                            isImageLoaded: true,\n                            TTobaki: TTobak.ttobak1_1,\n                        });\n                        clearTimeout(timeoutPreloading);\n                        if (this.learning_type !== 'daily') this.newRequest();\n                        else this.daily();\n                    }\n                };\n            }\n        }\n    }\n\n    onContinueButtonHandle = () => {\n        this.setState({\n            showPopup: false,\n        })\n    }\n\n    onRestartButtonHandle = () => {\n        this.setState({\n            showDonePopup: false,\n        })\n        this.newRequest();\n    }\n\n    onPauseButtonHandle = () => {\n        this.setState({\n            showPopup: true,\n        })\n    }\n\n    onCompleteButtonHandle = () => {\n        if (this.state.isRecording) {\n            window.BRIDGE.requestStopRecording();\n        }\n    }\n\n    render() {\n        const { cureText, TTobaki, RecordingCircle, isImageLoaded,\n            showPopup, showDonePopup, showDailyPopup, percent,\n            currentIndex, totalNum } = this.state;\n\n        if (this.state.err) {\n            return <div>error</div>;\n        }\n\n        if (isImageLoaded) {\n            return (<SelfPresenter\n                Background={T1.t1_background} TextBox={T1.t1_textbox} bt_complete={T1.bt_complete}\n                TTobak={TTobaki}\n                text={cureText} RecordingCircle={RecordingCircle}\n                onCompleteButtonHandle={this.onCompleteButtonHandle}\n                onContinueButtonHandle={this.onContinueButtonHandle}\n                onRestartButtonHandle={this.onRestartButtonHandle}\n                onPauseButtonHandle={this.onPauseButtonHandle}\n                showPopup={showPopup}\n                showDailyPopup={showDailyPopup}\n                showDonePopup={showDonePopup}\n                currentIndex={currentIndex}\n                totalNum={totalNum}\n            />);\n        }\n        else {\n            return <LoadingComp percent={percent} />\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(Selfpoem));"]},"metadata":{},"sourceType":"module"}