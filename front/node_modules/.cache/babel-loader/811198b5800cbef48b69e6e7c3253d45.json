{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/User/StdManaging/StdManagingContainer.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Alert from 'Components/Alert';\nimport StdManagingPresenter from './StdManagingPresenter';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { student_modify, student_get, student_delete, response_clear } from 'Sessions/action.js';\nimport moment from 'moment';\n\nclass StdManaging extends React.Component {\n  constructor() {\n    super();\n\n    this.goBack = () => {\n      this.props.history.goBack();\n    };\n\n    this.handleSubmit = (e, op, {\n      name,\n      birth,\n      gender\n    }) => {\n      e.preventDefault();\n      const {\n        user\n      } = this.props;\n      const {\n        dispatch\n      } = this.props;\n      const student = this.props.match.params.student;\n      const icon = this.props.match.params.icon || user.student.ic_id;\n\n      if (!icon) {\n        this.makeAlert('아이콘을 선택해주세요.', false, () => {\n          this.enableAlert = false;\n          this.forceUpdate();\n        });\n        return false;\n      }\n\n      if (!name || !birth || !gender) {\n        this.makeAlert('빠진 부분 없이 입력해 주세요.', false, () => {\n          this.enableAlert = false;\n          this.forceUpdate();\n        });\n        return false;\n      }\n\n      if (birth.length !== 8 || isNaN(birth) || !moment(birth, 'YYYYMMDD', true).isValid()) {\n        this.makeAlert('올바른 생일을 입력해 주세요.', false, () => {\n          this.enableAlert = false;\n          this.forceUpdate();\n        });\n        return false;\n      }\n\n      if (gender !== '남자' && gender !== '여자') {\n        this.makeAlert('올바른 성별을 입력해 주세요.(예시; 여자)', false, () => {\n          this.enableAlert = false;\n          this.forceUpdate();\n        });\n        return false;\n      }\n\n      gender = gender === '남자' ? 'm' : 'f';\n      birth = moment(birth).format('YYYY-MM-DD');\n      dispatch(response_clear());\n\n      if (op === 'save') {\n        this.makeAlert('정말 저장하시겠습니까?', true, () => {\n          dispatch(student_modify(name, birth, gender, icon, student, user.user.u_id));\n        }, () => {\n          this.enableAlert = false;\n          this.forceUpdate();\n        });\n      } else if (op === 'delete') {\n        this.makeAlert('정말 삭제하시겠습니까?', true, () => {\n          dispatch(student_delete(student, user.user.u_id));\n        }, () => {\n          this.enableAlert = false;\n          this.forceUpdate();\n        });\n      }\n\n      this.isModifyCalled = true;\n      return true;\n    };\n\n    this.enableAlert = false;\n    this.isModifyCalled = false;\n  }\n\n  componentDidMount() {\n    const {\n      user\n    } = this.props;\n    const {\n      dispatch\n    } = this.props;\n    const student = this.props.match.params.student;\n\n    if (!student || !user.user.u_id) {\n      this.props.history.push('/root/signin');\n      return;\n    }\n\n    dispatch(student_get(student, user.user.u_id));\n  }\n\n  makeAlert(text, isConfirm, onSubmit, onCancel) {\n    this.enableAlert = true;\n    this.alertText = text;\n    this.isConfirm = isConfirm;\n    this.onSubmit = onSubmit;\n    this.onCancel = onCancel;\n    this.forceUpdate();\n  }\n\n  componentDidUpdate() {\n    const {\n      user\n    } = this.props;\n\n    if (this.isModifyCalled && user.response.data && user.response.data.code === 1) {\n      this.props.history.push('/root/selectstd');\n      this.isModifyCalled = false;\n    }\n  }\n\n  render() {\n    console.log(this.props.history);\n    /*\n    presenter로 가는 모든 스테이트 값 렌더링\n    예시) const { nowPlaying, upcoming, popular, error, loading } = this.state;\n    */\n\n    const {\n      user\n    } = this.props;\n    if (!user.student.name) return null;\n    const alertComp = this.enableAlert ? /*#__PURE__*/React.createElement(Alert, {\n      text: this.alertText,\n      isConfirm: this.isConfirm,\n      onSubmit: this.onSubmit,\n      onCancel: this.onCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 47\n      }\n    }) : '';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, alertComp, /*#__PURE__*/React.createElement(StdManagingPresenter, {\n      student: user.student,\n      iconNum: this.props.match.params.icon || undefined,\n      handleSubmit: this.handleSubmit,\n      goBack: this.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nStdManaging.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(StdManaging));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/User/StdManaging/StdManagingContainer.js"],"names":["React","withRouter","Alert","StdManagingPresenter","PropTypes","connect","student_modify","student_get","student_delete","response_clear","moment","StdManaging","Component","constructor","goBack","props","history","handleSubmit","e","op","name","birth","gender","preventDefault","user","dispatch","student","match","params","icon","ic_id","makeAlert","enableAlert","forceUpdate","length","isNaN","isValid","format","u_id","isModifyCalled","componentDidMount","push","text","isConfirm","onSubmit","onCancel","alertText","componentDidUpdate","response","data","code","render","console","log","alertComp","undefined","propTypes","objectOf","any","isRequired","func","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Alert from 'Components/Alert';\nimport StdManagingPresenter from './StdManagingPresenter';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { student_modify, student_get, student_delete, response_clear } from 'Sessions/action.js';\nimport moment from 'moment';\n\nclass StdManaging extends React.Component {\n\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    constructor() {\n        super();\n\n        this.enableAlert = false;\n        this.isModifyCalled = false;\n    }\n\n    goBack = () => {\n        this.props.history.goBack();\n    }\n\n    componentDidMount() {\n        const { user } = this.props;\n        const { dispatch } = this.props;\n\n        const student = this.props.match.params.student;\n        if (!student || !user.user.u_id) {\n            this.props.history.push('/root/signin');\n            return;\n        }\n\n        dispatch(student_get(student, user.user.u_id));\n    }\n\n\n    handleSubmit = (e, op, { name, birth, gender }) => {\n        e.preventDefault();\n        const { user } = this.props;\n        const { dispatch } = this.props;\n\n        const student = this.props.match.params.student;\n        const icon = this.props.match.params.icon || user.student.ic_id;\n        if (!icon) {\n            this.makeAlert('아이콘을 선택해주세요.', false, (() => {\n                this.enableAlert = false;\n                this.forceUpdate();\n            }));\n            return false;\n        }\n\n        if (!name || !birth || !gender) {\n            this.makeAlert('빠진 부분 없이 입력해 주세요.', false, (() => {\n                this.enableAlert = false;\n                this.forceUpdate();\n            }));\n            return false;\n        }\n\n        if (birth.length !== 8 || isNaN(birth) || !moment(birth, 'YYYYMMDD', true).isValid()) {\n            this.makeAlert('올바른 생일을 입력해 주세요.', false, (() => {\n                this.enableAlert = false;\n                this.forceUpdate();\n            }));\n            return false;\n        }\n\n        if (gender !== '남자' && gender !== '여자') {\n            this.makeAlert('올바른 성별을 입력해 주세요.(예시; 여자)', false, (() => {\n                this.enableAlert = false;\n                this.forceUpdate();\n            }));\n            return false;\n        }\n\n        gender = (gender === '남자' ? 'm' : 'f');\n        birth = moment(birth).format('YYYY-MM-DD');\n\n        dispatch(response_clear());\n        if (op === 'save') {\n            this.makeAlert('정말 저장하시겠습니까?', true, (() => {\n                dispatch(student_modify(name, birth, gender, icon, student, user.user.u_id));\n            }), (() => {\n                this.enableAlert = false;\n                this.forceUpdate();\n            }));\n        } else if (op === 'delete') {\n            this.makeAlert('정말 삭제하시겠습니까?', true, (() => {\n                dispatch(student_delete(student, user.user.u_id));\n            }), (() => {\n                this.enableAlert = false;\n                this.forceUpdate();\n            }));\n        }\n\n        this.isModifyCalled = true;\n\n        return true;\n    }\n\n    makeAlert(text, isConfirm, onSubmit, onCancel) {\n        this.enableAlert = true;\n        this.alertText = text;\n        this.isConfirm = isConfirm;\n        this.onSubmit = onSubmit;\n        this.onCancel = onCancel;\n\n        this.forceUpdate();\n    }\n\n    componentDidUpdate() {\n        const { user } = this.props;\n        if(this.isModifyCalled && user.response.data && user.response.data.code === 1) {\n            this.props.history.push('/root/selectstd');\n            this.isModifyCalled = false;\n        }\n    }\n\n    render() {\n        console.log(this.props.history);\n        /*\n        presenter로 가는 모든 스테이트 값 렌더링\n        예시) const { nowPlaying, upcoming, popular, error, loading } = this.state;\n        */\n\n        const { user } = this.props;\n        if (!user.student.name) return null;\n\n        const alertComp = this.enableAlert ? (<Alert \n            text={this.alertText}\n            isConfirm={this.isConfirm}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n        />) : '';\n\n        return (\n            <div>\n                {alertComp}\n                <StdManagingPresenter\n                    student={user.student}\n                    iconNum={this.props.match.params.icon || undefined}\n                    handleSubmit={this.handleSubmit}\n                    goBack={this.goBack}\n                />\n            </div>\n            );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(StdManaging));"]},"metadata":{},"sourceType":"module"}