{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T2_Count/CountContainer.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { DndProvider } from 'react-dnd';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingComp from 'Components/LoadingComp';\nimport { T2, TTobak } from 'images';\nimport { T_Api2, soundURL } from 'api';\nimport { SoundEffect } from 'images';\nimport CountPresenter from './CountPresenter';\nconst touch_sound = new Audio(SoundEffect.touch_effect);\nconst effect_sound = new Audio(SoundEffect.twinkle);\nconst idx_txt = 'count';\n\nclass Count extends React.Component {\n  constructor({\n    match,\n    location\n  }) {\n    super();\n\n    this.daily = () => {\n      this.cure = this.props.location.state.data.cure;\n      console.log(this.cure);\n      this.currentCure = this.cure[this.currentIndex];\n      this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n      this.state = { ...this.state,\n        totalNum: this.cure.length\n      };\n    };\n\n    this.newRequest = async () => {\n      console.log('new request');\n      const {\n        user\n      } = this.props;\n      const s_id = user.student.s_id;\n\n      try {\n        const {\n          data\n        } = await T_Api2.ask(s_id, idx_txt);\n        console.log(data);\n\n        if (data.code === 'specified' || data.code === 1) {\n          this.currentIndex = 0;\n          this.cure = data.cure;\n          this.currentCure = data.cure[this.currentIndex];\n          this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n          this.setState({\n            totalNum: this.cure.length\n          });\n        } else console.log('data message: ' + data.message);\n      } catch (e) {\n        console.log('error: ' + e);\n      }\n    };\n\n    this.playSound = () => {\n      if (!!this.currentAudio) {\n        this.currentAudio.play();\n        this.changeTTobaki(TTobak.ttobak3_2);\n        this.setState({\n          gameState: false\n        });\n        this.currentAudio.addEventListener('ended', () => {\n          this.setState({\n            gameState: true,\n            TTobaki: TTobak.ttobak1_1\n          });\n        });\n      }\n    };\n\n    this.TTobakiTouch = () => {\n      const {\n        gameState\n      } = this.state;\n\n      if (gameState) {\n        this.playSound();\n      }\n    };\n\n    this.changeTTobaki = ttobaki => {\n      this.setState({\n        TTobaki: ttobaki\n      });\n    };\n\n    this.answer = async () => {\n      effect_sound.play();\n      this.setState({\n        TTobaki: TTobak.ttobak2_1\n      });\n      const {\n        Apple: {\n          numOfApples\n        }\n      } = this.state;\n      const {\n        user\n      } = this.props;\n      const s_id = user.student.s_id;\n      const {\n        data\n      } = await T_Api2.answer(s_id, this.cure[this.currentIndex].cure_word.length.toString(), numOfApples.toString(), this.cure[this.currentIndex].cure_id, this.learning_type === 'review' ? 'T' : 'F', idx_txt);\n      console.log(data);\n      if (this.currentIndex < this.cure.length - 1) this.currentIndex++;else {\n        this.gameDone();\n        return;\n      }\n      this.currentCure = this.cure[this.currentIndex];\n      this.currentAudio = new Audio(soundURL + this.cure[this.currentIndex].cure_path);\n      setTimeout(() => {\n        this.setState({\n          gameState: false,\n          timeOut: null,\n          isDragging: false,\n          touchPosition: [],\n          TTobaki: TTobak.ttobak1_1,\n          Apple: {\n            randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n            applesInBasket: [],\n            numOfApples: 0\n          },\n          currentIndex: this.currentIndex + 1\n        });\n      }, 1500);\n      setTimeout(() => {\n        this.playSound();\n      }, 2500);\n    };\n\n    this.createRandomApple = () => {\n      const newApple = T2.t2_Apples[Math.floor(Math.random() * 4)];\n      this.setState({\n        Apple: { ...this.state.Apple,\n          randomApple: newApple\n        }\n      });\n      return newApple;\n    };\n\n    this.dropApple = () => {\n      const {\n        Apple: {\n          applesInBasket,\n          numOfApples,\n          randomApple\n        }\n      } = this.state;\n      if (this.timeOut) clearTimeout(this.timeOut);\n      this.timeOut = setTimeout(() => {\n        this.answer();\n      }, 3000);\n      this.setState({\n        Apple: { ...this.state.Apple,\n          numOfApples: numOfApples <= 5 ? numOfApples + 1 : 5,\n          applesInBasket: applesInBasket.concat(randomApple)\n        }\n      });\n    };\n\n    this.gameDone = () => {\n      console.log('game doen!');\n\n      if (this.learning_type !== 'daily') {\n        this.setState({\n          showDonePopup: true\n        });\n      } else {\n        this.setState({\n          showDailyPopup: true\n        });\n      }\n    };\n\n    this.onTreeTouchStartHandle = e => {\n      touch_sound.play();\n      this.setState({\n        isDragging: true,\n        touchPosition: [e.changedTouches[0].pageX, e.changedTouches[0].pageY]\n      });\n    };\n\n    this.onTreeTouchEndHandle = () => {\n      this.setState({\n        isDragging: false\n      });\n    };\n\n    this.imagesPreloading = picture => {\n      let timeoutPreloading = setTimeout(() => {\n        this.props.history.replace('/main/main');\n      }, 10000);\n\n      for (let i in picture) {\n        for (let prop in picture[i]) {\n          if (typeof picture[i][prop] === 'object') {\n            let arr = picture[i][prop];\n\n            for (let i in arr) {\n              let img = new Image();\n              img.src = arr[i];\n\n              img.onload = () => {\n                this.setState({\n                  percent: ++this.numOfLoadedImage / this.totalImages * 100\n                });\n\n                if (this.numOfLoadedImage === this.totalImages) {\n                  this.setState({\n                    isImageLoaded: true\n                  });\n                  setTimeout(() => this.playSound(), 1000);\n                  clearTimeout(timeoutPreloading);\n                }\n              };\n            }\n          } else {\n            let img = new Image();\n            img.src = picture[i][prop];\n\n            img.onload = () => {\n              this.setState({\n                percent: ++this.numOfLoadedImage / this.totalImages * 100\n              });\n\n              if (this.numOfLoadedImage === this.totalImages) {\n                this.setState({\n                  isImageLoaded: true\n                });\n                setTimeout(() => this.playSound(), 1000);\n                clearTimeout(timeoutPreloading);\n              }\n            };\n          }\n        }\n      }\n    };\n\n    this.onContinueButtonHandle = () => {\n      this.setState({\n        showPopup: false\n      });\n    };\n\n    this.onRestartButtonHandle = () => {\n      this.setState({\n        showDonePopup: false\n      });\n      this.newRequest();\n      setTimeout(() => {\n        this.setState({\n          gameState: false,\n          timeOut: null,\n          isDragging: false,\n          touchPosition: [],\n          TTobaki: TTobak.ttobak1_1,\n          Apple: {\n            randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n            applesInBasket: [],\n            numOfApples: 0\n          }\n        });\n      }, 2000);\n      setTimeout(() => this.playSound(), 4000);\n    };\n\n    this.onPauseButtonHandle = () => {\n      this.setState({\n        showPopup: true\n      });\n    };\n\n    this.onCompleteButtonHandle = () => {\n      this.answer();\n      clearTimeout(this.timeOut);\n    };\n\n    this.learning_type = match.params.learning_type;\n    this.cure = null;\n    this.cureLength = 0;\n    this.currentIndex = 0;\n    this.currentAudio = null;\n    this.currentCure = 0;\n    this.timeOut = null;\n    this.numOfLoadedImage = 0;\n    this.picture = {\n      T2,\n      TTobak\n    };\n    this.totalImages = Object.keys(T2).length + Object.keys(TTobak).length + 3;\n    this.state = {\n      gameState: false,\n      isDragging: false,\n      touchPosition: [],\n      Apple: {\n        randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n        applesInBasket: [],\n        numOfApples: 0\n      },\n      TTobaki: TTobak.ttobak1_1,\n      isImageLoaded: false,\n      showPopup: false,\n      showDonePopup: false,\n      showDailyPopup: false,\n      percent: 0,\n      currentIndex: 1,\n      totalNum: 0\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      user\n    } = this.props;\n\n    if (!user.user.u_id) {\n      this.props.history.push('/root/signin');\n      return;\n    }\n\n    if (!user.student.s_id) {\n      this.props.history.push('/root/selectstd');\n      return;\n    }\n\n    if (this.learning_type !== 'daily') this.newRequest();else this.daily();\n    this.imagesPreloading(this.picture);\n  }\n\n  componentWillUnmount() {\n    if (!!this.currentAudio) {\n      this.currentAudio.pause();\n      this.currentAudio = null;\n    }\n  }\n\n  render() {\n    const {\n      isDragging,\n      touchPosition,\n      Apple,\n      answer,\n      TTobaki,\n      isImageLoaded,\n      showPopup,\n      showDonePopup,\n      showDailyPopup,\n      percent,\n      currentIndex,\n      totalNum\n    } = this.state;\n\n    if (isImageLoaded) {\n      return /*#__PURE__*/React.createElement(DndProvider, {\n        backend: TouchBackend,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CountPresenter, {\n        Background: T2.t2_background,\n        Basket: T2.t2_basket,\n        TTobak: TTobaki,\n        TTobakiTouch: this.TTobakiTouch,\n        onTreeTouchStartHandle: this.onTreeTouchStartHandle,\n        onTreeTouchEndHandle: this.onTreeTouchEndHandle,\n        isDragging: isDragging,\n        touchPosition: touchPosition,\n        createRandomApple: this.createRandomApple,\n        dropApple: this.dropApple,\n        Apple: Apple,\n        answer: answer,\n        onContinueButtonHandle: this.onContinueButtonHandle,\n        onRestartButtonHandle: this.onRestartButtonHandle,\n        onPauseButtonHandle: this.onPauseButtonHandle,\n        onCompleteButtonHandle: this.onCompleteButtonHandle,\n        showPopup: showPopup,\n        showDailyPopup: showDailyPopup,\n        showDonePopup: showDonePopup,\n        currentIndex: currentIndex,\n        totalNum: totalNum,\n        bt_complete: T2.bt_complete,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(LoadingComp, {\n        percent: percent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n}\n\nCount.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(Count));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T2_Count/CountContainer.js"],"names":["React","withRouter","DndProvider","TouchBackend","PropTypes","connect","LoadingComp","T2","TTobak","T_Api2","soundURL","SoundEffect","CountPresenter","touch_sound","Audio","touch_effect","effect_sound","twinkle","idx_txt","Count","Component","constructor","match","location","daily","cure","props","state","data","console","log","currentCure","currentIndex","currentAudio","cure_path","totalNum","length","newRequest","user","s_id","student","ask","code","setState","message","e","playSound","play","changeTTobaki","ttobak3_2","gameState","addEventListener","TTobaki","ttobak1_1","TTobakiTouch","ttobaki","answer","ttobak2_1","Apple","numOfApples","cure_word","toString","cure_id","learning_type","gameDone","setTimeout","timeOut","isDragging","touchPosition","randomApple","t2_Apples","Math","floor","random","applesInBasket","createRandomApple","newApple","dropApple","clearTimeout","concat","showDonePopup","showDailyPopup","onTreeTouchStartHandle","changedTouches","pageX","pageY","onTreeTouchEndHandle","imagesPreloading","picture","timeoutPreloading","history","replace","i","prop","arr","img","Image","src","onload","percent","numOfLoadedImage","totalImages","isImageLoaded","onContinueButtonHandle","showPopup","onRestartButtonHandle","onPauseButtonHandle","onCompleteButtonHandle","params","cureLength","Object","keys","componentDidMount","u_id","push","componentWillUnmount","pause","render","t2_background","t2_basket","bt_complete","propTypes","objectOf","any","isRequired","dispatch","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { DndProvider } from 'react-dnd'\nimport { TouchBackend } from 'react-dnd-touch-backend';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport LoadingComp from 'Components/LoadingComp';\nimport { T2, TTobak } from 'images';\nimport { T_Api2, soundURL } from 'api';\nimport { SoundEffect } from 'images';\n\nimport CountPresenter from './CountPresenter';\n\nconst touch_sound = new Audio(SoundEffect.touch_effect);\nconst effect_sound = new Audio(SoundEffect.twinkle);\n\nconst idx_txt = 'count';\n\nclass Count extends React.Component {\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    constructor({ match, location }) {\n        super();\n        this.learning_type = match.params.learning_type;\n        this.cure = null;\n        this.cureLength = 0;\n        this.currentIndex = 0;\n        this.currentAudio = null;\n        this.currentCure = 0;\n        this.timeOut = null;\n        this.numOfLoadedImage = 0;\n        this.picture = { T2, TTobak };\n        this.totalImages = Object.keys(T2).length + Object.keys(TTobak).length + 3;\n\n        this.state = {\n            gameState: false,\n            isDragging: false,\n            touchPosition: [],\n            Apple: {\n                randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n                applesInBasket: [],\n                numOfApples: 0,\n            },\n            TTobaki: TTobak.ttobak1_1,\n            isImageLoaded: false,\n            showPopup: false,\n            showDonePopup: false,\n            showDailyPopup: false,\n            percent: 0,\n            currentIndex: 1,\n            totalNum: 0,\n        };\n    }\n\n    async componentDidMount() {\n        const { user } = this.props;\n\n        if (!user.user.u_id) {\n            this.props.history.push('/root/signin');\n            return;\n        }\n\n        if (!user.student.s_id) {\n            this.props.history.push('/root/selectstd');\n            return;\n        }\n\n        if (this.learning_type !== 'daily') this.newRequest();\n        else this.daily();\n        this.imagesPreloading(this.picture);\n    }\n\n    componentWillUnmount() {\n        if (!!this.currentAudio) {\n            this.currentAudio.pause();\n            this.currentAudio = null;\n        }\n    }\n\n    daily = () => {\n        this.cure = this.props.location.state.data.cure;\n        console.log(this.cure);\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n        this.state = {\n            ...this.state,\n            totalNum: this.cure.length,\n        };\n    }\n\n    newRequest = async () => {\n        console.log('new request');\n        const { user } = this.props;\n        const s_id = user.student.s_id;\n\n        try {\n            const { data } = await T_Api2.ask(s_id, idx_txt);\n            console.log(data);\n\n            if (data.code === 'specified' || data.code === 1) {\n                this.currentIndex = 0;\n                this.cure = data.cure;\n                this.currentCure = data.cure[this.currentIndex];\n                this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n\n                this.setState({\n                    totalNum: this.cure.length,\n                })\n            }\n            else console.log('data message: ' + data.message);\n        } catch (e) {\n            console.log('error: ' + e);\n        }\n    }\n\n    playSound = () => {\n        if (!!this.currentAudio) {\n            this.currentAudio.play();\n            this.changeTTobaki(TTobak.ttobak3_2);\n\n            this.setState({\n                gameState: false,\n            });\n\n            this.currentAudio.addEventListener('ended', () => {\n                this.setState({\n                    gameState: true,\n                    TTobaki: TTobak.ttobak1_1,\n                })\n            });\n        }\n    }\n\n    TTobakiTouch = () => {\n        const { gameState } = this.state;\n        if (gameState) {\n            this.playSound();\n        }\n    }\n\n    changeTTobaki = (ttobaki) => {\n        this.setState({\n            TTobaki: ttobaki\n        });\n    }\n\n    answer = async () => {\n        effect_sound.play();\n        this.setState({\n            TTobaki: TTobak.ttobak2_1\n        })\n        const { Apple: { numOfApples } } = this.state;\n        const { user } = this.props;\n        const s_id = user.student.s_id;\n\n        const { data } = await T_Api2.answer(\n            s_id,\n            this.cure[this.currentIndex].cure_word.length.toString(),\n            numOfApples.toString(),\n            this.cure[this.currentIndex].cure_id,\n            this.learning_type === 'review' ? 'T' : 'F',\n            idx_txt\n        );\n        console.log(data);\n\n        if (this.currentIndex < this.cure.length - 1) this.currentIndex++;\n        else {\n            this.gameDone();\n            return;\n        }\n\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentAudio = new Audio(soundURL + this.cure[this.currentIndex].cure_path);\n\n        setTimeout(() => {\n            this.setState({\n                gameState: false,\n                timeOut: null,\n                isDragging: false,\n                touchPosition: [],\n                TTobaki: TTobak.ttobak1_1,\n                Apple: {\n                    randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n                    applesInBasket: [],\n                    numOfApples: 0,\n                },\n                currentIndex: this.currentIndex + 1\n            });\n        }, 1500);\n\n        setTimeout(() => {\n            this.playSound();\n        }, 2500);\n    }\n\n    createRandomApple = () => {\n        const newApple = T2.t2_Apples[Math.floor(Math.random() * 4)];\n\n        this.setState({\n            Apple: {\n                ...this.state.Apple,\n                randomApple: newApple,\n            }\n        })\n        return newApple;\n    }\n\n    dropApple = () => {\n        const { Apple: { applesInBasket, numOfApples, randomApple } } = this.state;\n        if (this.timeOut) clearTimeout(this.timeOut);\n\n        this.timeOut = setTimeout(() => {\n            this.answer();\n        }, 3000);\n\n        this.setState({\n            Apple: {\n                ...this.state.Apple,\n                numOfApples: numOfApples <= 5 ? numOfApples + 1 : 5,\n                applesInBasket: applesInBasket.concat(randomApple),\n            },\n        });\n    }\n\n    gameDone = () => {\n        console.log('game doen!');\n        if (this.learning_type !== 'daily') {\n            this.setState({\n                showDonePopup: true,\n            })\n        } else {\n            this.setState({\n                showDailyPopup: true,\n            })\n        }\n    }\n\n    onTreeTouchStartHandle = e => {\n        touch_sound.play();\n        this.setState({\n            isDragging: true,\n            touchPosition: [e.changedTouches[0].pageX, e.changedTouches[0].pageY],\n        })\n    }\n\n    onTreeTouchEndHandle = () => {\n        this.setState({\n            isDragging: false,\n        })\n    }\n\n    imagesPreloading = (picture) => {\n        let timeoutPreloading = setTimeout(() => {\n            this.props.history.replace('/main/main');\n        }, 10000);\n\n        for (let i in picture) {\n            for (let prop in picture[i]) {\n                if (typeof (picture[i][prop]) === 'object') {\n                    let arr = picture[i][prop];\n                    for (let i in arr) {\n                        let img = new Image();\n                        img.src = arr[i];\n                        img.onload = () => {\n                            this.setState({\n                                percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                            })\n                            if (this.numOfLoadedImage === this.totalImages) {\n                                this.setState({\n                                    isImageLoaded: true,\n                                })\n                                setTimeout(() => this.playSound(), 1000);\n                                clearTimeout(timeoutPreloading);\n                            }\n                        };\n                    }\n\n                } else {\n                    let img = new Image();\n                    img.src = picture[i][prop];\n                    img.onload = () => {\n                        this.setState({\n                            percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                        })\n                        if (this.numOfLoadedImage === this.totalImages) {\n                            this.setState({\n                                isImageLoaded: true,\n                            })\n                            setTimeout(() => this.playSound(), 1000);\n                            clearTimeout(timeoutPreloading);\n                        }\n                    };\n                }\n            }\n        }\n    }\n\n    onContinueButtonHandle = () => {\n        this.setState({\n            showPopup: false,\n        })\n    }\n\n    onRestartButtonHandle = () => {\n        this.setState({\n            showDonePopup: false,\n        })\n        this.newRequest();\n        setTimeout(() => {\n            this.setState({\n                gameState: false,\n                timeOut: null,\n                isDragging: false,\n                touchPosition: [],\n                TTobaki: TTobak.ttobak1_1,\n                Apple: {\n                    randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n                    applesInBasket: [],\n                    numOfApples: 0,\n                },\n            });\n        }, 2000);\n        setTimeout(() => this.playSound(), 4000);\n    }\n\n    onPauseButtonHandle = () => {\n        this.setState({\n            showPopup: true,\n        })\n    }\n\n    onCompleteButtonHandle = () => {\n        this.answer();\n        clearTimeout(this.timeOut);\n    }\n\n    render() {\n        const { isDragging, touchPosition, Apple, answer, TTobaki, isImageLoaded,\n            showPopup, showDonePopup, showDailyPopup, percent,\n            currentIndex, totalNum } = this.state;\n        if (isImageLoaded) {\n            return (\n                <DndProvider backend={TouchBackend}>\n                    <CountPresenter\n                        Background={T2.t2_background}\n                        Basket={T2.t2_basket}\n                        TTobak={TTobaki}\n                        TTobakiTouch={this.TTobakiTouch}\n                        onTreeTouchStartHandle={this.onTreeTouchStartHandle}\n                        onTreeTouchEndHandle={this.onTreeTouchEndHandle}\n                        isDragging={isDragging}\n                        touchPosition={touchPosition}\n                        createRandomApple={this.createRandomApple}\n                        dropApple={this.dropApple}\n                        Apple={Apple}\n                        answer={answer}\n                        onContinueButtonHandle={this.onContinueButtonHandle}\n                        onRestartButtonHandle={this.onRestartButtonHandle}\n                        onPauseButtonHandle={this.onPauseButtonHandle}\n                        onCompleteButtonHandle={this.onCompleteButtonHandle}\n                        showPopup={showPopup}\n                        showDailyPopup={showDailyPopup}\n                        showDonePopup={showDonePopup}\n                        currentIndex={currentIndex}\n                        totalNum={totalNum}\n                        bt_complete={T2.bt_complete}\n                    />\n                </DndProvider>\n            );\n        }\n        else {\n            return <LoadingComp percent={percent} />\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(Count));"]},"metadata":{},"sourceType":"module"}