{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Root/SignUp/SignUpContainer.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Alert from 'Components/Alert';\nimport SignUpPresenter from './SignUpPresenter';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { user_register, response_clear } from 'Sessions/action.js';\n\nclass SignUp extends React.Component {\n  /* \n  모든 로직 추가 \n  api 가져오기\n  error 처리 등 모든 것\n   */\n  constructor() {\n    super();\n\n    this.handleSubmit = (e, {\n      name,\n      email,\n      pw,\n      pw_check\n    }) => {\n      e.preventDefault();\n      const {\n        user\n      } = this.props;\n      const {\n        dispatch\n      } = this.props;\n\n      if (!name || !email || !pw || !pw_check) {\n        this.makeAlert('빠진 부분 없이 입력해 주세요.', false, () => {\n          this.enableAlert = false;\n          this.forceUpdate();\n        });\n        return false;\n      }\n\n      if (pw !== pw_check) {\n        this.makeAlert('비밀번호와 비밀번호 확인이 같지 않습니다.', false, () => {\n          this.enableAlert = false;\n          this.forceUpdate();\n        });\n        return false;\n      }\n\n      dispatch(user_register(email, pw, name));\n      this.isRegisterCalled = true;\n    };\n\n    this.goBack = () => {\n      this.props.history.goBack();\n    };\n\n    this.enableAlert = false;\n    this.isRegisterCalled = false;\n  }\n\n  makeAlert(text, isConfirm, onSubmit, onCancel) {\n    this.enableAlert = true;\n    this.alertText = text;\n    this.isConfirm = isConfirm;\n    this.onSubmit = onSubmit;\n    this.onCancel = onCancel;\n    this.forceUpdate();\n  }\n\n  componentDidUpdate() {\n    const {\n      user\n    } = this.props;\n    const {\n      dispatch\n    } = this.props;\n    const {\n      history\n    } = this.props;\n\n    if (user.user.u_id) {\n      this.makeAlert('회원 가입에 성공했습니다.', false, () => {\n        this.props.history.push('/root/signin');\n      });\n      return;\n    }\n\n    if (this.isRegisterCalled && user.response.data && user.response.data.code == 2) {\n      dispatch(response_clear());\n      this.makeAlert('이미 존재하는 이메일입니다.', false, () => {\n        this.enableAlert = false;\n        this.forceUpdate();\n      });\n      this.isRegisterCalled = false;\n    }\n  }\n\n  render() {\n    /*\n    presenter로 가는 모든 스테이트 값 렌더링\n    예시) const { nowPlaying, upcoming, popular, error, loading } = this.state;\n    */\n    const alertComp = this.enableAlert ? /*#__PURE__*/React.createElement(Alert, {\n      text: this.alertText,\n      isConfirm: this.isConfirm,\n      onSubmit: this.onSubmit,\n      onCancel: this.onCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 47\n      }\n    }) : '';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, alertComp, /*#__PURE__*/React.createElement(SignUpPresenter, {\n      handleSubmit: this.handleSubmit,\n      goBack: this.goBack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nSignUp.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(SignUp));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Root/SignUp/SignUpContainer.js"],"names":["React","withRouter","Alert","SignUpPresenter","PropTypes","connect","user_register","response_clear","SignUp","Component","constructor","handleSubmit","e","name","email","pw","pw_check","preventDefault","user","props","dispatch","makeAlert","enableAlert","forceUpdate","isRegisterCalled","goBack","history","text","isConfirm","onSubmit","onCancel","alertText","componentDidUpdate","u_id","push","response","data","code","render","alertComp","propTypes","objectOf","any","isRequired","func","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Alert from 'Components/Alert';\nimport SignUpPresenter from './SignUpPresenter';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { user_register, response_clear } from 'Sessions/action.js';\n\nclass SignUp extends React.Component {\n    /* \n    모든 로직 추가 \n    api 가져오기\n    error 처리 등 모든 것\n     */\n\n    constructor() {\n        super();\n        this.enableAlert = false;\n        this.isRegisterCalled = false;\n    }\n\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    handleSubmit = (e, { name, email, pw, pw_check }) => {\n        e.preventDefault();\n        const { user } = this.props;\n        const { dispatch } = this.props;\n\n        if (!name || !email || !pw || !pw_check) {\n            this.makeAlert('빠진 부분 없이 입력해 주세요.', false, (() => {\n                this.enableAlert = false;\n                this.forceUpdate();\n            }));\n            return false;\n        }\n\n        if (pw !== pw_check) {\n            this.makeAlert('비밀번호와 비밀번호 확인이 같지 않습니다.', false, (() => {\n                this.enableAlert = false;\n                this.forceUpdate();\n            }));\n            return false;\n        }\n\n        dispatch(user_register(email, pw, name));\n        this.isRegisterCalled = true;\n    };\n\n    makeAlert(text, isConfirm, onSubmit, onCancel) {\n        this.enableAlert = true;\n        this.alertText = text;\n        this.isConfirm = isConfirm;\n        this.onSubmit = onSubmit;\n        this.onCancel = onCancel;\n\n        this.forceUpdate();\n    }\n\n    goBack = () => {\n        this.props.history.goBack();\n    };\n\n    componentDidUpdate() {\n        const { user } = this.props;\n        const { dispatch } = this.props;\n        const { history } = this.props;\n\n        if (user.user.u_id) {\n            this.makeAlert('회원 가입에 성공했습니다.', false, (() => {\n                this.props.history.push('/root/signin');\n            }));\n            return;\n        }\n\n        if (this.isRegisterCalled && user.response.data && user.response.data.code == 2) {\n            dispatch(response_clear());\n            this.makeAlert('이미 존재하는 이메일입니다.', false, (() => {\n                this.enableAlert = false;\n                this.forceUpdate();\n            }));\n            this.isRegisterCalled = false;\n        }\n    }\n    render() {\n\n\n        /*\n        presenter로 가는 모든 스테이트 값 렌더링\n        예시) const { nowPlaying, upcoming, popular, error, loading } = this.state;\n        */\n\n        const alertComp = this.enableAlert ? (<Alert \n            text={this.alertText}\n            isConfirm={this.isConfirm}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n        />) : '';\n\n        return (\n            <div>\n                {alertComp}\n                <SignUpPresenter\n                    handleSubmit={this.handleSubmit}\n                    goBack={this.goBack}\n                />\n            </div>\n        \n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(SignUp));"]},"metadata":{},"sourceType":"module"}