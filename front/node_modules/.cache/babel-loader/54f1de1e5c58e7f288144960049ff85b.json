{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/User/PwChange/PwChangeContainer.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PwChangePresenter from './PwChangePresenter';\nimport Alert from 'Components/Alert';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { user_get, user_modify, user_logout, response_clear } from 'Sessions/action.js';\n\nclass PwChange extends React.Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = (e, {\n      pw,\n      pw_check\n    }) => {\n      e.preventDefault();\n      const {\n        user\n      } = this.props;\n      const {\n        dispatch\n      } = this.props;\n\n      if (pw !== pw_check) {\n        this.makeAlert('비밀번호와 비밀번호 확인이 같지 않습니다.', false, () => {\n          this.enableAlert = false;\n          this.forceUpdate();\n        });\n        return false;\n      }\n\n      dispatch(user_modify(user.user.email, pw, user.user.name, user.user.u_id));\n      this.isModifyCalled = true;\n    };\n\n    this.goBack = () => {\n      this.props.history.goBack();\n    };\n\n    this.enableAlert = false;\n    this.isModifyCalled = false;\n  }\n\n  makeAlert(text, isConfirm, onSubmit, onCancel) {\n    this.enableAlert = true;\n    this.alertText = text;\n    this.isConfirm = isConfirm;\n    this.onSubmit = onSubmit;\n    this.onCancel = onCancel;\n    this.forceUpdate();\n  }\n\n  componentDidUpdate() {\n    const {\n      user\n    } = this.props;\n    const {\n      dispatch\n    } = this.props;\n\n    if (this.isModifyCalled && user.response && user.response.data.code == 1) {\n      dispatch(response_clear());\n      this.makeAlert('비밀번호를 변경했습니다.', false, () => {\n        dispatch(user_logout());\n        this.props.history.push('/root/signin');\n      });\n      this.isModifyCalled = false;\n      return;\n    }\n  }\n\n  componentDidMount() {\n    const {\n      user\n    } = this.props;\n    const {\n      dispatch\n    } = this.props;\n\n    if (!user.user.u_id) {\n      this.makeAlert('잘못된 접근입니다.', false, () => {\n        this.props.history.push('/root/signin');\n      });\n      return false;\n    }\n\n    dispatch(user_get(user.user.u_id));\n  }\n\n  render() {\n    console.log(this.props.history);\n    /*\n    presenter로 가는 모든 스테이트 값 렌더링\n    예시) const { nowPlaying, upcoming, popular, error, loading } = this.state;\n    */\n\n    const alertComp = this.enableAlert ? /*#__PURE__*/React.createElement(Alert, {\n      text: this.alertText,\n      isConfirm: this.isConfirm,\n      onSubmit: this.onSubmit,\n      onCancel: this.onCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 47\n      }\n    }) : '';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, alertComp, /*#__PURE__*/React.createElement(PwChangePresenter, {\n      goBack: this.goBack,\n      handleSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nPwChange.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(PwChange));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/User/PwChange/PwChangeContainer.js"],"names":["React","withRouter","PwChangePresenter","Alert","PropTypes","connect","user_get","user_modify","user_logout","response_clear","PwChange","Component","constructor","handleSubmit","e","pw","pw_check","preventDefault","user","props","dispatch","makeAlert","enableAlert","forceUpdate","email","name","u_id","isModifyCalled","goBack","history","text","isConfirm","onSubmit","onCancel","alertText","componentDidUpdate","response","data","code","push","componentDidMount","render","console","log","alertComp","propTypes","objectOf","any","isRequired","func","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PwChangePresenter from './PwChangePresenter';\nimport Alert from 'Components/Alert';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { user_get, user_modify, user_logout, response_clear } from 'Sessions/action.js';\n\nclass PwChange extends React.Component {\n\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    constructor() {\n        super();\n\n        this.enableAlert = false;\n        this.isModifyCalled = false;\n    }\n\n    handleSubmit = (e, {pw, pw_check}) => {\n        e.preventDefault(); \n        const { user } = this.props;\n        const {dispatch} = this.props;\n\n        if(pw !== pw_check) {\n            this.makeAlert('비밀번호와 비밀번호 확인이 같지 않습니다.', false, (() => {\n                this.enableAlert = false;\n                this.forceUpdate();\n            }));\n            return false;\n        }\n\n        dispatch(user_modify(user.user.email, pw, user.user.name, user.user.u_id));\n        this.isModifyCalled = true;\n    }\n\n    makeAlert(text, isConfirm, onSubmit, onCancel) {\n        this.enableAlert = true;\n        this.alertText = text;\n        this.isConfirm = isConfirm;\n        this.onSubmit = onSubmit;\n        this.onCancel = onCancel;\n\n        this.forceUpdate();\n    }\n\n    componentDidUpdate() {\n        const { user } = this.props;\n        const { dispatch } = this.props;\n\n        if (this.isModifyCalled && user.response && user.response.data.code == 1) {\n            dispatch(response_clear());\n            this.makeAlert('비밀번호를 변경했습니다.', false, (() => {\n                dispatch(user_logout());\n                this.props.history.push('/root/signin');\n            }));\n            this.isModifyCalled = false;\n            return;\n        }\n    }\n\n    componentDidMount() {\n        const { user } = this.props;\n        const {dispatch} = this.props;\n\n        if(!user.user.u_id) {\n            this.makeAlert('잘못된 접근입니다.', false, (() => {\n                this.props.history.push('/root/signin');\n            }));\n            return false;\n        }\n\n        dispatch(user_get(user.user.u_id));\n    }\n\n    goBack = () => {\n        this.props.history.goBack();\n    }\n\n    render() {\n        console.log(this.props.history);\n        /*\n        presenter로 가는 모든 스테이트 값 렌더링\n        예시) const { nowPlaying, upcoming, popular, error, loading } = this.state;\n        */\n\n        const alertComp = this.enableAlert ? (<Alert \n            text={this.alertText}\n            isConfirm={this.isConfirm}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n        />) : '';\n\n        return (\n            <div>\n                {alertComp}\n                <PwChangePresenter\n                    goBack={this.goBack}\n                    handleSubmit={this.handleSubmit}\n                />\n            </div>\n            );\n    }\n}\n\nfunction mapStateToProps(state) {\n  return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(PwChange));"]},"metadata":{},"sourceType":"module"}