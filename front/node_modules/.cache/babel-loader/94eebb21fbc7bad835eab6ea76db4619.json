{"ast":null,"code":"var _jsxFileName = \"/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T2_Count/CountContainer.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { DndProvider } from 'react-dnd';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport LoadingComp from 'Components/LoadingComp';\nimport { T2, TTobak } from 'images';\nimport { T_Api2, soundURL, T_tutorial } from 'api';\nimport { SoundEffect } from 'images';\nimport CountPresenter from './CountPresenter';\nconst touch_sound = new Audio(SoundEffect.touch_effect);\nconst effect_sound = new Audio(SoundEffect.twinkle);\nconst idx_txt = 'count';\nconst initState = {\n  gameState: false,\n  isDragging: false,\n  touchPosition: [],\n  Apple: {\n    randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n    applesInBasket: [],\n    numOfApples: 0\n  },\n  TTobaki: TTobak.ttobak1_1,\n  isImageLoaded: false,\n  showPopup: false,\n  showDonePopup: false,\n  showDailyPopup: false,\n  percent: 0,\n  currentIndex: 1,\n  totalNum: 0\n};\n\nclass Count extends React.Component {\n  constructor({\n    match\n  }) {\n    super();\n\n    this.daily = () => {\n      if (this.props.location.state.data.code === 'tutorial') {\n        this.tutorial(this.props.location.state.data);\n        return;\n      }\n\n      this.cure = this.props.location.state.data.cure;\n      console.log(this.cure.length);\n      this.currentCure = this.cure[this.currentIndex];\n      this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n      this.setState({\n        totalNum: this.cure.length\n      });\n      setTimeout(() => this.playSound(), 1000);\n    };\n\n    this.newRequest = async () => {\n      console.log('new request');\n      const {\n        user\n      } = this.props;\n      const s_id = user.student.s_id;\n\n      try {\n        const {\n          data\n        } = await T_Api2.ask(s_id, idx_txt);\n        console.log(data);\n\n        if (data.code === 'specified' || data.code === 1) {\n          this.currentIndex = 0;\n          this.cure = data.cure;\n          this.currentCure = data.cure[this.currentIndex];\n          this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n          this.setState({\n            totalNum: this.cure.length\n          });\n          setTimeout(() => this.playSound(), 1000);\n        } else console.log('data message: ' + data.message);\n      } catch (e) {\n        console.log('error: ' + e);\n      }\n    };\n\n    this.tutorial = data => {\n      this.setState({\n        gameState: 'tutorial'\n      });\n      this.currentCure = data.sample_ques;\n      this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n      this.voice = [new Audio(soundURL + data.tut_voice[0].voc_path), new Audio(soundURL + data.tut_voice[1].voc_path), new Audio(soundURL + data.tut_voice[2].voc_path)];\n      this.voice[0].addEventListener('ended', () => {\n        setTimeout(() => {\n          this.currentAudio.play();\n        }, 1000);\n      });\n      this.currentAudio.addEventListener('ended', () => {\n        setTimeout(() => {\n          this.voice[1].play();\n        }, 1000);\n      });\n      this.voice[2].addEventListener('ended', async () => {\n        const {\n          data\n        } = await T_tutorial.answer(this.props.user.student.s_id, idx_txt, this.currentCure.cure_id);\n        console.log(data);\n        this.setState({\n          initState\n        });\n        if (this.learning_type === 'daily') this.daily();else this.newRequest();\n        this.currentCure = null;\n        this.sample_ques = null;\n        this.voice = null;\n      });\n      setTimeout(() => {\n        this.voice[0].play();\n      }, 2000);\n    };\n\n    this.playSound = () => {\n      if (!!this.currentAudio) {\n        this.currentAudio.play();\n        this.changeTTobaki(TTobak.ttobak3_2);\n        this.setState({\n          gameState: false\n        });\n        this.currentAudio.addEventListener('ended', () => {\n          this.setState({\n            gameState: true,\n            TTobaki: TTobak.ttobak1_1\n          });\n        });\n      }\n    };\n\n    this.TTobakiTouch = () => {\n      const {\n        gameState\n      } = this.state;\n\n      if (gameState) {\n        this.playSound();\n      }\n    };\n\n    this.changeTTobaki = ttobaki => {\n      this.setState({\n        TTobaki: ttobaki\n      });\n    };\n\n    this.answer = async () => {\n      effect_sound.play();\n      this.setState({\n        TTobaki: TTobak.ttobak2_1\n      });\n\n      if (this.state.gameState === 'tutorial') {\n        this.voice[2].play();\n        return;\n      }\n\n      const {\n        Apple: {\n          numOfApples\n        }\n      } = this.state;\n      const {\n        user\n      } = this.props;\n      const s_id = user.student.s_id;\n      const {\n        data\n      } = await T_Api2.answer(s_id, this.cure[this.currentIndex].cure_word.length.toString(), numOfApples.toString(), this.cure[this.currentIndex].cure_id, this.learning_type === 'review' ? 'T' : 'F', idx_txt, this.learning_type === 'daily' ? 'T' : 'F');\n      console.log(data);\n\n      if (data.code === 1) {\n        if (data.correct_voice.voc_desc === 'retry') {\n          this.retry_script = new Audio(soundURL + data.correct_voice.voc_path);\n          this.retry_script.addEventListener('ended', () => {\n            this.setState({\n              TTobaki: TTobak.ttobak1_1,\n              Apple: {\n                randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n                applesInBasket: [],\n                numOfApples: 0\n              }\n            });\n            setTimeout(() => {\n              this.currentAudio.play();\n              this.setState({\n                TTobaki: TTobak.ttobak3_2\n              });\n            }, 1000);\n          });\n          setTimeout(() => {\n            this.retry_script.play();\n            this.setState({\n              TTobaki: TTobak.ttobak3_2\n            });\n          }, 1200);\n          return;\n        } else {\n          this.good_script = new Audio(soundURL + data.correct_voice.voc_path);\n          this.good_script.addEventListener('ended', () => this.nextStep());\n          setTimeout(() => {\n            this.good_script.play();\n            this.setState({\n              TTobaki: TTobak.ttobak2_2\n            });\n          }, 1000);\n        }\n      }\n    };\n\n    this.nextStep = () => {\n      if (this.currentIndex < this.cure.length - 1) this.currentIndex++;else {\n        this.gameDone();\n        return;\n      }\n      this.currentCure = this.cure[this.currentIndex];\n      this.currentAudio = new Audio(soundURL + this.cure[this.currentIndex].cure_path);\n      setTimeout(() => {\n        this.setState({\n          gameState: false,\n          timeOut: null,\n          isDragging: false,\n          touchPosition: [],\n          TTobaki: TTobak.ttobak1_1,\n          Apple: {\n            randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n            applesInBasket: [],\n            numOfApples: 0\n          },\n          currentIndex: this.currentIndex + 1\n        });\n      }, 1000);\n      setTimeout(() => {\n        this.playSound();\n      }, 2000);\n    };\n\n    this.createRandomApple = () => {\n      const newApple = T2.t2_Apples[Math.floor(Math.random() * 4)];\n      this.setState({\n        Apple: { ...this.state.Apple,\n          randomApple: newApple\n        }\n      });\n      return newApple;\n    };\n\n    this.dropApple = () => {\n      const {\n        Apple: {\n          applesInBasket,\n          numOfApples,\n          randomApple\n        }\n      } = this.state;\n      if (this.timeOut) clearTimeout(this.timeOut);\n      this.timeOut = setTimeout(() => {\n        this.answer();\n      }, 3000);\n      this.setState({\n        Apple: { ...this.state.Apple,\n          numOfApples: numOfApples <= 5 ? numOfApples + 1 : 5,\n          applesInBasket: applesInBasket.concat(randomApple)\n        }\n      });\n    };\n\n    this.gameDone = () => {\n      console.log('game doen!');\n\n      if (this.learning_type !== 'daily') {\n        this.setState({\n          showDonePopup: true\n        });\n      } else {\n        this.setState({\n          showDailyPopup: true\n        });\n      }\n    };\n\n    this.onTreeTouchStartHandle = e => {\n      touch_sound.play();\n      this.setState({\n        isDragging: true,\n        touchPosition: [e.changedTouches[0].pageX, e.changedTouches[0].pageY]\n      });\n    };\n\n    this.onTreeTouchEndHandle = () => {\n      this.setState({\n        isDragging: false\n      });\n    };\n\n    this.imagesPreloading = picture => {\n      let timeoutPreloading = setTimeout(() => {\n        this.props.history.replace('/main/main');\n      }, 10000);\n\n      for (let i in picture) {\n        for (let prop in picture[i]) {\n          if (typeof picture[i][prop] === 'object') {\n            let arr = picture[i][prop];\n\n            for (let i in arr) {\n              let img = new Image();\n              img.src = arr[i];\n\n              img.onload = () => {\n                this.setState({\n                  percent: ++this.numOfLoadedImage / this.totalImages * 100\n                });\n\n                if (this.numOfLoadedImage === this.totalImages) {\n                  this.setState({\n                    isImageLoaded: true\n                  });\n                  if (this.learning_type === 'daily') this.daily();else this.newRequest();\n                  clearTimeout(timeoutPreloading);\n                }\n              };\n            }\n          } else {\n            let img = new Image();\n            img.src = picture[i][prop];\n\n            img.onload = () => {\n              this.setState({\n                percent: ++this.numOfLoadedImage / this.totalImages * 100\n              });\n\n              if (this.numOfLoadedImage === this.totalImages) {\n                this.setState({\n                  isImageLoaded: true\n                });\n                if (this.learning_type === 'daily') this.daily();else this.newRequest();\n                clearTimeout(timeoutPreloading);\n              }\n            };\n          }\n        }\n      }\n    };\n\n    this.onContinueButtonHandle = () => {\n      this.setState({\n        showPopup: false\n      });\n    };\n\n    this.onRestartButtonHandle = () => {\n      this.setState({\n        showDonePopup: false\n      });\n      this.newRequest();\n      setTimeout(() => {\n        this.setState({\n          gameState: false,\n          timeOut: null,\n          isDragging: false,\n          touchPosition: [],\n          TTobaki: TTobak.ttobak1_1,\n          Apple: {\n            randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n            applesInBasket: [],\n            numOfApples: 0\n          }\n        });\n      }, 2000);\n      setTimeout(() => this.playSound(), 4000);\n    };\n\n    this.onPauseButtonHandle = () => {\n      this.setState({\n        showPopup: true\n      });\n    };\n\n    this.onCompleteButtonHandle = () => {\n      this.answer();\n      clearTimeout(this.timeOut);\n    };\n\n    this.learning_type = match.params.learning_type;\n    this.cure = null;\n    this.cureLength = 0;\n    this.currentIndex = 0;\n    this.currentAudio = null;\n    this.currentCure = 0;\n    this.timeOut = null;\n    this.numOfLoadedImage = 0;\n    this.picture = {\n      T2,\n      TTobak\n    };\n    this.totalImages = Object.keys(T2).length + Object.keys(TTobak).length + 3;\n    this.voc_script = null;\n    this.state = initState;\n  }\n\n  async componentDidMount() {\n    const {\n      user\n    } = this.props;\n\n    if (!user.user.u_id || !user.student.s_id) {\n      this.props.history.push('/root/signin');\n      return;\n    }\n\n    this.imagesPreloading(this.picture);\n  }\n\n  componentWillUnmount() {\n    if (!!this.currentAudio) {\n      this.currentAudio.pause();\n      this.currentAudio = null;\n    }\n\n    this.currentCure = null;\n    this.sample_ques = null;\n    this.voice = null;\n  }\n\n  render() {\n    const {\n      isDragging,\n      touchPosition,\n      Apple,\n      answer,\n      TTobaki,\n      isImageLoaded,\n      showPopup,\n      showDonePopup,\n      showDailyPopup,\n      percent,\n      currentIndex,\n      totalNum\n    } = this.state;\n\n    if (isImageLoaded) {\n      return /*#__PURE__*/React.createElement(DndProvider, {\n        backend: TouchBackend,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CountPresenter, {\n        Background: T2.t2_background,\n        Basket: T2.t2_basket,\n        TTobak: TTobaki,\n        TTobakiTouch: this.TTobakiTouch,\n        onTreeTouchStartHandle: this.onTreeTouchStartHandle,\n        onTreeTouchEndHandle: this.onTreeTouchEndHandle,\n        isDragging: isDragging,\n        touchPosition: touchPosition,\n        createRandomApple: this.createRandomApple,\n        dropApple: this.dropApple,\n        Apple: Apple,\n        answer: answer,\n        onContinueButtonHandle: this.onContinueButtonHandle,\n        onRestartButtonHandle: this.onRestartButtonHandle,\n        onPauseButtonHandle: this.onPauseButtonHandle,\n        onCompleteButtonHandle: this.onCompleteButtonHandle,\n        showPopup: showPopup,\n        showDailyPopup: showDailyPopup,\n        showDonePopup: showDonePopup,\n        currentIndex: currentIndex,\n        totalNum: totalNum,\n        bt_complete: T2.bt_complete,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(LoadingComp, {\n        percent: percent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n}\n\nCount.propTypes = {\n  user: PropTypes.objectOf(PropTypes.any).isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    user: state.user\n  };\n}\n\nexport default connect(mapStateToProps)(withRouter(Count));","map":{"version":3,"sources":["/Users/eun/Projects/FirstPenguin/first-penguin/front/src/Routes/Therapy/T2_Count/CountContainer.js"],"names":["React","withRouter","DndProvider","TouchBackend","PropTypes","connect","LoadingComp","T2","TTobak","T_Api2","soundURL","T_tutorial","SoundEffect","CountPresenter","touch_sound","Audio","touch_effect","effect_sound","twinkle","idx_txt","initState","gameState","isDragging","touchPosition","Apple","randomApple","t2_Apples","Math","floor","random","applesInBasket","numOfApples","TTobaki","ttobak1_1","isImageLoaded","showPopup","showDonePopup","showDailyPopup","percent","currentIndex","totalNum","Count","Component","constructor","match","daily","props","location","state","data","code","tutorial","cure","console","log","length","currentCure","currentAudio","cure_path","setState","setTimeout","playSound","newRequest","user","s_id","student","ask","message","e","sample_ques","voice","tut_voice","voc_path","addEventListener","play","answer","cure_id","learning_type","changeTTobaki","ttobak3_2","TTobakiTouch","ttobaki","ttobak2_1","cure_word","toString","correct_voice","voc_desc","retry_script","good_script","nextStep","ttobak2_2","gameDone","timeOut","createRandomApple","newApple","dropApple","clearTimeout","concat","onTreeTouchStartHandle","changedTouches","pageX","pageY","onTreeTouchEndHandle","imagesPreloading","picture","timeoutPreloading","history","replace","i","prop","arr","img","Image","src","onload","numOfLoadedImage","totalImages","onContinueButtonHandle","onRestartButtonHandle","onPauseButtonHandle","onCompleteButtonHandle","params","cureLength","Object","keys","voc_script","componentDidMount","u_id","push","componentWillUnmount","pause","render","t2_background","t2_basket","bt_complete","propTypes","objectOf","any","isRequired","dispatch","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { DndProvider } from 'react-dnd'\nimport { TouchBackend } from 'react-dnd-touch-backend';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport LoadingComp from 'Components/LoadingComp';\nimport { T2, TTobak } from 'images';\nimport { T_Api2, soundURL, T_tutorial } from 'api';\nimport { SoundEffect } from 'images';\n\nimport CountPresenter from './CountPresenter';\n\nconst touch_sound = new Audio(SoundEffect.touch_effect);\nconst effect_sound = new Audio(SoundEffect.twinkle);\n\nconst idx_txt = 'count';\nconst initState = {\n    gameState: false,\n    isDragging: false,\n    touchPosition: [],\n    Apple: {\n        randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n        applesInBasket: [],\n        numOfApples: 0,\n    },\n    TTobaki: TTobak.ttobak1_1,\n    isImageLoaded: false,\n    showPopup: false,\n    showDonePopup: false,\n    showDailyPopup: false,\n    percent: 0,\n    currentIndex: 1,\n    totalNum: 0,\n};\n\nclass Count extends React.Component {\n    static propTypes = {\n        user: PropTypes.objectOf(PropTypes.any).isRequired,\n        dispatch: PropTypes.func.isRequired,\n    };\n\n    constructor({ match }) {\n        super();\n        this.learning_type = match.params.learning_type;\n        this.cure = null;\n        this.cureLength = 0;\n        this.currentIndex = 0;\n        this.currentAudio = null;\n        this.currentCure = 0;\n        this.timeOut = null;\n        this.numOfLoadedImage = 0;\n        this.picture = { T2, TTobak };\n        this.totalImages = Object.keys(T2).length + Object.keys(TTobak).length + 3;\n        this.voc_script = null;\n        this.state = initState;\n    }\n\n    async componentDidMount() {\n        const { user } = this.props;\n\n        if (!user.user.u_id || !user.student.s_id) {\n            this.props.history.push('/root/signin');\n            return;\n        }\n        this.imagesPreloading(this.picture);\n    }\n\n    componentWillUnmount() {\n        if (!!this.currentAudio) {\n            this.currentAudio.pause();\n            this.currentAudio = null;\n        }\n\n        this.currentCure = null;\n        this.sample_ques = null;\n        this.voice = null;\n    }\n\n    daily = () => {\n        if (this.props.location.state.data.code === 'tutorial') {\n            this.tutorial(this.props.location.state.data);\n            return;\n        }\n        this.cure = this.props.location.state.data.cure;\n        console.log(this.cure.length);\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n        this.setState({\n            totalNum: this.cure.length,\n        });\n        setTimeout(() => this.playSound(), 1000);\n    }\n\n    newRequest = async () => {\n        console.log('new request');\n        const { user } = this.props;\n        const s_id = user.student.s_id;\n\n        try {\n            const { data } = await T_Api2.ask(s_id, idx_txt);\n            console.log(data);\n\n            if (data.code === 'specified' || data.code === 1) {\n                this.currentIndex = 0;\n                this.cure = data.cure;\n                this.currentCure = data.cure[this.currentIndex];\n                this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n\n                this.setState({\n                    totalNum: this.cure.length,\n                });\n                setTimeout(() => this.playSound(), 1000);\n            }\n            else console.log('data message: ' + data.message);\n        } catch (e) {\n            console.log('error: ' + e);\n        }\n    }\n\n    tutorial = (data) => {\n        this.setState({\n            gameState: 'tutorial',\n        });\n\n        this.currentCure = data.sample_ques;\n        this.currentAudio = new Audio(soundURL + this.currentCure.cure_path);\n\n        this.voice = [\n            new Audio(soundURL + data.tut_voice[0].voc_path),\n            new Audio(soundURL + data.tut_voice[1].voc_path),\n            new Audio(soundURL + data.tut_voice[2].voc_path),\n        ];\n\n        this.voice[0].addEventListener('ended', () => {\n            setTimeout(() => {\n                this.currentAudio.play();\n            }, 1000);\n        });\n\n        this.currentAudio.addEventListener('ended', () => {\n            setTimeout(() => {\n                this.voice[1].play();\n            }, 1000);\n        })\n\n        this.voice[2].addEventListener('ended', async () => {\n            const { data } = await T_tutorial.answer(this.props.user.student.s_id, idx_txt, this.currentCure.cure_id);\n            console.log(data);\n            this.setState({\n                initState,\n            });\n            if (this.learning_type === 'daily') this.daily();\n            else this.newRequest();\n\n            this.currentCure = null;\n            this.sample_ques = null;\n            this.voice = null;\n        });\n\n        setTimeout(() => {\n            this.voice[0].play();\n        }, 2000);\n    }\n\n    playSound = () => {\n        if (!!this.currentAudio) {\n            this.currentAudio.play();\n            this.changeTTobaki(TTobak.ttobak3_2);\n\n            this.setState({\n                gameState: false,\n            });\n\n            this.currentAudio.addEventListener('ended', () => {\n                this.setState({\n                    gameState: true,\n                    TTobaki: TTobak.ttobak1_1,\n                })\n            });\n        }\n    }\n\n    TTobakiTouch = () => {\n        const { gameState } = this.state;\n        if (gameState) {\n            this.playSound();\n        }\n    }\n\n    changeTTobaki = (ttobaki) => {\n        this.setState({\n            TTobaki: ttobaki\n        });\n    }\n\n    answer = async () => {\n        effect_sound.play();\n        this.setState({\n            TTobaki: TTobak.ttobak2_1\n        });\n        if (this.state.gameState === 'tutorial') {\n            this.voice[2].play();\n            return;\n        }\n        const { Apple: { numOfApples } } = this.state;\n        const { user } = this.props;\n        const s_id = user.student.s_id;\n\n        const { data } = await T_Api2.answer(\n            s_id,\n            this.cure[this.currentIndex].cure_word.length.toString(),\n            numOfApples.toString(),\n            this.cure[this.currentIndex].cure_id,\n            this.learning_type === 'review' ? 'T' : 'F',\n            idx_txt,\n            this.learning_type === 'daily' ? 'T' : 'F',\n        );\n        console.log(data);\n\n        if (data.code === 1) {\n            if (data.correct_voice.voc_desc === 'retry') {\n                this.retry_script = new Audio(soundURL + data.correct_voice.voc_path);\n                this.retry_script.addEventListener('ended', () => {\n                    this.setState({\n                        TTobaki: TTobak.ttobak1_1,\n                        Apple: {\n                            randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n                            applesInBasket: [],\n                            numOfApples: 0,\n                        },\n                    });\n                    setTimeout(() => {\n                        this.currentAudio.play();\n                        this.setState({\n                            TTobaki: TTobak.ttobak3_2,\n                        });\n                    }, 1000);\n                });\n                setTimeout(() => {\n                    this.retry_script.play();\n                    this.setState({\n                        TTobaki: TTobak.ttobak3_2,\n                    });\n                }, 1200);\n                return;\n            } else {\n                this.good_script = new Audio(soundURL + data.correct_voice.voc_path);\n                this.good_script.addEventListener('ended', () => this.nextStep());\n                setTimeout(() => {\n                    this.good_script.play();\n                    this.setState({\n                        TTobaki: TTobak.ttobak2_2,\n                    });\n                }, 1000);\n            }\n        }\n    }\n\n    nextStep = () => {\n        if (this.currentIndex < this.cure.length - 1) this.currentIndex++;\n        else {\n            this.gameDone();\n            return;\n        }\n\n        this.currentCure = this.cure[this.currentIndex];\n        this.currentAudio = new Audio(soundURL + this.cure[this.currentIndex].cure_path);\n\n        setTimeout(() => {\n            this.setState({\n                gameState: false,\n                timeOut: null,\n                isDragging: false,\n                touchPosition: [],\n                TTobaki: TTobak.ttobak1_1,\n                Apple: {\n                    randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n                    applesInBasket: [],\n                    numOfApples: 0,\n                },\n                currentIndex: this.currentIndex + 1\n            });\n        }, 1000);\n\n        setTimeout(() => {\n            this.playSound();\n        }, 2000);\n    }\n\n    createRandomApple = () => {\n        const newApple = T2.t2_Apples[Math.floor(Math.random() * 4)];\n\n        this.setState({\n            Apple: {\n                ...this.state.Apple,\n                randomApple: newApple,\n            }\n        })\n        return newApple;\n    }\n\n    dropApple = () => {\n        const { Apple: { applesInBasket, numOfApples, randomApple } } = this.state;\n        if (this.timeOut) clearTimeout(this.timeOut);\n\n        this.timeOut = setTimeout(() => {\n            this.answer();\n        }, 3000);\n\n        this.setState({\n            Apple: {\n                ...this.state.Apple,\n                numOfApples: numOfApples <= 5 ? numOfApples + 1 : 5,\n                applesInBasket: applesInBasket.concat(randomApple),\n            },\n        });\n    }\n\n    gameDone = () => {\n        console.log('game doen!');\n        if (this.learning_type !== 'daily') {\n            this.setState({\n                showDonePopup: true,\n            })\n        } else {\n            this.setState({\n                showDailyPopup: true,\n            })\n        }\n    }\n\n    onTreeTouchStartHandle = e => {\n        touch_sound.play();\n        this.setState({\n            isDragging: true,\n            touchPosition: [e.changedTouches[0].pageX, e.changedTouches[0].pageY],\n        })\n    }\n\n    onTreeTouchEndHandle = () => {\n        this.setState({\n            isDragging: false,\n        })\n    }\n\n    imagesPreloading = (picture) => {\n        let timeoutPreloading = setTimeout(() => {\n            this.props.history.replace('/main/main');\n        }, 10000);\n\n        for (let i in picture) {\n            for (let prop in picture[i]) {\n                if (typeof (picture[i][prop]) === 'object') {\n                    let arr = picture[i][prop];\n                    for (let i in arr) {\n                        let img = new Image();\n                        img.src = arr[i];\n                        img.onload = () => {\n                            this.setState({\n                                percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                            })\n                            if (this.numOfLoadedImage === this.totalImages) {\n                                this.setState({\n                                    isImageLoaded: true,\n                                });\n                                if (this.learning_type === 'daily') this.daily();\n                                else this.newRequest();\n                                clearTimeout(timeoutPreloading);\n                            }\n                        };\n                    }\n                } else {\n                    let img = new Image();\n                    img.src = picture[i][prop];\n                    img.onload = () => {\n                        this.setState({\n                            percent: (++this.numOfLoadedImage / this.totalImages) * 100\n                        })\n                        if (this.numOfLoadedImage === this.totalImages) {\n                            this.setState({\n                                isImageLoaded: true,\n                            })\n                            if (this.learning_type === 'daily') this.daily();\n                            else this.newRequest();\n                            clearTimeout(timeoutPreloading);\n                        }\n                    };\n                }\n            }\n        }\n    }\n\n    onContinueButtonHandle = () => {\n        this.setState({\n            showPopup: false,\n        })\n    }\n\n    onRestartButtonHandle = () => {\n        this.setState({\n            showDonePopup: false,\n        })\n        this.newRequest();\n        setTimeout(() => {\n            this.setState({\n                gameState: false,\n                timeOut: null,\n                isDragging: false,\n                touchPosition: [],\n                TTobaki: TTobak.ttobak1_1,\n                Apple: {\n                    randomApple: T2.t2_Apples[Math.floor(Math.random() * 4)],\n                    applesInBasket: [],\n                    numOfApples: 0,\n                },\n            });\n        }, 2000);\n        setTimeout(() => this.playSound(), 4000);\n    }\n\n    onPauseButtonHandle = () => {\n        this.setState({\n            showPopup: true,\n        })\n    }\n\n    onCompleteButtonHandle = () => {\n        this.answer();\n        clearTimeout(this.timeOut);\n    }\n\n    render() {\n        const { isDragging, touchPosition, Apple, answer, TTobaki, isImageLoaded,\n            showPopup, showDonePopup, showDailyPopup, percent,\n            currentIndex, totalNum } = this.state;\n        if (isImageLoaded) {\n            return (\n                <DndProvider backend={TouchBackend}>\n                    <CountPresenter\n                        Background={T2.t2_background}\n                        Basket={T2.t2_basket}\n                        TTobak={TTobaki}\n                        TTobakiTouch={this.TTobakiTouch}\n                        onTreeTouchStartHandle={this.onTreeTouchStartHandle}\n                        onTreeTouchEndHandle={this.onTreeTouchEndHandle}\n                        isDragging={isDragging}\n                        touchPosition={touchPosition}\n                        createRandomApple={this.createRandomApple}\n                        dropApple={this.dropApple}\n                        Apple={Apple}\n                        answer={answer}\n                        onContinueButtonHandle={this.onContinueButtonHandle}\n                        onRestartButtonHandle={this.onRestartButtonHandle}\n                        onPauseButtonHandle={this.onPauseButtonHandle}\n                        onCompleteButtonHandle={this.onCompleteButtonHandle}\n                        showPopup={showPopup}\n                        showDailyPopup={showDailyPopup}\n                        showDonePopup={showDonePopup}\n                        currentIndex={currentIndex} totalNum={totalNum}\n                        bt_complete={T2.bt_complete}\n                    />\n                </DndProvider>\n            );\n        }\n        else {\n            return <LoadingComp percent={percent} />\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { user: state.user }\n}\n\nexport default connect(mapStateToProps)(withRouter(Count));"]},"metadata":{},"sourceType":"module"}